id,title,homepage,subtitle,level,starter,image,banner_image,teaser_video,summary,short_summary,required_knowledge,expected_learning,featured,syllabus,faq,full_course_available,expected_duration,expected_duration_unit,new_release
bio110,"Tales from the Genome",https://www.udacity.com/course/tales-from-the-genome--bio110?utm_medium=referral&utm_campaign=api,"Introduction to Genetics for Beginners",beginner,False,https://lh5.ggpht.com/Fh07_XbT61CGDWsQoOMQaIeHlgoR2tVogD0nnkmUsd7OaM_l5YIJeT1AJD55oQcSCTpjwIK4b7a8vL9DWw=s0#w=436&h=268,https://lh4.ggpht.com/_AHqr0EXcLBzF0rrwtBagE0tw86qcitFjUF21mCh2h_mReMEZ-hsYdNFvKQXz0zY9yUX9ufCiQk09m6oGBU=s0#w=2340&h=484,https://www.youtube.com/watch?v=sEXrjh-tme8,"This course is a journey into the biology of the human genome and will highlight the scientific, social, and personal perspectives of people living with a variety of traits.","Learn the basics of genetics, with a personal twist. This class is all about DNA and how it shapes who we are.","No previous experience in genetics is necessary. However, familiarity with basic biological concepts, like the cell, is beneficial.","You will learn about fundamental principles of inheritance, gene expression, mutation and variation, development of simple and complex biological traits, human ancestry and evolution, and the acquisition of personal genetic information. By the end of this course, you will be able to read and understand genetic information available from personal genetics services such as [23andMe](https://www.23andme.com/).",False,"## Lesson 1: Introduction to traits and heredity
Trait variation and categorization, basic models of inheritance, and the connection via DNA. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_1_Concept_Map.pdf) for this lesson.

## Lesson 2: Defining the genome
DNA structure, chromosomes, and genome organization. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_2_Concept_Map.pdf) for this lesson.

## Lesson 3: How a genome works
Protein coding genes, transcription, translation, discerning the genetic code, and alleles. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_3_Concept_Map.pdf) for this lesson.

## Lesson 4: Gene regulation
Non-coding DNA, regulatory regions of genes, and transcription factors. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_4_Concept_Map.pdf) for this lesson.

## Lesson 5: Transmission of genes and traits
Family relationships and pedigrees, inheritance patterns, allele dominance, and chromosome dynamics. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_5_Concept_Map.pdf) for this lesson.

## Lesson 6: Origin of mutation/variation
Types of mutations, various causes of mutation, allelic frequency, and the spread of alleles in a population. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_6_Concept_Map.pdf) for this lesson.

## Lesson 7: How to obtain and interpret personal genetic information
Personalized genetics: sample acquisition, DNA extraction and processing, and interpretation of results. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_7_Concept_Map.pdf) for this lesson.

## Lesson 8: Simple genetic traits
Molecular causes of monogenic traits, loss-of-function vs. gain-of-function alleles, and dominance. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_8_Concept_Map.pdf) for this lesson.

## Lesson 9: Multifactorial traits
Polygenic traits, complex traits with an environmental effect, qualitative and quantitative measures, twin studies, relative risk, and genome-wide association studies (GWAS). Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_9_Concept_Map.pdf) for this lesson.

## Lesson 10: Pharmacogenetics: genes and drugs
Pharmacokinetics and pharmacodynamics, alleles affecting drug metabolism, and personalized medicine. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_10_Concept_Map.pdf) for this lesson.

## Lesson 11: Human ancestry and evolution
Identity by state (IBS), Identity by descent (IBD), relative finder, maternal and paternal lineages, neanderthal interbreeding, and human/chimp evolution. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_11_Concept_Map.pdf) for this lesson.

## Lesson 12: The immortal genome (putting genetics to work)
Personal decisions, legal questions, professional options, and the future of genetics. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_12_Concept_Map.pdf) for this lesson.

## Bonus Lesson: Discovering DNA in your Kitchen
Using only normal household items, even YOU can extract DNA and see it live and in person. At the end of this lesson you'll have the best new party trick EVER. (just remember to bring strawberries) [Here](http://content.udacity-data.com/course/bio110/Kitchen_DNA_Extraction_from_Strawberries.pdf) is the protocol/procedure to make it happen.",,False,3,months,False
cs046,"Intro to Java Programming",https://www.udacity.com/course/intro-to-java-programming--cs046?utm_medium=referral&utm_campaign=api,"Building Programs with Classes & Objects",beginner,False,https://lh4.ggpht.com/9ytiUdz0QYHwuMJFTXcNXZn4FctGW6Zszm7Aj5s7mXHHXsapIKYPL08vPWeghAjF2QmuhPiYCU2Q3kNeW7w=s0#w=1725&h=1060,https://lh3.ggpht.com/AdAALPYhCsWuIvDl0ZY6zIW23B58wqCiZYuQZPVIAeR86ylThoImtG_DRuk2gvUfMkaRS3sfTzn21wnAmHM=s0#w=4680&h=968,https://www.youtube.com/watch?v=Wsp5Rrenoq4,"In this introductory course, you'll learn and practice essential computer science concepts using the Java programming language. You'll learn about Object Oriented Programming, a technique that allows you to use code written by other programmers in your own programs. You'll put your new Java programming skills to the test by solving real-world problems faced by software engineers.","Learn essential computer science and object-oriented programming concepts in this introductory Java course.","No prior programming experience and knowledge is assumed or needed. Beginners welcome!","Java is one of the most popular programming languages used by software developers today. It is the core language used in developing Android apps, and is also commonly used in back-end web development. If you’re new to programming and want to enter either of these fields, this course is a great place to get started.

Even if you don’t have a career trajectory in mind, Java programming is a great option for first-time coders due to its popularity and ease of use. This course will provide you with a solid foundation in computer science and Object Oriented Programming concepts, as well as set you on the path for success as a software engineer.",False,"### Lesson 1: Introduction to Computers, Programming Languages, Algorithms, and the Java Programming Environment

### Lesson 2: Introduction to Classes and Objects

### Lesson 3: Graphics

### Lesson 4: Fundamental Data Types

### Lesson 5: Decisions

### Lesson 6: Iterations

### Lesson 7: Arrays, ArrayLists and Simple Array Algorithms

### Lesson 8: Methods (Parameter Passing, Instance vs. Static Methods)

### Lesson 9: Inheritance",,True,4,months,False
cs101,"Intro to Computer Science",https://www.udacity.com/course/intro-to-computer-science--cs101?utm_medium=referral&utm_campaign=api,"Build a Search Engine & a Social Network",beginner,True,https://lh5.ggpht.com/ITepKi-2pz4Q6lrLfv6QDNViEGIfxyupzgQwx1YgS4L8m3MFITBKWDpaZb_VoAP-zV3bEEoIbFY7mauj8HM=s0#w=1724&h=1060,https://lh5.ggpht.com/UCA7Y75zHA5jwS9o5dmeAn8TlBiTZZbFQZ3ktLaVnfgSHNELh1rquY1dbzOB6BaYyXP0UMNNazdauW_g1w=s0#w=4680&h=968,https://www.youtube.com/watch?v=Pm_WAWZNbdA,"In this introduction to computer programming course, you’ll learn and practice key computer science concepts by building your own versions of popular web applications. You’ll learn Python, a powerful, easy-to-learn, and widely used programming language, and you’ll explore computer science basics, as you build your own search engine and social network.","Learn key computer science concepts in this introductory Python course. You'll learn by doing, and will build your own search engine and social network.","There is no prior computer programming knowledge needed for this course. Beginners are welcome!","You’ll learn the programming language Python, and you’ll explore foundational concepts in computer science. Most importantly, you’ll start thinking like a software engineer by solving interesting problems (how to build a web crawler or a social network) using computer programming. 

This course is a first step into the world of computer science, and whether you want to become a software engineer, or collaborate with software engineers, this course is for you. You’ll be prepared for intermediate-level computer science classes when you’ve mastered the concepts covered in this course.

###Build a Search Engine
Throughout this course, you’ll build a search engine by learning about and producing key search engine components including a crawler, an index and a page rank algorithm. As you build these pieces, you’ll be learning about and practicing computer science skills that will ready you for intermediate level computer science courses. 

###Build a Social Network
At the end of the course we will give you a set of relationships (i.e. strings of phrases like “Dave likes Andy, Kathleen and Kristy”) and you will use your new computer science skills to organize these relationships into a social network. With your new social network, you can explore relationships and gain insight into how you fit into your own social networks.",False,"###Lesson 1: How to Get Started

- Interview with Sergey Brin
- Getting Started with Python
- Processors
- Grace Hopper
- Variables
- Strings and Numbers
- Indexing Strings
- String Theory

###Lesson 2: How to Repeat

- Introducing Procedures
- Sum Procedure with a Return Statement
- Equality Comparisons
- If Statements
- Or Function
- Biggest Procedure
- While Loops
- Print Numbers

###Lesson 2.5: How to Solve Problems

- What are the Inputs
- Algorithm Pseudocode
- Optimizing

###Lesson 3: How to Manage Data

- Nested Lists
- A List of Strings
- Aliasing
- List Operations
- List Addition and Length
- How Computers Store Data
- For Loops
- Popping Elements
- Crawl Web

### Lesson 4: Responding to Queries

- Data Structures
- Lookup
- Building the Web Index
- Latency
- Bandwidth
- Buckets of Bits
- Protocols

### Lesson 5: How Programs Run

- Measuring Speed
- Spin Loop
- Index Size vs. Time
- Making Lookup Faster
- Hash Function
- Testing Hash Functions
- Implementing Hash Tables
- Dictionaries
- Modifying the Search Engine

### Lesson 6: How to Have Infinite Power

- Infinite Power
- Counter
- Recursive Definitions
- Recursive Procedures
- Palindromes
- Recursive v. Iterative
- Divide and Be Conquered 
- Ranking Web Pages

### Lesson 7: Past, Present, and the Future of Computing

- Past of Computing
- Computer History Museum 
- First Hard Drive
- Search Before Computers
- Present of Computing
- Slac and Big Data
- Open Source
- Future of Computing
- Text Analysis
- Energy Aware Computing
- Computer Security
- Quantum Computing","### When does the course begin?
 
This class is self paced. You can begin whenever you like and then follow your own pace. It’s a good idea to set goals for yourself to make sure you stick with the course.

### How long will the course be available?

This class will always be available! 

### How do I know if this course is for me?

 Take a look at the “Class Summary,” “What Should I Know,” and “What Will I Learn” sections above. If you want to know more, just enroll in the course and start exploring.

### Can I skip individual videos? What about entire lessons?

 Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you’re confused, you can always go back and watch something that you skipped.

### What are the rules on collaboration?

 Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them. 

### Why are there so many questions?

 Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.

### What should I do while I’m watching the videos?

 Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.",True,3,months,False
cs212,"Design of Computer Programs",https://www.udacity.com/course/design-of-computer-programs--cs212?utm_medium=referral&utm_campaign=api,"Programming Principles",advanced,False,https://lh3.ggpht.com/M8Ws2Jr9z9HYIcvev27ZNt1Fb2XsFNkD6qtQnYHzVyUPu-oqAU7Da2YD1vzxbLu302cg_77xmqaX0VCvNAk=s0#w=436&h=268,https://lh3.ggpht.com/_XeMzzYyjih_n8agpgbabjUiqjDKzZMloD7liBjzjO82ZkRYSAG6UY_qaCQYh0iu2QnUyvfYjXT_Pf-8fQ=s0#w=1170&h=422,,"Understanding how to approach programming problems and devise a solution is an essential skill for any Python developer. In this course, you’ll learn new concepts, patterns, and methods that will expand your coding abilities from programming expert, Peter Norvig.","Learn how to model problems, and how to optimize performance by using some of the advanced features of Python.","This course is intended for experienced Python programmers; students should be familiar with the Python syntax, as well as familiar with the following programming concepts: data structures, basic algorithms, and lambda functions.

This course is intended to challenge you. Be ready to struggle (and learn)!","Move along the path towards becoming an expert programmer! In this class you will practice going from a problem description to a solution, using a series of assignments. During office hours segments, Peter will also share his own personal tips and tricks for approaching programming problems - and his techniques may surprise you!",False,"### Lesson 1: Winning Poker Hands

Steps of the design process; Developing for clarity and generality; 
Arguments for program correctness; Experimentation and simulation.; 
Design tradeoffs; Simplicity and Clarity. Decomposition and composability.
                
### Lesson 2: Back of the Envelope


Back of envelope calculations; When to use brute force and when to be 
clever; The Zebra puzzle; Generator expressions; Permutations and 
combinations. Cryptarithmetic; Recursive and wishful thinking; Longest palindrome 
substring algorithm.
                
### Lesson 3: Regular Expressions, other languages and interpreters                

Defining the language of regular expressions; Interpreting the language; 
Defining the set of strings matched by a regular expression;  
Other languages.
                
### Lesson 4: Dealing with complexity through search
                

Search: finding your way with a flashlight or boat; pouring water. 
Analyzing the efficiency of an algorithm; Recurrence relations; Matching 
data types with algorithms.
### Lesson 5: Dealing with uncertainty through probability
                

Probability: the game of Pig; Maximizing expected utility to optimize strategy. 
  
### Lesson 6: Word Games                

Managing complexity; Large sets of words; Appropriate data structures; Word games. 
                
### Lesson 7: Conclusion

Interviews and Practice Exam","### When does the course begin?
 
This class is self paced. You can begin whenever you like and then follow your own pace. It’s a good idea to set goals for yourself to make sure you stick with the course.

### How long will the course be available?

 This class will always be available! 

### How do I know if this course is for me?

 Take a look at the “Class Summary,” “What Should I Know,” and “What Will I Learn” sections above. If you want to know more, just enroll in the course and start exploring.

### Can I skip individual videos? What about entire lessons?

 Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you’re confused, you can always go back and watch something that you skipped.

### How much does this cost?

 It’s completely free! If you’re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.

### What are the rules on collaboration?

 Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them. 

### Why are there so many questions?

 Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.

### What should I do while I’m watching the videos?

 Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.",True,2,months,False
cs215,"Intro to Algorithms",https://www.udacity.com/course/intro-to-algorithms--cs215?utm_medium=referral&utm_campaign=api,"Social Network Analysis",intermediate,False,https://lh4.ggpht.com/XYlScEjY8t3gmrnlodRerH8kpnQAxnG8ofy9aj8hJHm44-HvyISIs32YY2rQKNTA3sYN4yXuegk7nNjtPg=s0#w=436&h=268,https://lh4.ggpht.com/drkbdrNDT-HUpCwIYPPoRov88_HMk5t3UUi9bqUs0PrVKcYkgRZa-C23gkEpck7nvqxdHWAf01iLsO6GXbs=s0#w=4680&h=968,https://www.youtube.com/watch?v=-jTyn7xuyvE,"Ever played the Kevin Bacon game? This class will show you how it works by giving you an introduction to the design and analysis of algorithms, enabling you to discover how individuals are connected. ","This class will give you an introduction to the design and analysis of algorithms, enabling you to analyze networks and discover how individuals are connected.","This class assumes an understanding of programming at the level of CS101, including the ability to read and write short programs in Python; it also assumes a comfort level with mathematical notation at the level of high school Algebra II or the SATs.","By the end of this class you will understand key concepts needed to devise new algorithms for graphs and other important data structures and to evaluate the efficiency of these algorithms.",False,"### Lesson 1: A Social Network Magic Trick

Objective: Become familiar with Algorithm Analysis. 

- Eulerian Path
- Correctness of Naïve
- Russian Peasants Algorithm
- Measuring Time
- Steps for Naive, Steps for Russian
- Divide and Conquer

### Lesson 2: Growth Rates in Social Networks

Objective: Use mathematical tools to analyze how things are connected.

- Chain, Ring and Grid Networks
- Big Theta 
- Planar Graphs
- Nodes, Edges, Regions
- Growth Rate of Edges in Planar Graph
- Hypercube
- Randomly Generated Graphs
- N Squared
- Tangled Hypercube

### Lesson 3: Basic Graph Algorithms

Objective: Find the quickest route to Kevin Bacon. 

- Properties of Social Networks
- Clustering Coefficient
- Connected Components
- Running Time of Connected Components
- Checking Pairwise Connectivity
- Pairwise Shortest Path
- Depth vs. Breadth First Search
- Recursion Replacement
- Marvel “Social” Network
- Finding Bridge Edges

### Lesson 4: It’s Who You Know

Objective: Learn to keep track of your Best Friends using heaps.

- Degree Centrality
- Top K Via Partitioning
- Three Partitioning Cases
- Properties of a Heap 
- Patch Up a Heap
- Down Heapify
- Heap Sort

### Lesson 5: Strong and Weak Bonds

Objective: Work with Social Networks that have edge weights.

- Make a Tree
- Strength of Connections
- Weighted Social Networks
- How to Find the Shortest Path
- Dijkstra’s Shortest Path Algorithm
- Floyd-Warshall Intro
- Randomizing Clustering Coefficient 
- Bounds on the Estimate

### Lesson 6: Hardness of Network Problems

Objective: Explore what it means for a Social Network problem to be 
""harder"" than other.

- Tetristan
- Exponential Running Time 
- Degrees of Hardness
- Reduction: Long and Simple Path
- Polynomial Time Decidable Problems
- Non-deterministic Polynomial Time Decidable Problem
- Clique Problem in NP
- Find the Strangers
- Graph Coloring is NP-Complete


### Lesson 7: Review and Application

- Interview with Peter Winker (Professor, Dartmouth College) on Names and Boxes Problem && Puzzles and Algorithms

- Interview with Tina Eliassi-Rad (Professor, Rutgers University) on 
Statistical Measures in Network && Social Networks in Security and Protests

- Interview with Andrew Goldberg (Principal Researcher, Microsoft Research) on Practical Algorithms

- Interview with Vukosi Marivate (Graduate Student, Rutgers University) on Social Algorithms
	
- Interview with Duncan Watts (Principal Researcher, Microsoft) on Pathway That Can Use Two Nodes	

- Intro to Graph Search Animation","### When does the course begin?
 
This class is self paced. You can begin whenever you like and then follow your own pace. It’s a good idea to set goals for yourself to make sure you stick with the course.

### How long will the course be available?

 This class will always be available! 

### Can I skip individual videos? What about entire lessons?

 Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you’re confused, you can always go back and watch something that you skipped.

### What are the rules on collaboration?

 Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them. 

### Why are there so many questions?

 Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.

### What should I do while I’m watching the videos?

 Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.",True,4,months,False
cs222,"Differential Equations in Action",https://www.udacity.com/course/differential-equations-in-action--cs222?utm_medium=referral&utm_campaign=api,"Making Math Matter",intermediate,False,https://lh6.ggpht.com/ECYZkX-7ISq3MJdRY-vsyvz7OZTz7GwmpX_CFb8Z2MiI6PAFHWm12xyh_hegFepPRK8L7XK_2rRaiA-s7A=s0#w=436&h=268,https://lh5.ggpht.com/FYlBDA8_eRTCMuc-ZlG55qHjR9IYH-t1y1z06h3NPyfiRrCtK4Cg-RRY5yydzvg49ko-eCJ6lVzSPO8wVWG-=s0#w=1170&h=422,https://www.youtube.com/watch?v=CWyJDfkP8T4,"In this course, you'll hone your problem-solving skills through learning to find numerical solutions to systems of differential equations. You'll write code in Python to fight forest fires, rescue the Apollo 13 astronauts, stop the spread of epidemics, and resolve other real-world dilemmas.","Write Python code to find numerical solutions to systems of differential equations. The models you create will fight wildfires, bring spaceships back to earth, and more!","<p>You'll need a basic knowledge of programming in Python for this course, around the level of <a href=""http://www.udacity.com/overview/Course/cs101/CourseRev/apr2012"">Intro to Computer Science</a>. An understanding of Python packages, as discussed in <a href=""https://www.udacity.com/course/ud036"" target=""_blank"">Programming Foundations with Python</a>, will also be helpful.</p>
 
<p>In addition, you'll need to feel comfortable with trigonometry at the high school level, as well as basic vector algebra. This class will primarily involve solving differential equations numerically rather than analytically, but some exposure to <a href=""http://www.khanacademy.org/math/calculus/"" target=""_blank"">calculus</a> and physics at the level of <a href=""https://www.udacity.com/course/ph100"" target=""_blank"">Intro to Physics</a> wouldn't hurt.</p> 

<p>Most of all, bring with you a love of learning and problem solving!</p>","<p>By the end of this course, you'll develop an intuition for the use of differential equations in the applied sciences. You'll also learn how to build mathematical models for systems of differential equations using a variety of techniques. Along the way, you'll learn how to translate mathematical expressions into Python code and solve some really cool problems!</p>",False,"### Lesson 1: Rescuing Apollo 13, Part 1

Introduction to the Forward Euler Method

### Lesson 2: Rescuing Apollo 13, Part 2

Comparing solvers, Heun’s Method, and the Symplectic Euler Method

### Lesson 3: Analyzing the Spread of Diseases

Implicit methods and stiffness

### Lesson 4: There’s Plenty of Fish in the Sea?

Stability, sensitivity, and optimization

### Lesson 5: Antilock Brake Systems

Friction, equilibria, and control theory

### Lesson 6: The Path of a Forest Fire

Partial differential equations and heat conduction

### Lesson 7: Advanced Applications of Numerical Methods

Chaos, software, and predictive capability","### When does the course begin?
 
This class is self paced. You can begin whenever you like and then follow your own pace. It’s a good idea to set goals for yourself to make sure you stick with the course.

### How long will the course be available?

 This class will always be available! 

### How do I know if this course is for me?

 Take a look at the “Class Summary,” “What Should I Know,” and “What Will I Learn” sections above. If you want to know more, just enroll in the course and start exploring.

### Can I skip individual videos? What about entire lessons?

 Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you’re confused, you can always go back and watch something that you skipped.

### How much does this cost?

 It’s completely free! If you’re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.

### What are the rules on collaboration?

 Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them. 

### Why are there so many questions?

 Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.

### What should I do while I’m watching the videos?

 Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.",True,2,months,False
cs253,"Web Development",https://www.udacity.com/course/web-development--cs253?utm_medium=referral&utm_campaign=api,"How to Build a Blog",intermediate,False,https://lh4.ggpht.com/FraZoWIlsBTNmgBjNwvDshsBj84aycbTS5wxWU1KocDigABnbxTbIo7DyYs_QKoC8xM00kxLGln0ckL5Huo=s0#w=436&h=268,https://lh4.ggpht.com/584I4_QVgpXdMLhWszZFCz3f0z0Vhvc3x4m3eglC0xInNCyMGoszlnPlwIrtRks3-MM5k1_DnSTIjp7ch7A=s0#w=4680&h=968,https://www.youtube.com/watch?v=4z37fUbpJ3s,"Try to picture yourself sitting down with your computer, ready to start developing a fully functional web application for the first time, available online for millions to use. “Where should I even begin? How long is this going to take me? Am I making any mistakes along the way?” The questions may leave you with an uneasy feeling that you will learn many lessons the hard way. 

In this intermediate course, Steve Huffman will teach you everything he wished he knew when he started building <a href=""http://www.reddit.com/"" target=""_blank"">Reddit</a> and, more recently, <a href=""http://www.hipmunk.com/"" target=""_blank"">Hipmunk</a>, as a lead engineer. Starting from the basics of how the web works, this course will walk you through core web development concepts such as how internet and browsers fit together, form validations, databases, APIs, integrating with other websites, scaling issues, and more; all of which form part of the knowledge it takes to build a web application of your own.","Starting from the basics of how the web works, you will learn everything you need to know to build your own blog and scale it to support large numbers of users.","In order to take the full advantage of this course, we want you to be well prepared for it. This course assumes an intermediate proficiency programming with Python, as well as a solid knowledge on the following topics: 

- Basic computer science concepts such as procedures, decision statements, and loops. 
- Basic data structures such as lists, dictionaries, and hash tables. 
- Object-oriented programming. 

Please feel free to peek at the <a href=""https://www.udacity.com/course/cs101"" target=""_blank"">Intro to Computer Science</a> and <a href=""https://www.udacity.com/course/ud036"" target=""_blank"">Programming Foundations with Python</a> courses to make sure you are comfortable with these required concepts for the course.","By taking this course, you will embark on a digital adventure to build your very own application live on the web. Valuable lessons often come from experience, and it’s from this experience that Steve brings a fresh perspective to the classroom to show you how to approach building your web application in a way that assuages the potential challenges you may face. 
In this course, you will learn by doing. Once you dive into the course experience, you will work on awesome projects: 

- Have you ever thought about what it takes to build a blog from the ground up? Over the course of six lessons, you will build a blog together with Steve that will be fully functional, online, for anybody to read by the end of the course. 

- Have you ever wondered how a  <a href=""http://en.wikipedia.org/wiki/Wiki"" target=""_blank"">wiki</a> works? As a final project for this course, you will be able to take all of your newly gained knowledge and apply it to build a complete wiki. 

This course concentrates on back-end development, but regardless if you are interested in front-end development, back-end development, or anywhere in between the stack, this course will teach you the fundamental knowledge you need break into the web development world. Are you ready to dive in?",False,"###Lesson 1: How the Web Works (2.5 hours)
In this first lesson, you will learn basic concepts regarding the internet, browsers, HTML, and how all those elements fit together. You’ll start using HTML (HyperText Markup Language) to format content for webpages. Then you’ll get to see the mechanics of how the web works: HyperText Transfer Protocol (HTTP) via GET and POST requests. In the first problem set, you will get a simple website up and running with the Google App Engine platform. 

###Lesson 2: Forms and Input (4 hours)
In this second lesson you will learn about forms, a very common way to obtain input from users. You will learn how to get and process user input from webpages using Google App Engine to get a live form up and running. By the end of this lesson, you will know how to validate user input and securely obtain data from users.


###Lesson 3: Databases (6 hours)
You learned about getting all sorts of information from users in the previous lesson, but what do you do with it once it’s in your hands? You store it! In this third lesson, Steve will dive in and teach you what you need to know about databases, the final piece you need to start setting your blog in motion! You will learn about various database technologies, SQL, and the Google App Engine Datastore.

###Lesson 4: User Accounts and Security (6 hours)
In this fourth lesson, you will learn the fundamentals of authentication and security, which are very relevant topics in almost any web application built today. We’ll start by examining how websites use cookies to authenticate users and how we can manage cookies from the backend of a web application. You will implement a login system for your blog and learn how to use hashing to securely read and transmit user passwords.

###Lesson 5: APIs (4.5 hours)
Up until now, your programs have generated HTML that a browser can use to render a web page for the user. In the digital world, however, applications and websites communicate not only with people, but also with other applications and websites. By the end of this lesson, your blog will communicate with humans as well as with other computers. Your web application can generate data in formats such as XML and JSON that other computers can access through an API, or application programming interface. Those computers, in turn, can build websites or services that interact with your data. You’ll first learn how to use APIs, and then build web applications as services so that other computers can glean data from your application. We will look at both XML and JSON by investigating how to read them, how to interpret them, and how to manipulate them. 

###Lesson 6: Caching (3.5 hours)
In this lesson, we will explore how to prepare your applications to run at a large scale. So far, we've written 'toy' applications for just one or two users. If we want to start writing apps for thousands or, perhaps, even millions of users, then obviously we'll need to think about scaling. When we talk about scaling, this may mean running your application on multiple machines, storing huge amounts of data, or consuming large amounts of bandwidth. In particular, we will learn about caching, including the uses of caching, why you might want to cache, and specific caching implementations such as Memcached. 

###Lesson 7: Scaling Up (2.5 hours)
In this last lesson of the course, Steve has prepared a relaxing, story-time segment. You will hear web development anecdotes from people who have been through it all. You will enjoy interviews with engineer Neil Williams from Reddit, and engineer Chris Chew from Udacity. They will share their experiences on working with web applications, and you will see how all that you’ve learned in this course comes into the big picture.

###Final Project (8 hours)
For the final project, you will build a fully functional wiki - a website that allows any page to be edited. The wiki you will be able to build by the end of the course will feature the following: 

- Easily create new pages of the site by using the wiki edit capabilities. You should be able to enter a non-existent URL, redirect to an edit page, and create a new page from there. 
- Have user accounts so that logged-in users only will have edit privileges. 
- Use caching functionality.
- Have a history section which displays the different wiki versions that have existed.","### When does the course begin?
 
This class is self paced. You can begin whenever you like and then follow your own pace. It’s a good idea to set goals for yourself to make sure you stick with the course.

### How long will the course be available?

 This class will always be available! 

### How do I know if this course is for me?

 Take a look at the “Class Summary,” “What Should I Know,” and “What Will I Learn” sections above. If you want to know more, just enroll in the course and start exploring.

### Can I skip individual videos? What about entire lessons?

 Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you’re confused, you can always go back and watch something that you skipped.

### What are the rules on collaboration?

 Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them. 

### Why are there so many questions?

 Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.

### What should I do while I’m watching the videos?

 Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.",True,3,months,False
cs255,"HTML5 Game Development",https://www.udacity.com/course/html5-game-development--cs255?utm_medium=referral&utm_campaign=api,"Building High Performance Web Apps",intermediate,False,https://lh5.ggpht.com/C-c9-2x5jVtuwhzNRR-RzDnp_5sAHFTaKeySuZYlUZDv0P4GTKCA4wsS_PLuT7MokRAKaZ1o9JmsY2eTUJc0=s0#w=436&h=268,https://lh4.ggpht.com/WJVBXaHIXBSp3RECYt66FI3LHOgxll6b9b-7tCs2roVYTrAQr2qNgiWrODfs__ZydPfCGX_-xNptuPS3FUZ-=s0#w=4680&h=968,https://www.youtube.com/watch?v=F3JeV756B7w,"This course will walk you through the major components of building GRITS, an HTML5 game. We'll talk about how to take standard game development techniques, and use them to create high performance HTML5 applications.","Learn how to build high-performance web games with HTML5. We'll port industry-standard development techniques to the web and use them to create a game.","Knowledge of HTML, Javascript, and how the web works is necessary for this course. There is an optional lesson on the specific parts of Javascript and the DOM that you'll need for this class as a refresher, but this is not an introductory course on Javascript.","At the end of this course, you'll understand how to develop an HTML5 game. 
You will gain familiarity with HTML5 features such as 2D canvas and techniques for improving performance.",False,"### Lesson 0
Optional HTML/Javascript crash course

### Lesson 1
Introduction to Canvas rendering

### Lesson 2
Atlases

### Lesson 3
Map rendering

### Lesson 4
Basic Input, handling events

### Lesson 5
The entity hierarchy

### Lesson 6
Box2D, and using external libraries

### Lesson 7
Adding sound

### Lesson 8
Asynchronous Loading

### Supplementary Materials
![Alt text](https://s3.amazonaws.com/udacity-hosted-downloads/A9781430266976-3d.png)


[Link to download free chapters](http://bit.ly/1i3rk63)","### When does the course begin?
 
This class is self paced. You can begin whenever you like and then follow your own pace. It’s a good idea to set goals for yourself to make sure you stick with the course.

### How long will the course be available?

 This class will always be available! 

### How do I know if this course is for me?

 Take a look at the “Class Summary,” “What Should I Know,” and “What Will I Learn” sections above. If you want to know more, just enroll in the course and start exploring.

### Can I skip individual videos? What about entire lessons?

 Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you’re confused, you can always go back and watch something that you skipped.

### How much does this cost?

 It’s completely free! If you’re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.

### What are the rules on collaboration?

 Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them. 

### Why are there so many questions?

 Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.

### What should I do while I’m watching the videos?

 Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.",False,2,months,False
cs256,"Mobile Web Development",https://www.udacity.com/course/mobile-web-development--cs256?utm_medium=referral&utm_campaign=api,"Building Mobile Web Experiences",intermediate,False,https://lh5.ggpht.com/IKdCmTWn8a2nMhlwMYzryvzRN5CUZAOBr4tDrEAbszV7TIFe9pRAInA4kkYcgTXwrifJsBEsq1agTueuu-g=s0#w=436&h=268,https://lh6.ggpht.com/mtT_3mCOWwToCNi4g-MFR0M8mheMa1b4KndiDk4r5kJvK9LQI73Sv2EEC0x9YCX4SL3Ko5hxIPPPPsoTTCdp=s0#w=4680&h=968,https://www.youtube.com/watch?v=bFmMT2ZDQ8M,"So you’ve heard mobile is kind of a big deal, and you’re not sure how to transform your traditional desktop-focused web apps into fast, effective mobile experiences. This course is designed to teach web developers what they need to know to create great cross-device mobile web experiences. This course will focus on building mobile web apps, which will work across multiple platforms including Android, iOS, and others.","In this course, you'll learn how to build great mobile web experiences. We'll cover performance issues on mobile, and how to make use of mobile sensors.","This course is for experienced front-end web developers who’d like to learn what it takes to create [great](http://www.chrome.com/racer) [mobile](http://sketchpad.io) experiences. In order to succeed in this class, you should be comfortable with HTML, CSS, and Javascript, and should have experience creating web apps, either professionally or for fun. You don't need to know any specific HTML5 extras or APIs, we'll cover any of those that we need as the course progresses.","After completing this class, you’ll have built a web application with a first-class mobile experience. You’ll understand what it takes to build great web experiences on mobile devices, have gained experience with the tools you need to test performance, and be able to apply your knowledge to your own projects in the future.",False,"In this course, you will learn how to build web experiences that adapt to the different screen sizes and capabilities that mobile devices offer, and how to scalably optimize media for mobile and desktop.  We will cover programming touch interaction, as well as how to optimize form field input for mobile devices and use APIs like geolocation and the accelerometer, and ensuring your web experiences work great when network conditions are sub-optimal.  Finally, you’ll gain the tools to investigate performance in mobile applications, with a strong understanding of mobile networking, battery usage patterns and optimizing paint techniques to build smooth animations on mobile.

### Lesson 01: Syllabus
We’ll start with a high-level overview of the course and what to expect in it. We’ll also go into more depth on what we mean by mobile web development, and why you should care about it.

### Lesson 02: Mobile Development Tools
Workflow and tooling is incredibly important for building great web apps, and this carries over to mobile web development. This lesson will show you how to use the Chrome Developer Tools to develop for the mobile web.

### Lesson 03: Mobile UX and Viewport
Designing for the mobile web is all about a smooth user experience. This lesson will get you thinking about how to achieve that on mobile, and we’ll introduce the first of many tools you need to achieve this: the viewport.

### Lesson 04: Fluid Design
Mobile means lots of different devices and form factors. We’ll discuss how to make your site responsive, clean, and user-friendly on multiple devices and layouts.

### Lesson 05: Media Queries
Sometimes different devices call for fundamentally different layouts. This lesson will teach you how to achieve this using media queries.

### Lesson 06: Responsive Images
Media requirements are different in mobile - network constraints and very high resolution screens set up a conflict that can be challenging.  We’ll talk about how best to integrate media into your mobile web applications, and adaptively scaling images based on the environment.

### Lesson 07: Optimizing Performance
Users expect a fast, seamless experience on mobile. We’ll go over optimizing various performance metrics to improve that experience, such as network, cpu, rendering, and battery performance.

### Lesson 08: Touch
Touch input is fundamentally different from mouse input, and requires you to think about your user interactions differently. We’ll go over UX concerns with touch-based interaction, and how to design user interactions that work across devices.

### Lesson 09: Input
Using a keyboard on mobile is awful. We’ll discuss ways to improve it, using semantic input for form data, and other user input options on mobile.

### Lesson 10: Device Access
Mobile devices have a full array of sensors typically unavailable on desktop. We’ll talk about camera access, geolocation, and other sensors and feedback you have access to on mobile.

### Lesson 11: Offline and Storage
It’s an unfortunate reality that mobile users aren’t always online. We’ll go over using the local cache as well as local storage APIs to give your users a great offline (and partially-online) experience as well.

### Lesson 12: Wrap-up
We’ll finish up the class by talking briefly about other topics to consider, such as app experience, monetization, deployment and distribution. We’ll also point you to other resources to look at moving forward in your career.",,True,6,weeks,False
cs258,"Software Testing",https://www.udacity.com/course/software-testing--cs258?utm_medium=referral&utm_campaign=api,"How to Make Software Fail",intermediate,False,https://lh4.ggpht.com/5ikgV5XANy8ChkjUqGy4YG-4MCiREXo-SZ7p7YEFqCqIpmJ34TqTofWjG8Nz6RlxzNmgtDQxAeLeLsbE-8Kh=s0#w=436&h=268,https://lh5.ggpht.com/VOURMePQYZaZ8SG6g6Wp9WqiiWcLGFcaHT4Q7DGjcnEI0ArMb726RzbkZ7jvUwNzNsW2_0QiaqpQep9fYd4=s0#w=4680&h=968,https://www.youtube.com/watch?v=e06Vo9rba3k,"When writing software, destruction can be just as valuable as creation. Learn how to catch bugs and break software as you discover different testing methods that will help you build better software.","Learn how to catch bugs and break software as you discover different testing methods that will help you build better software.","<p>Programming experience is required.</p>","<p>This course will teach you how to think like a software tester, how to find bugs in code earlier, and write better code.</p>",False,"### Lesson 1: Domains, Ranges, Oracles, and Kinds of Testing

How to think about the different elements of software testing

### Lesson 2: Code Coverage

How to find parts of a program that need more testing

### Lesson 3: Random Testing

How to automatically generate test cases that break code in unexpected ways

### Lesson 4: Advanced Random Testing

How to engineer a sophisticated random test case generator

### Lesson 5: Consequences

How to deal with lots of bugs, how to take a big input that triggers a bug and make it smaller, how to report a bug, and more!

### Lesson 6: Conclusion",,False,1,months,False
cs259,"Software Debugging",https://www.udacity.com/course/software-debugging--cs259?utm_medium=referral&utm_campaign=api,"Automating the Boring Tasks",intermediate,False,https://lh5.ggpht.com/K8Fm7x8PB9bmLOscL4Mt-wTyFU0y2NF1B06wGOrgXDkEfcoNb4KXPJp9IXaB06MctgT06VOn7d1Y6_EyUxs=s0#w=436&h=268,https://lh6.ggpht.com/nMdcBp-dUbKYNytkhi9yl1OApp6Ig4zDjC1pjPAyIw_PVegaXF9-9kHIvE_qGQULE4ZKg3N77viBmvhJqKk=s0#w=1170&h=422,https://www.youtube.com/watch?v=pklED4UfODg,"In this class you will learn how to debug programs systematically, how to automate the debugging process and build several automated debugging tools in Python.","In this course you will learn how to debug programs systematically using scientific methods and build several automated debugging tools in Python.","Basic knowledge of programming and Python at the level of Udacity CS101 or better is required. Basic understanding of Object-oriented programming is helpful.","At the end of this course you will have a solid understanding about systematic debugging, will know how to automate debugging and will have built several functional debugging tools in Python.",False,"### Lesson 1: How Debuggers work

Theory: Scientific method and its application to debugging.  
Fun fact: First bug in the history of computer science.  
Practice: Building a simple tracer.

### Lesson 2: Asserting Expectations

Theory: Assertions in testing and in debugging.  
Fun fact: The most expensive bug in history.  
Practice: Improving the tracer.

### Lesson 3: Simplifying Failures

Theory: Strategy of simplifying failures. Binary search. Delta debugging principle.  
Fun fact: Mozilla bugathon.  
Practice: Building a delta debugger.

### Lesson 4: Tracking Origins

Theory: Cause-effect chain. Deduction. Dependencies. Slices.  
Fun fact: Sherlock Holmes and Doctor Watson.  
Practice: Improving the delta debugger.

### Lesson 5: Reproducing Failures

Theory: Types of bugs (Bohr bug, Heisenbug, Mandelbug, Schrodinbug). Systematic reproduction process.  
Fun fact: Mad laptop bug.  
Practice: Building a statistic debugging tool.

### Lesson 6: Learning from Mistakes

Theory: Bug database management. Classifying bugs. Bug maps. Learning from mistakes.   
Fun fact: Programmer with the most buggy code.  
Practice: Improving your tools and practicing on a real world bug database.","### When does the course begin?
 
This class is self paced. You can begin whenever you like and then follow your own pace. It’s a good idea to set goals for yourself to make sure you stick with the course.

### How long will the course be available?

 This class will always be available! 

### How do I know if this course is for me?

 Take a look at the “Class Summary,” “What Should I Know,” and “What Will I Learn” sections above. If you want to know more, just enroll in the course and start exploring.

### Can I skip individual videos? What about entire lessons?

 Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you’re confused, you can always go back and watch something that you skipped.

### How much does this cost?

 It’s completely free! If you’re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.

### What are the rules on collaboration?

 Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them. 

### Why are there so many questions?

 Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.

### What should I do while I’m watching the videos?

 Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.",True,2,months,False
cs262,"Programming Languages",https://www.udacity.com/course/programming-languages--cs262?utm_medium=referral&utm_campaign=api,"Building a Web Browser",intermediate,False,https://lh4.ggpht.com/TPffw_nig2w-w-ibEys-6iIZqJUXv3ceWraNtZAEY-kFz8XMUh_jqi7sOiuJLeJ0N-NCyFTMjwpLOUIQOwk=s0#w=436&h=268,https://lh3.ggpht.com/3RmrqNzJD_BW6P5Z5MolpaZ7TvkdDMT5AcOXe3WucBuz3RZKStiQeZcnjDs0oWSvcqAb9zDBGydEz1BwJOZ4=s0#w=4680&h=968,https://www.youtube.com/watch?v=cn83Tm1jNSo,"This class will give you an introduction to the fundamentals of programming languages. Key concepts include how to specify and process valid strings, sentences and program structures. ","This course is an introduction to the fundamentals of programming languages. Concepts include how to specify and process valid strings, sentences and program structures.","This course assumes previous programming experience, comparable to what is covered by the Udacity CS101 course.","Take this class and learn how to build your own simple web browser complete with the ability to parse and understand HTML and JavaScript.",False,"### String Patterns

Finding and specifying classes of strings using regular expressions
    
### Lexical Analysis

Breaking strings down into important words
    
### Grammars

Specifying and deconstructing valid sentences
    
### Parsing

Turning sentences into trees
    
### Interpreting

Simulating programs
    
### Building a Web Browser

Interpreting HTML and JavaScript
    
### Wrap-up

Exam testing your knowledge","### When does the course begin?
 
This class is self paced. You can begin whenever you like and then follow your own pace. It’s a good idea to set goals for yourself to make sure you stick with the course.

### How long will the course be available?

 This class will always be available! 

### How do I know if this course is for me?

 Take a look at the “Class Summary,” “What Should I Know,” and “What Will I Learn” sections above. If you want to know more, just enroll in the course and start exploring.

### Can I skip individual videos? What about entire lessons?

 Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you’re confused, you can always go back and watch something that you skipped.

### How much does this cost?

 It’s completely free! If you’re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.

### What are the rules on collaboration?

 Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them. 

### Why are there so many questions?

 Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.

### What should I do while I’m watching the videos?

 Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.",True,2,months,False
cs271,"Intro to Artificial Intelligence",https://www.udacity.com/course/intro-to-artificial-intelligence--cs271?utm_medium=referral&utm_campaign=api,"Learn the Fundamentals of AI",intermediate,False,https://lh3.ggpht.com/DlphLMafw8ni4x7O98V2LyrnKDxsFJpEuuC-kuLyGbYHLYmdwnpu490a8isnp6j_vh-Y_sKCX8N_NUi1wM8=s0#w=436&h=268,https://lh4.ggpht.com/4LdIV9ZQk3F0DfxNa1pBqEH4gKlIk0mhVr_sIZ0XsQOOWcVDb75lKIiNsUrMPcztUitqStBimMkw4-T8Qr8=s0#w=4680&h=968,https://www.youtube.com/watch?v=VfnXzwduq6U,"Artificial Intelligence (AI) is a field that has a long history but is still constantly and actively growing and changing. In this course, you’ll learn the basics of modern AI as well as some of the representative applications of AI. Along the way, we also hope to excite you about the numerous applications and huge possibilities in the field of AI, which continues to expand human capability beyond our imagination.

***Note: Parts of this course are featured in the <a href=""https://www.udacity.com/course/machine-learning-engineer-nanodegree--nd009"">Machine Learning Engineer Nanodegree</a> and the <a href=""https://www.udacity.com/course/data-analyst-nanodegree--nd002"">Data Analyst Nanodegree</a> programs. If you are interested in AI, be sure to check out those programs as well!***","This course will introduce you to the basics of AI. Topics include machine learning, probabilistic reasoning, robotics, computer vision, and natural language processing.","Some of the topics in Introduction to Artificial Intelligence will build on probability theory and linear algebra. You should have understanding of probability theory comparable to that covered in our <a href=""https://www.udacity.com/course/st101"">Intro to Statistics</a> course.","Artificial Intelligence (AI) technology is increasingly prevalent in our everyday lives. It has uses in a variety of industries from gaming, journalism/media, to finance, as well as in the state-of-the-art research fields from robotics, medical diagnosis, and quantum science. In this course you’ll learn the basics and applications of AI, including: machine learning, probabilistic reasoning, robotics, computer vision, and natural language processing.",False,"### Part I: Fundamentals of AI  
- Overview of AI
- Statistics, Uncertainty, and Bayes networks
- Machine Learning
- Logic and Planning
- Markov Decision Processes and Reinforcement Learning
- Hidden Markov Models and Filters
- Adversarial and Advanced Planning

### Part II: Applications of AI  
- Image Processing and Computer Vision
- Robotics and robot motion planning
- Natural Language Processing and Information Retrieval","### When does the course begin?
 
This class is self paced. You can begin whenever you like and then follow your own pace. It’s a good idea to set goals for yourself to make sure you stick with the course.

### How long will the course be available?

 This class will always be available! 

### How do I know if this course is for me?

 Take a look at the “Class Summary,” “What Should I Know,” and “What Will I Learn” sections above. If you want to know more, just enroll in the course and start exploring.

### Can I skip individual videos? What about entire lessons?

 Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you’re confused, you can always go back and watch something that you skipped.

### How much does this cost?

 It’s completely free! If you’re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.

### What are the rules on collaboration?

 Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them. 

### Why are there so many questions?

 Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.

### What should I do while I’m watching the videos?

 Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.",True,4,months,False
cs291,"Interactive 3D Graphics",https://www.udacity.com/course/interactive-3d-graphics--cs291?utm_medium=referral&utm_campaign=api,"Creating Virtual Worlds",intermediate,False,https://lh6.ggpht.com/bhgSqT5HG44uWr9Yiz7dD8OKlAKPBuKIAhOCNP5Er0O3bBQrWVaiFQycsILakHPQ3XLltvqVDcN3FOSVkdk=s0#w=436&h=268,https://lh4.ggpht.com/XKw2aUbKzNpO1pN_zRaSEnZi0DY8SrDCfqN__N78cUZnIWaUzGKEUNteLORfoYhjJffxJC_o7QzWyzDAug=s0#w=4680&h=968,https://www.youtube.com/watch?v=Vl0hmKg1pVw,"This class will teach you about the basic principles of 3D computer graphics: meshes, transforms, cameras, materials, lighting, and animation.","This course will teach you the principles of 3D computer graphics: meshes, transforms, lighting, animation, and making interactive 3D applications run in a browser.","**Knowing how to program in some language is all you’ll need to get started**. Some knowledge of JavaScript is useful later on if you wish to make your projects more interactive and engaging. Familiarity with vectors and matrices will ease your way but is not critical.

To be able to see the interactive demos and do programming assignments you need a browser that supports **WebGL** technology. An up to date version of Chrome or Firefox will work (see our [FAQ](https://www.udacity.com/tech-requirements) for more information). You can test if your browser supports this technology by visiting the [WebGL project homepage](http://get.webgl.org). 

Almost all programming will be done in JavaScript using [three.js library/API](http://en.wikipedia.org/wiki/Threejs).


<br>
**About Autodesk**

*This course is developed in conjunction with Autodesk, a worldwide leader in 3D design, engineering, and entertainment software.  <a href=""http://www.autodesk.com"" target=""_blank"">http://www.autodesk.com</a>*","By the end of this class you will know enough to make an animated 3D demo program that runs in a web browser, while also understanding the basic principles of how realistic computer images are generated.

You will also have a portfolio of small interactive programs that run in any web browser that supports WebGL.",False,"### Lesson 1: Introduction

Motivation and a trip down the graphics pipeline, laying out the fundamental processes

### Lesson 2: Points, Vectors, and Meshes

The basics of 3D geometry definition

### Lesson 3: Colors and Materials

Color representation, material computations, transparency

### Lesson 4: Transforms

Translation, scale, rotate and how to properly combine all these

### Lesson 5: Matrices

Transform representation and how to fully control these

### Lesson 6: Lights

Directional and point light sources

### Lesson 7: Cameras

How the camera is defined

### Lesson 8: Textures and Reflections

Color and opacity textures, along with reflection and normal mapping

### Lesson 9: Shader Programming

An introduction to programming vertex and pixel shaders

### Lesson 10: Interaction and Animation

How to select and make objects move","### When does the course begin?
 
This class is self paced. You can begin whenever you like and then follow your own pace. It’s a good idea to set goals for yourself to make sure you stick with the course.

### How long will the course be available?

 This class will always be available! 

### How do I know if this course is for me?

 Take a look at the “Class Summary,” “What Should I Know,” and “What Will I Learn” sections above. If you want to know more, just enroll in the course and start exploring.

### Can I skip individual videos? What about entire lessons?

 Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you’re confused, you can always go back and watch something that you skipped.

### How much does this cost?

 It’s completely free! If you’re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.

### What are the rules on collaboration?

 Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them. 

### Why are there so many questions?

 Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.

### What should I do while I’m watching the videos?

 Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.",True,2,months,False
cs313,"Intro to Theoretical Computer Science",https://www.udacity.com/course/intro-to-theoretical-computer-science--cs313?utm_medium=referral&utm_campaign=api,"Dealing with Challenging Problems",intermediate,False,https://lh5.ggpht.com/vb0Pb3pzliCuiVgmwpE0JI9Ktgzmf4x-7AY4t6N7Uqvdw720eadz8Vwhx_47L8ZQet_rE9Ghce8Z-aOGLGU=s0#w=436&h=268,https://lh3.ggpht.com/Y68B-xZgBJ02ciLVeNVPR_fsUYYuUaQY7-0cA6T3r2Ecx-Yd--14Hdh5728YroN2cozZfbWRczOXOJgJk3g=s0#w=1170&h=422,https://www.youtube.com/watch?v=AZ9B1kTW5FA,"This class teaches you about basic concepts in theoretical computer science -- such as NP-completeness -- and what they imply for solving tough algorithmic problems.","Learn the basic concepts in theoretical computer science. Discover what they imply for solving tough computational challenges.","<p>You should have a basic understanding of algorithms (such as <a href=""https://www.udacity.com/course/cs215"">CS215</a>) and programming (such as <a href=""https://www.udacity.com/course/cs101"">CS101</a>). No prior knowledge about theoretical computer science required!</p>","<p>At the end of this course, you will have a solid understanding of theoretical computer science. This will not only allow you to recognize some of the most challenging algorithmic problems out there, but also give you powerful tools to deal with them in practice.</p>",False,"### Lesson 1: Challenging Problems

An introduction to tough problems and their analysis

### Lesson 2: Understanding Hardness

What we mean when a problem is “hard” and the concept of NP-completeness

### Lesson 3: Showing Hardness

Tools to let you recognize and prove that a problem is hard

### Lesson 4: Intelligent Force

Smart techniques to solve problems that should – theoretically – be impossible to solve

### Lesson 5: Sloppy Solutions

Gaining speed by accepting approximate solutions

### Lesson 6: Poking Around

Why randomness can be of help – sometimes. An introduction to complexity classes.

### Lesson 7: Ultimate Limits

Problems that no computer can ever solve. In theory.","### When does the course begin?
 
This class is self paced. You can begin whenever you like and then follow your own pace. It’s a good idea to set goals for yourself to make sure you stick with the course.

### How long will the course be available?

 This class will always be available! 

### How do I know if this course is for me?

 Take a look at the “Class Summary,” “What Should I Know,” and “What Will I Learn” sections above. If you want to know more, just enroll in the course and start exploring.

### Can I skip individual videos? What about entire lessons?

 Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you’re confused, you can always go back and watch something that you skipped.

### How much does this cost?

 It’s completely free! If you’re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.

### What are the rules on collaboration?

 Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them. 

### Why are there so many questions?

 Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.

### What should I do while I’m watching the videos?

 Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.",False,2,months,False
cs344,"Intro to Parallel Programming",https://www.udacity.com/course/intro-to-parallel-programming--cs344?utm_medium=referral&utm_campaign=api,"Using CUDA to Harness the Power of GPUs",advanced,False,https://lh5.ggpht.com/lkq5D-G-UMgnK574HjI50bKwklgwoSqb37YRFYQnh6jQFravvrDPpxYUFbQFeJRkGLs-TkEBLF43omuUEfw=s0#w=436&h=268,https://lh4.ggpht.com/kjZiTQC-NBbbia18Obt4avt34hXd2Hce3nrEmj441ZDWk2p78LxXu95mxxcGNDqR0aVo86zlWpFPd2SvcKVI=s0#w=4680&h=968,https://www.youtube.com/watch?v=zb49vDrOxgA,"Learn the fundamentals of parallel computing with the GPU and the CUDA programming environment! In this class, you'll learn about parallel programming by coding a series of image processing algorithms, such as you might find in Photoshop or Instagram. You'll be able to program and run your assignments on high-end GPUs, even if you don't own one yourself.  

**Why It’s Important to Think Parallel**  

[Third Pillar of Science][1]  
Learn how scientific discovery can be accelerated by combining theory and experimentation with computing to fight cancer, prevent heart attacks, and spur new advances in robotic surgery.

[1]: http://www.youtube.com/watch?v=3DbAB2ChDBw","Learn the fundamentals of parallel computing with the GPU and the CUDA programming environment by coding a series of image processing algorithms. #filters, #cuda.","We expect students to have a solid experience with the C programming language and basic knowledge of data structures and algorithms.","You'll master the fundamentals of massively parallel computing by using CUDA C/C++ to program modern GPUs. You'll learn the GPU programming model and architecture, key algorithms and parallel programming patterns, and optimization techniques. Your assignments will illustrate these concepts through image processing applications, but this is a parallel computing course and what you learn will translate to any application domain. Most of all we hope you'll learn how to think in parallel.",False,"### Lesson 1: GPU Programming Model

Project 1: Greyscale Conversion (for that classy touch!)

### Lesson 2: GPU Hardware and Parallel Communication

Project 2: Smart Blurring (miracle product for removing wrinkles!)

### Lesson 3: Fundamental Parallel Algorithms

Project 3: HDR Tonemapping (when 1000:1 contrast is not enough!)

### Lesson 4: Using Sort and Scan

Project 4: Red Eye Removal (soothing relief for bright red eyes)

### Lesson 5: Optimizing GPU Programs

Project 5: Accelerating Histograms (when fast isn't fast enough)

### Lesson 6: Parallel Computing Patterns

Project 6: Seamless Image Compositing (polar bear in the swimming pool)

### Lesson 7: The Frontiers and Future of GPU Computing","### When does the course begin?
 
This class is self paced. You can begin whenever you like and then follow your own pace. It’s a good idea to set goals for yourself to make sure you stick with the course.

### How long will the course be available?

 This class will always be available! 

### How do I know if this course is for me?

 Take a look at the “Class Summary,” “What Should I Know,” and “What Will I Learn” sections above. If you want to know more, just enroll in the course and start exploring.

### Can I skip individual videos? What about entire lessons?

 Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you’re confused, you can always go back and watch something that you skipped.

### How much does this cost?

 It’s completely free! If you’re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.

### What are the rules on collaboration?

 Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them. 

### Why are there so many questions?

 Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.

### What should I do while I’m watching the videos?

 Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.",True,3,months,False
cs373,"Artificial Intelligence for Robotics",https://www.udacity.com/course/artificial-intelligence-for-robotics--cs373?utm_medium=referral&utm_campaign=api,"Programming a Robotic Car",advanced,False,https://lh4.ggpht.com/dTaG60Lui_XeUUEDkZsIp7-RP7g6SLNWyHG9bbaZG2yDp24Mnc6R2tjzME5WNLlJdi6IJQM-YCwO_gEzug=s0#w=436&h=268,https://lh4.ggpht.com/gf28Wow_JdX5nEBm_6pPA8rjUPOr6vugMIbWnJx5gvj2PsyovjZR1kc4Kgxc8MEtOLfJhTANFdmrZg3AqQ=s0#w=4680&h=968,https://www.youtube.com/watch?v=g-fk3RQiw5Q,"Learn how to program all the major systems of a robotic car from the leader of Google and Stanford's autonomous driving teams. This class will teach you basic methods in Artificial Intelligence, including: probabilistic inference, planning and search, localization, tracking and control, all with a focus on robotics. Extensive programming examples and assignments will apply these methods in the context of building self-driving cars.

This course is offered as part of the Georgia Tech Masters in Computer Science. The updated course includes a final project, where you must chase a runaway robot that is trying to escape!","Learn how to program all the major systems of a robotic car. Topics include planning, search, localization, tracking, and control.","Success in this course requires some programming experience and some mathematical fluency. 

Programming in this course is done in Python. We will use some basic object-oriented concepts to model robot motion and perception. If you don’t know Python but have experience with another language, you should be able to pick up the syntax fairly quickly. If you have no programming experience, you should consider taking Udacity’s <a href=""https://www.udacity.com/course/cs101"" target=""_blank"">Introduction to Computer Science</a> course before attempting this one.

The math used will be centered on probability and linear algebra. You don’t need to be an expert in either, but some familiarity with concepts in probability (e.g. probabilities must add to one, conditional probability, and Bayes’ rule) will be extremely helpful. It is possible to learn these concepts during the course, but it will take more work. Knowledge of linear algebra, while helpful, is not required.","This course will teach you probabilistic inference, planning and search, localization, tracking and control, all with a focus on robotics.

At the end of the course, you will leverage what you learned by solving the problem of a runaway robot that you must chase and hunt down!",False,"### Lesson 1: Localization 

-	Localization
-	Total Probability
-	Uniform Distribution
-	Probability After Sense
-	Normalize Distribution
-	Phit and Pmiss
-	Sum of Probabilities
-	Sense Function
-	Exact Motion
-	Move Function
-	Bayes Rule
-	Theorem of Total Probability

### Lesson 2: Kalman Filters

-	Gaussian Intro
-	Variance Comparison
-	Maximize Gaussian
-	Measurement and Motion
-	Parameter Update
-	New Mean Variance
-	Gaussian Motion
-	Kalman Filter Code
-	Kalman Prediction
-	Kalman Filter Design
-	Kalman Matrices

### Lesson 3: Particle Filters

-	Slate Space
-	Belief Modality
-	Particle Filters
-	Using Robot Class
-	Robot World
-	Robot Particles

### Lesson 4: Search

-	Motion Planning
-	Compute Cost
-	Optimal Path
-	First Search Program
-	Expansion Grid
-	Dynamic Programming
-	Computing Value
-	Optimal Policy

### Lesson 5: PID Control

-	Robot Motion
-	Smoothing Algorithm
-	Path Smoothing
-	Zero Data Weight
-	Pid Control
-	Proportional Control
-	Implement P Controller
-	Oscillations
-	Pd Controller
-	Systematic Bias
-	Pid Implementation
-	Parameter Optimization

### Lesson 6: SLAM (Simultaneous Localization and Mapping)

-	Localization
-	Planning
-	Segmented Ste
-	Fun with Parameters
-	SLAM
-	Graph SLAM
-	Implementing Constraints
-	Adding Landmarks
-	Matrix Modification
-	Untouched Fields
-	Landmark Position
-	Confident Measurements
-	Implementing SLAM

### Runaway Robot Final Project",,True,2,months,False
cs387,"Applied Cryptography",https://www.udacity.com/course/applied-cryptography--cs387?utm_medium=referral&utm_campaign=api,"Science of Secrets",advanced,False,https://lh4.ggpht.com/5VkY7VUpL3oGc1MTj01krvUZfEXbR_OGt07C_WQAq84m-q8aAMcFWgmmyeotMR0IfCordz07ffCA1T6YXgbp=s0#w=436&h=268,https://lh6.ggpht.com/174Pycf1xsgQw8LFqOJs0t4wMcUSZ_KYbQpL1hhtsVIRRMJqC9K3biUSFjjGpz-qyhRhK8yotUGLeJdYIWY=s0#w=4680&h=968,https://www.youtube.com/watch?v=HlNDXiVnhqI,"Cryptography is present in everyday life, from paying with a credit card to using the telephone. Learn all about making and breaking puzzles in computing.","Cryptography is present in everyday life, from paying with a credit card to using the telephone.  Learn all about making and breaking puzzles in computing.","This course assumes previous programming experience, comparable to what is covered by the Udacity CS101 course, as well as some understanding of probability and theory of computation and algorithm analysis.","Explore how secrets are written and shared, as well as what can go wrong when cryptography is misused or implemented badly.",False,"### Lesson 1: Perfect Ciphers

What makes certain ciphers perfect, how the Lorenz Cipher was broken

### Lesson 2: Symmetric Encryption

Sending messages when two people share a secret

### Lesson 3: Key Exchange

Techniques to establish a shared secret

### Lesson 4: Asymmetric Encryption

Exchanging information using public key cryptosystems

### Lesson 5: Public Key Protocols

Encrypted key exchange, certificates, secure commerce

### Lesson 6: Using Cryptographic Primitives

How cryptography can be useful for anonymizing communication, voting, and digital cash

### Lesson 7: Secure Computation

Computing without exposing data","### When does the course begin?
 
This class is self paced. You can begin whenever you like and then follow your own pace. It’s a good idea to set goals for yourself to make sure you stick with the course.

### How long will the course be available?

 This class will always be available! 

### How do I know if this course is for me?

 Take a look at the “Class Summary,” “What Should I Know,” and “What Will I Learn” sections above. If you want to know more, just enroll in the course and start exploring.

### Can I skip individual videos? What about entire lessons?

 Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you’re confused, you can always go back and watch something that you skipped.

### How much does this cost?

 It’s completely free! If you’re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.

### What are the rules on collaboration?

 Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them. 

### Why are there so many questions?

 Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.

### What should I do while I’m watching the videos?

 Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.",True,2,months,False
design101,"Intro to the Design of Everyday Things",https://www.udacity.com/course/intro-to-the-design-of-everyday-things--design101?utm_medium=referral&utm_campaign=api,"Principles of Design",beginner,True,https://lh3.ggpht.com/DbM6XZ7d1YBNVsdieedaRqEjGrJWNgwKFss7yIqNGDZpnd6O6YbJH1FcIb6SgGdGf3VGm85itUNyMi7-Jy0=s0#w=436&h=268,https://lh6.ggpht.com/Qn26jiZ9r-90AoLyhVvqYKAqY7dhglB9UOhOVxZCU8APmC4Wa1mZbTLP5sIj202aubiAj0TuKV4sDI9KYgM=s0#w=4680&h=968,,"Everyone designs. Design occurs anytime you deliberately change an environment to make things better. When you decide what seat to take in an auditorium you’re designing your experience. When you rearrange the furniture in a room or draft an email, you’re designing. 

This course provides a summary of key concepts from the first two chapters of <a href=""http://www.amazon.com/gp/product/0465050654/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0465050654&linkCode=as2&tag=udacity-20"">The Design of Everyday Things</a>  (Revised and Expanded Edition, November 2013) by Don Norman. It’s intended to be enjoyable and informative for anyone curious about design: everyday people, technical people, designers, and non-designers alike.","This course will provide you with the insight to start recognizing the role of design in today’s world, and to start making better design decisions in your own life.","There are no prerequisites for the course; it’s for anyone curious about basic design principles.","This course will provide you with the knowledge needed to start recognizing the role of design in today’s world, and to start making better design decisions in your own life. In addition to learning basic design concepts such as affordances and signifiers, you will also gain practice in observing and applying design principles.",False,"Lesson 1: Affordances and Signifiers (4 hours)

Lesson 2: Conceptual Models and the System Image (4 hours)

Lesson 3: Gulfs of Evaluation and Execution (1 hour)

Final Project: Design the User Interface (UI) for a Timebank (7 hours) 

*The times include watching instructional videos, completing the course exercises, and finishing projects. In total, this course should take an average of 16 hours.",,True,2,weeks,False
ep245,"How to Build a Startup",https://www.udacity.com/course/how-to-build-a-startup--ep245?utm_medium=referral&utm_campaign=api,"The Lean LaunchPad",intermediate,True,https://lh6.ggpht.com/l0tJ09Lye8eNFttGQ7uvMGV-x0qxJk9xgs6e-MNRxnJeaCBxVqbYLIKmR13dk6hVdO8S5VYcmswfkBQR65s=s0#w=436&h=268,https://lh5.ggpht.com/yBfepukFU1WHN7ThTcRDeF1mh5kCZztJXbMiKWDl-UswsK907gPuls-WTB4QDksQ2D_kLuLzHQ6flmH_1A=s0#w=4680&h=968,https://www.youtube.com/watch?v=VZvgj6B2JZs,"In an introduction to the basics of the famous Customer Development Process, Steve Blank provides insight into the key steps needed to build a successful startup. 

The main idea in this course is learning how to rapidly develop and test ideas by gathering massive amounts of customer and marketplace feedback. Many startups fail by not validating their ideas early on with real-life customers. In order to mitigate that, students will learn how to get out of the building and search for the real pain points and unmet needs of customers. Only with these can the entrepreneur find a proper solution and establish a suitable business model.

Building a startup is not simply building an execution plan for a business model that the entrepreneur thinks will work, but rather, a search for the actual business model itself.","Learn what it takes to build a successful startup using the Customer Development process, where entrepreneurs ""get out of the building"" to gather and iterate on feedback.","This class involves no programming. The characteristics of a budding entrepreneur: passion, tenacity, and a willingness to work hard, are essential. 

We also recommend you join the class with at least a rough idea of a business model for a startup you would like to work on throughout this class.","You will learn the business skills it takes to bring your idea from conception to market. These include:

- Actively listening and engaging your customers to find out what exactly they want in your product and how you should deliver it to them

- Gathering, evaluating and using customer feedback to make your product, marketing, and business model stronger

- Engaging your customers through the three phases of the customer relationship management lifecycle: get, keep, and grow 

- Identifying key resources, partners, activities, and distribution channels required to deliver your product to your customer

- Calculating your direct and indirect costs for delivering your product",False,"### Lesson 1: What We Now Know

- History of the Corporation
- Startups Are Not Smaller Versions of Large Companies
- Waterfall Development
- Customer vs. Product Development
- Entrepreneurial Education

### Lessons 1.5A and 1.5B: Business Models and Customer Development

- Value Proposition 
- Customer Segments
- Revenue Streams
- Key Resources
- Customer Development Processes 
- Minimum Viable Product
- Market Opportunity Analysis


### Lesson 2: Value Proposition

- Value Proposition and the Minimum Viable Product
- Customer Archetype 
- MVP Physical && Web/Mobile
- Common Mistakes With Value Proposition

### Lesson 3: Customer Segments

- Product Market Fit
- Rank and Day in the Life
- Multiple Customer Segments
- Market Types Introduction: Existing, Resegmented, New, Clone 
- Consequences of Not Understanding a Market

### Lesson 4: Channels

- Distribution Channels Overview
- Web Distribution 
- Physical Distribution
- Direct Channel Fit
- Indirect Channel Economics
- OEM Channel Economics

### Lesson 5: Customer Relationships

- Paid Demand Creation
- Earned Demand Creation
- Get Physical
- Viral Loop
- Web Customer Acquisition Costs

### Lesson 6: Revenue Models

- How Do You Make Money
- Revenue Streams and Price
- Direct and Ancillary Models
- Common Startup Mistakes
- Market Types and Pricing
- Single and Multiple Side Markets
- Revenue First Companies
- Market Size and Share

### Lesson 7: Partners

- Partner Definition
- Partner Resources
- Partner Types
- Greatest Strategic Alliance
- Joint Business Development

### Lesson 8: Resources, Activities and Costs

- Four Critical Resources
- Financial Resources
- Human Resources
- Qualified Employees and Culture
- Intellectual Property Overview","### When does the course begin?
 
This class is self paced. You can begin whenever you like and then follow your own pace. It’s a good idea to set goals for yourself to make sure you stick with the course.

### How long will the course be available?

 This class will always be available! 

### How do I know if this course is for me?

 Take a look at the “Class Summary,” “What Should I Know,” and “What Will I Learn” sections above. If you want to know more, just enroll in the course and start exploring.

### Can I skip individual videos? What about entire lessons?

 Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you’re confused, you can always go back and watch something that you skipped.

### What are the rules on collaboration?

 Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them. 

### Why are there so many questions?

 Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.

### What should I do while I’m watching the videos?

 Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.",True,1,months,False
gt101,"OMSCS Student Orientation",https://www.udacity.com/course/omscs-student-orientation--gt101?utm_medium=referral&utm_campaign=api,,beginner,False,https://lh3.googleusercontent.com/Z306sFML2loGn_bqSYe2-7ZeZn1f2MCA7lXvddO_c9qmX1Xxm1fx8PaNm5dDzfvyE6mHEEm-gqq4Bw_3NA=s0#w=1430&h=770,,,"This is an OMSCS orientation course for all Georgia Tech OMS students.","In this OMS Orientation, we cover several things you will need to know to be a successful OMS student.",,"In this OMS Orientation, we cover several things you will need to know to be a successful OMS student. 

Things we cover:
- How you’ll register for classes.
- Various tools you’ll use during your Masters education for submitting assignments, participating in forum discussions, and interacting with your professors and peers.
- Tips and secrets to success in the OMS.",False,"### Welcome 
Welcome messages from Dr. David Joyner and Eboni Bell

### Oscar & Registration  
Accessing Oscar, Time Tickets & holds, Classing (finding, adding, dropping) waitlists, and grades

### T-square
Accessing T-square, settings and tools, assessments (assignments, quizzes and tests) and grade book, and links (Piazza and Udacity)

### Udacity
Accessing course materials, courses, form exercises, and programming exercises

### Piazza
Getting started, profile, reading lists and topics, navigation, and posting

### Other tools
Passport, ProctorTrack, Google+, Peer Feedback, Webex, and other resources

### Tips
Courses, community, and welcome!",,False,0,,False
ma004,"Intro Algebra Review",https://www.udacity.com/course/intro-algebra-review--ma004?utm_medium=referral&utm_campaign=api,"A Quick Refresher",beginner,False,https://lh6.ggpht.com/6x6Voubq_rHHA3etDwFYP_44ZvSrY-gEb3V6iYmLoF2YDGAH18vm-anCt_UrYH-PCer0OCQKIC8w6_mVuLo=s0#w=436&h=268,https://lh6.ggpht.com/2GvPe2yH9IeLTB0r73J5qPjXl2Ik_vuh3ywuMKSkRQf8IfI2LNAZRHg4B-sbGKxHGwsIHexYZ7nNpDxUL_4=s0#w=4680&h=968,https://www.youtube.com/watch?v=FmoieXyYaVE,"This course provides a brief review of introductory algebra topics. Topics to be covered include integer operations, order of operations, perimeter and area, fractions and decimals, scientific notation, ratios and rates, conversions, percents, algebraic expressions, linear equations, the Pythagorean theorem, and graphing.","A brief review of introductory algebra topics including integer operations, scientific notation, algebraic expressions, linear equations, and graphing.","This is a review course, it is expected that students will have some previous knowledge of most topics covered in the course.

<br>
<br>
Made possible through a grant from the Bill and Melinda Gates Foundation.","At the end of this course students will have reviewed the core topics of introductory algebra. Students will be comfortable with the concepts and procedures of introductory algebra, and be able to apply their knowledge to other coursework and real-world problems.

During this course, you will review 

Integer operations including addition, subtraction, multiplication, division, and absolute value.
Evaluating using order of operations.
Associative and Commutative properties.
Perimeter and area of rectangles, triangles, squares, and circles.
Fraction operations including simplifying, adding, subtracting, multiplying, and dividing.
Converting between fractions, decimals, and percents.
Rounding decimals to appropriate place value.
Converting between standard notation and scientific notation.
Rates and ratios.
Unit conversions.
Simplifying and evaluating algebraic expressions.
Using the Pythagorean Theorem.
Solving and graphing linear equations.
Writing linear equations.",False,"Topic 1: Integer Operations

- Properties of Integers
- Absolute Value
- Adding, Subtracting, Multiplying & Dividing
- Order of Operations
- Perimeter and Area of Rectangles, Squares & Triangles

Topic 2: Fractions and Decimals

- Simplifying Fractions
- Mathematical Operations with Fractions
- Rounding Decimals
- Decimals and Applications
- Fraction to Decimal Conversion
- Scientific Notation

Topic 3: Rates, Ratios, and Conversions

- Ratios
- Rates
- Unit Conversions
- Percents

Topic 4: Algebraic Expressions and Equations

- Algebraic Expressions
- Solving a Linear Equation
- Pythagorean Theorem

Topic 5: Graphing Linear Equations

- Graphing a Linear Equation
- Slope of a Line
- Writing a Linear Equation
- Slope and Slope-Intercept Form",,False,2,months,False
ma006,"Visualizing Algebra",https://www.udacity.com/course/visualizing-algebra--ma006?utm_medium=referral&utm_campaign=api,"Patterns and Problems",beginner,False,https://lh3.ggpht.com/rn3G8eo7AcAany1s2pLJZLZhwzoPGRocmxcMxMaT-nng8SA2-Md544lS0aVNeGFYmDbQbVEXWF-I9fAfevM=s0#w=436&h=268,https://lh5.ggpht.com/xwnm0fDCJAr08hEZ2n-dd-Tbs0ixP4DNQZ7qgT_1xoYbdm1JsIs_BfBPfwgJ2NvG_yyDsY56_OKrxch6gqo=s0#w=4680&h=968,https://www.youtube.com/watch?v=JDlu4CM9bDg,"Throughout this course, we will use algebra to quantify and describe the world around us. Have you ever wondered how many songs can fit onto your flash drive? By the end of the course, you’ll have stronger skills for modeling problems, analyzing patterns, and using algebra to arrive at conclusions.","Learn the basics of Algebra through intuition and problem solving! From fractions to factors to functions, we’ll cover a breadth of topics.","<p>
Almost nothing! Students should know their multiplication tables (1-12) and be proficient with adding and subtracting integers (for example, -7 - 16). A pencil and paper will be a student’s best aid rather than a calculator. 
</p>","<p>Understand and develop the language, models, and tools for math reasoning.
</p>
<p>
Reason with numbers and units to solve problems.
</p>
<p>
Identify, analyze, extend, and create patterns and functions.
</p>
<p>
Make connections about relations and functions through multiple representations: graphs, charts, tables, equations.
</p>
<p>
Apply mathematical reasoning and logic to solve equations and write equivalent forms.
</p>",False,"Unit 1 - Review of Foundations 

Unit 2 - Equations and Inequalities 

Unit 3 - Graphs of Linear Equations 

Unit 4 - Systems of Equations 

Unit 5 - Exponents and Polynomials 

Unit 6 - Factoring 

Unit 7 - Rational Expressions 

Unit 8 - Rational Exponents and Radicals 

Unit 9 - Solving Quadratic Equations 

Unit 10 - Quadratic Equations and Applications 

Unit 11 - Conic Sections 

Unit 12 - Inverses, Exponentials, and Logarithms",,False,4,months,False
ma008,"College Algebra",https://www.udacity.com/course/college-algebra--ma008?utm_medium=referral&utm_campaign=api,"Bringing Symbols to Life",beginner,False,https://lh5.ggpht.com/HAd0NKxmFBEQUW4ZtRbw3uKUyrt5-NGYTwF7-2QoZjAK0wOOA8iKp-_Pjsyh9z7h210KsLewhtfLV5VGfQ=s0#w=436&h=268,https://lh3.ggpht.com/K40yfj5_gcmalKkWS3Tw8El--JfeEuug-JxuZSPtQ2tSKTJ1_MlvSei1cq14oexgCi9HBpXofhuv1bToZg=s0#w=4680&h=968,https://www.youtube.com/watch?v=tOETs-1ml60,"Math is everywhere. In this class, you’ll gain an in-depth understanding of algebraic principles, many of which you may have seen before, and learn how to use them to solve problems that we encounter in everyday life.  The online version of College Algebra will cover all of the topics that you would see in more traditional class formats, but it will present the material in a way that we hope you’ll find fresh and interesting. You will learn about functions, polynomials, graphing, complex numbers, exponential and logarithmic equations, and much more, all through exploring real-world scenarios.","Gain an in-depth understanding of algebraic principles and learn how to use them to solve problems you may meet in everyday life.","Basic arithmetic - addition, subtraction, multiplication and division of positive and negative numbers.  
<br>","In this course, you will learn...  

  - To translate word problems into mathematical expressions or equations
  - To manipulate algebraic expressions and solve equations
  - To graph different types of functions and to understand the relationship between a function’s graph and its equation
  - To model growth and decay",False,"The following topics will be covered. There will be two midterms and one  final exam. There are no deadlines unless you are in the SJSU Plus-Udacity for-credit program. 

Lesson 1: Number    
Lesson 2: Expressions    
Lesson 3: Polynomials    
Lesson 4: Equations    
Lesson 5-1: Coordinates    
Lesson 5-2: Distance    
Lesson 5-3: Midpoints And Slope    
Lesson 6-1: Slope And Equations    
Lesson 6-2: Points    
Lesson 7: Forms of the Equation of a Line    
Lesson 8: Inequalities And Absolute Value    
Lesson 9: More Inequalities And Equations    
Lesson 10: Parabolas    
Lesson 11: Factoring    
Lesson 12: Quadratic and Rational Inequalities    
Lesson 13: More Parabolas    
Lesson 14: Completing the Square    
Lesson 15: Quadratic Formula    
Lesson 16: Complex Numbers    
Lesson 17: Functions    
Lesson 18: Domain and Range    
Lesson 19: Behavior of Functions    
Lesson 20: Factor Theorem    
Lesson 21: Rational Zero Test    
Lesson 22: Intermediate Value Theorem    
Lesson 24: Asymptotes    
Lesson 25: Slant Asymptotes    
Lesson 26: Transformations    
Lesson 29: Exponential Functions    
Lesson 30: Scientific Notation    
Lesson 31: Logarithmic Functions    
Lesson 32: Log Properties    
Lesson 33: Solving Exponential and Logarithmic Equations    
Lesson 34: Population, Scrolls and Sound",,False,4,months,False
ph100,"Intro to Physics",https://www.udacity.com/course/intro-to-physics--ph100?utm_medium=referral&utm_campaign=api,"Landmarks in Physics",beginner,False,https://lh6.ggpht.com/9xDuLEr_4CuXcBZVbMQPagaUOvdUOH_T8V4I9Nm9XvDogvR4_yudI60v5_0tWedKx2LInYQiV6KOGqNPXuo=s0#w=436&h=268,https://lh4.ggpht.com/oBjt3byeKLwq96h0G-xq1FVbAKSDznwNmAW5bD-VQ-2JKnwfZBP3lBg53-3zE2TH_tZtKx3tdpgrAd3SKs8=s0#w=1170&h=422,https://www.youtube.com/watch?v=cuKmcq6pu9s,"Study physics abroad in Europe -- virtually! Learn the basics of physics on location in Italy, the Netherlands and the UK, by answering some of the discipline's major questions from over the last 2000 years. ","Go to the places where big physics discoveries were made in the past and make them yourself. You’ll visit Italy, the Netherlands, and the UK as you learn basic physics.","<p>This course is suitable for anyone; a basic understanding of algebra is suggested.</p>","<p>This unique class gives you the chance to see the sites where physics history was made and learn some of the subject's most captivating concepts.</p>",False,"### Lesson 1: How can we measure the circumference of the Earth?

Basics of geometry and trigonometry

### Lesson 2: How do objects move?

Data analysis and kinematics

### Lesson 3: What causes motion?

Forces, acceleration, and Newton’s Laws

### Lesson 4: How can we use motion?

Work, energy, and simple machines

### Lesson 5: How can we determine our longitude at sea?

Simple harmonic motion

### Lesson 6: What is electricity?

Charge and electric fields

### Lesson 7: What is left to discover?

Modern physics and open questions","### When does the course begin?
 
This class is self paced. You can begin whenever you like and then follow your own pace. It’s a good idea to set goals for yourself to make sure you stick with the course.

### How long will the course be available?

 This class will always be available! 

### How do I know if this course is for me?

 Take a look at the “Class Summary,” “What Should I Know,” and “What Will I Learn” sections above. If you want to know more, just enroll in the course and start exploring.

### Can I skip individual videos? What about entire lessons?

 Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you’re confused, you can always go back and watch something that you skipped.

### How much does this cost?

 It’s completely free! If you’re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.

### What are the rules on collaboration?

 Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them. 

### Why are there so many questions?

 Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.

### What should I do while I’m watching the videos?

 Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.",False,2,months,False
ps001,"Intro to Psychology",https://www.udacity.com/course/intro-to-psychology--ps001?utm_medium=referral&utm_campaign=api,"The Science of Thought and Behavior",beginner,False,https://lh3.ggpht.com/W5BzbDFitZydf3rAqTsZ3RuFm4HS2ZBoGOPwjSZSqTkD0ZUC6DhURuAa0fIHr6D8LSQk9r73QFqnJtSTXzY=s0#w=436&h=268,https://lh4.ggpht.com/wXqP0nUt0oN8yt4sm9hSz5Nk1fKzHopMWeeWtiTZGl3pK5EU3UJOMzExyHa1zjT-sqN-G1dFUVYcEA9pTgQ=s0#w=1170&h=422,https://www.youtube.com/watch?v=Xb6N53WXfQ0,"Introduction to Psychology is a journey through all of the major psychological concepts and principles. The knowledge gained from this course will allow students to critically evaluate psychological research and have a more in-depth understanding of human thought and behavior.","Go on a journey through psychological concepts and principles to enable you to gain a more in-depth understanding of human thought and behavior.","There are no prerequisites, but we encourage curiosity about human nature.","Students will be able to:

- identify and analyze the social dimension of society as a context for human life, the processes of social change and social continuity, the role of human agency in those processes, and the forces that engender social cohesion and fragmentation.

- place contemporary developments in cultural, historical, environmental, and spatial contexts.

- identify the dynamics of ethnic, cultural, gender/sexual, age-based, class, regional, national, transnational, and global identities and the similarities, differences, linkages, and interactions between them.

- evaluate social science information, draw on different points of view, and formulate applications appropriate to contemporary social issues.

- recognize the interactions of social institutions, culture, and environment with the behavior of individuals.",False,"Lesson 1:  Introduction to Psychology

Lesson 2: Research Methods in Psychology

Lesson 3: The Biology of Behavior

Lesson 4: Sensation and Perception

Lesson 5: Human Development

Lesson 6: Consciousness

Lesson 7: Learning

Lesson 8: Memory

Lesson 9: Language and Thought

Lesson 10: Intelligence

Lesson 11: Motivation and Emotion

Lesson 12: Stress and Health

Lesson 13: Personality

Lesson 14: Social Behavior

Lesson 15: Psychological Disorders

Lesson 16: Treatments for Psychological Disorders",,False,4,months,False
st101,"Intro to Statistics",https://www.udacity.com/course/intro-to-statistics--st101?utm_medium=referral&utm_campaign=api,"Making Decisions Based on Data",beginner,False,https://lh5.ggpht.com/TeJwuxZIGGaiuAVtTI69tdHKrrs9DOBNgvBHe487ISVN38fGJ-TMDlffwmQd_ObDe4f_FQeLatO3tziADw=s0#w=436&h=268,https://lh4.ggpht.com/aX2xeWRHOrh_ligARa1eTHKaGU_EXqAYPRalgH_m43lSeIwKp-cBMeDJIzAtH0aVrBfCjlRPwAGIF15Dg0A=s0#w=4680&h=968,https://www.youtube.com/watch?v=bAkFZtE6XVQ,"Statistics is about extracting meaning from data. In this class, we will introduce techniques for visualizing relationships in data and systematic techniques for understanding the relationships using mathematics.","Get ready to analyze, visualize, and interpret data! Thought-provoking examples and chances to combine statistics and programming will keep you engaged and challenged.","<p>This course does not require any previous knowledge of statistics. Basic familiarity with algebra such as knowing how to compute the mean, median and mode of a set of numbers will be helpful. </p>","<p>This course will cover visualization, probability, regression and other topics that will help you learn the basic methods of understanding data with statistics. </p>",False,"### Lesson 1: Visualizing relationships in data

Seeing relationships in data and predicting based on them; Simpson's paradox

### Lesson 2: Probability 

Probability; Bayes Rule; Correlation vs. Causation

### Lesson 3: Estimation 

Maximum Likelihood Estimation; Mean, Median, Mode; Standard Deviation, Variance

### Lesson 4: Outliers and Normal Distribution 

Outliers, Quartiles; Binomial Distribution; Central Limit Theorem; Manipulating Normal Distribution

### Lesson 5: Inference

Confidence intervals; Hypothesis Testing

### Lesson 6: Regression

Linear regression; correlation

### Lesson 7: Final Exam","### When does the course begin?
 
This class is self paced. You can begin whenever you like and then follow your own pace. It’s a good idea to set goals for yourself to make sure you stick with the course.

### How long will the course be available?

 This class will always be available! 

### How do I know if this course is for me?

 Take a look at the “Class Summary,” “What Should I Know,” and “What Will I Learn” sections above. If you want to know more, just enroll in the course and start exploring.

### Can I skip individual videos? What about entire lessons?

 Yes! The point is for you to learn what YOU need (or want) to learn. If you already know something, feel free to skip ahead. If you ever find that you’re confused, you can always go back and watch something that you skipped.

### How much does this cost?

 It’s completely free! If you’re feeling generous, we would love to have you contribute your thoughts, questions, and answers to the course discussion forum.

### What are the rules on collaboration?

 Collaboration is a great way to learn. You should do it! The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them. 

### Why are there so many questions?

 Udacity classes are a little different from traditional courses. We intersperse our video segments with interactive questions. There are many reasons for including these questions: to get you thinking, to check your understanding, for fun, etc... But really, they are there to help you learn. They are NOT there to evaluate your intelligence, so try not to let them stress you out.

### What should I do while I’m watching the videos?

 Learn actively! You will retain more of what you learn if you take notes, draw diagrams, make notecards, and actively try to make sense of the material.",False,2,months,False
ud007,"High Performance Computer Architecture",https://www.udacity.com/course/high-performance-computer-architecture--ud007?utm_medium=referral&utm_campaign=api,"Pipelines, Caches, and MultiCores",advanced,False,https://lh6.ggpht.com/B1ND8fPrO0w0c7DZKdolG_brq4519bpZD8c93pETdLHXJZ-RTwDV4U2ODrMjQGA3wsecR-AvfqQQGPY-xg=s0#w=1725&h=1060,https://lh4.ggpht.com/7PS97Ep-0v5syxUFf5asuuSSCfODvaGnVe0xUe8XJl5lCmIWNAQAwLn_VJzfLdCxEMsXLP26FxNHM607-A=s0#w=2340&h=484,,"<i>This class is offered as CS6290 at Georgia Tech where it is a part of the [Online Masters Degree (OMS)](http://www.omscs.gatech.edu/). Taking this course here will not earn credit towards the OMS degree.</i>

The course begins with a lesson on performance measurement, which leads to a discussion on the necessity of performance improvement.

Pipelining, the first level of performance refinement, is reviewed. The weaknesses of pipelining will be exposed and explored, and various solutions to these issues will be studied. The student will learn hardware, software, and compiler based solutions to these issues.","The HPCA course covers performance measurement, pipelining, and improved parallelism through various means.","You must be familiar with Assembly code, the C or C++ programming language, Unix or Linux, and the basics of pipelining.","You will explore the fascinating field of computer architecture, studying the many methods developed to enhance computer performance.  The trade-offs and compromises associated with each design and their effects on processor development is a captivating story that will make you a better computer scientist, regardless of your field of study.",False,"###Lesson 1: Introduction and Trends
- Computer Architecture & Tech Trends
- Moore's Law
- Processor Speed, Cost, Power
- Power Consumption
- Fabrication Yield

###Lesson 2: Performance Metrics and Evaluation

- Measuring Performance
- Benchmarks Standards
- Iron Law of Performance
- Amdahl's Law
- Lhadma's Law

###Lesson 3: Pipelining Review
- Pipeline CPI
- Processor Pipeline Stalls
- Data Dependencies
- Pipelining Outro

###Lesson 4: Branches
- Branch Prediction
- Direction Predictor
- Hierarchical Predictors 
- PShare

###Lesson 5: Predication
- If Conversion
- Conditional Move
- MOVc Summary

###Lesson 6: Instruction Level Parallelism (ILP)
- ILP Intro
- RAW Dependencies 
- WAW Dependencies 
- Duplicating Register Values 
- Instruction Level Parallelism (ILP) 
 
###Lesson 7: Instruction Scheduling
- Improving IPC
- Tomasulo's Algorithm 
- Load and Store Instructions 

###Lesson 8: ReOrder Buffer
- Exceptions in Out Of Order Execution 
- Branch Misprediction 
- Hardware Organization with ROB 

###Lesson 9: Memory Ordering
- Memory Access Ordering
- When Does Memory Write Happen 
- Out of Order Load Store Execution 
- Store to Load Forwarding 
- LSQ, ROB, and RS 

###Lesson 9: Memory
- How Memory Works
- One Memory Bit SRAM 
- One Memory Bit DRAM 
- Fast Page Mode 
- Connecting DRAM To The Processor  

###Lesson 10: Multi-Processing 
- Flynn's Taxonomy of Parallel Machines 
- Multiprocessor Needs Parallel Programs! 
- Centralized Shared Memory 
- Distributed Shared Memory 
- Message Passing Vs Shared Memory 
- Shared Memory Hardware 
- SMT Hardware Changes 
- SMT and Cache Performance",,False,0,,False
ud009,"Firebase Essentials For Android",https://www.udacity.com/course/firebase-essentials-for-android--ud009?utm_medium=referral&utm_campaign=api,"Build a shopping list app",advanced,False,https://lh3.googleusercontent.com/-SmO5j2sYD3ilQJfY29Y7dj81LQeKxw9Gg9C2k9RFsYeXUJfuobx8QAuZ0DEN_tCH2F7iRBmZ-khoQTT-q4=s0#w=1724&h=1060,,,"In this course, you’ll learn how to use Firebase. Firebase is a cloud backend, and one of the leading choices for Backend as a Service. It enables you to quickly get synchronized data up and running for multi-user apps. This is important because nearly every mobile app these days requires authentication and real-time data updates.  

We’ll begin by showing you how easy it is to read and write almost any data to Firebase. After that, we’ll teach you how to allow users to login and have data associated with them. We’ll then cover how to write queries and filters for your data. You’ll discover how to take advantage of Firebase's offline capabilities, and master efficient database design for lightning-fast data retrieval. Lastly, you’ll learn how to use Firebase’s Security and Rules language to secure and add permissions to your data. 

By the end of this course you will have an Android application that can store and share data between different users in real time as well as authenticate and authorize those users.","This course will teach you when and why to choose Firebase as a backend for your Android application","You need to have proficiency in Java and the Android Framework (Developing Android Apps or equivalent level).

Familiarity with Git, using open web APIs and feeling comfortable with Android Studio will also be helpful. A more in-depth list of prerequisites and requirements can be found on the <a href=""https://www.udacity.com/wiki/ud009/prerequisites"" target=""_blank""> course materials page</a>.","If you are an Android developer and your app needs any of the following features:

- Online data storage
- Real-time synchronization between many users
- Authentication for Email/Password as well as OAuth providers
- Data permissions and security
- Offline access to data

This is the course for you!

Firebase is a gentle but very powerful introduction to storing and managing data. With just a few lines of code, you can read and write almost any data you could dream up from your own custom Firebase backend. 

Furthermore, Firebase has a generous free plan that lets you start making hosted apps with multiple users immediately.",False,"### Lesson 1
In this lesson you'll set up Firebase and read and write your first data. 

**Topics include:**

* Course Description and Prerequisites
* Getting Setup With Firebase
* Writing your first Firebase Data
* How Data Works in Firebase
* Reading your first Firebase Data
* Plain Old Java Objects in Firebase
* When to Choose Firebase as part of your stack

### Lesson 2
In this lesson you'll learn all the ins and outs of reading and writing data, including displaying lists of data that are synced with your Firebase database. 

**Topics include:**

* Writing
* Reading
* Debugging
* Lists in Firebase and FirebaseUI
* Best Practices for Reading and Writing Data

###Lesson 3
In this lesson you'll how to create user accounts using both the an email and password login flow, as well as Google login. You’ll then use this user data to display different information to the user depending on who they are signed in as. 

**Topics include:**

* Creating and Logging in Users via Email and Password
* Logging in Users with Google
* Logging out Users
* How to Store App Specific User Data
* How to Use User Data 
* Basic Login Security and Resetting User Passwords

###Lesson 4 (COMING SOON)
In this lesson you'll learn how to structure your database schema for lightning fast queries and sorting. You’ll use your new data structure to implement sharing functionality. You’ll also learn about Firebase’s filtering and sorting capabilities by adding sorting and basic autocomplete to ShoppingList++. 

**Topics include:**
 
* Sorting in Firebase with orderBy
* How and why to de-normalize data
* Dealing with Many to Many relationships in Firebase
* Using IndexOn and OrderByValue for faster searches
* Range, Start At, End At and Limit queries
* Basic Searching in Firebase

### Lesson 5 (COMING SOON)
In this lesson you'll learn about how Firebase deals with offline access and how to secure your data using Firebase’s built in security and permission rules. 

**Topics include:**
 
* Firebase Offline Access
* Security Rules
* Expression in Security Rules
* Authentication Checking in Security Rules
* Data Validation in Firebase",,False,8,weeks,True
ud015,"Object-Oriented JavaScript",https://www.udacity.com/course/object-oriented-javascript--ud015?utm_medium=referral&utm_campaign=api,"Writing Reusable and Maintainable Code",intermediate,False,https://lh3.ggpht.com/RQ6qVahymlxJnOFi2Fn6p6iLNwMQmchGjyJcJuqDUyhNBHkfmrxHYvDhApGA2rptOzmsSA_XZ8V-VV9uEQ=s0#w=1724&h=1067,https://lh4.ggpht.com/QIOjpBdsW61aLEl4KiJXWqaWB0QTNRkIAMNccA95DZoy7-b2aHMOYgBlcKuKHuvyPepy8SfACQ3vSEggB3s=s0#w=4680&h=968,,"Have you been dabbling with JavaScript but find your files keep turning into a mess of spaghetti code? Do you find yourself copying and pasting lines of code over and over throughout your application? Surely there’s a better way, right? 

Yes, there is a better way -- object-oriented programming will allow you to build websites using reusable blocks of code known as libraries, similar to using bricks to build a house. This course is designed to teach web developers how to utilize the various object-oriented programming features within JavaScript, and more importantly, how to write reusable and maintainable libraries that will make your life easier.","Build a variety of JavaScript objects and explore how their inheritance models affect your app's in-memory model. Gain simplicity and modularity in your own code.","This course is for beginner to intermediate web developers with an understanding of JavaScript syntax. Specifically, you should know how to write control structures, how to write simple functions, and recognize the different variable types in JavaScript. As well as be able to read existing JavaScript code with these features and predict its outcome. If you need a refresher on these prerequisites, check out our <a href=""https://www.udacity.com/course/ud804"" target=""_blank"">JavaScript Basics</a> course!","As a <a href=""https://www.udacity.com/course/nd001"">Front-End Web Developer</a>, JavaScript is one of the most important languages in your toolbox. A strong foundation in the language’s features empowers you to write efficient and performant web applications. In this course you’ll explore a variety of ways to write object-oriented code in JavaScript.

You’ll build a variety of JavaScript objects and explore how their different inheritance models affect your code’s execution and in-memory model. You’ll use these features to write memory efficient code and seek simplicity and modularity in your own code.",False,"### Lesson 1: Scopes and Closures
We’ll start by discussing JavaScript’s functional variable scoping features, including lexical scopes (variable availability as you write your code) and dynamics scopes (variable availability as your code actively runs). We’ll then discuss closures, an often misunderstood but incredibly useful feature available in only a handful of languages, including JavaScript.

### Lesson 2: The Keyword “this”
You’ll start your dive into JavaScript object-oriented features by first discovering the parameter “this”. You’ll learn how the value of “this” is determined within various code structures and why it might be a lot easier to think of “this” as a parameter rather than a keyword.

### Lesson 3: Prototype Delegation
You’re probably using one of JavaScript’s inheritance models already: prototype delegation! In this lesson you’ll learn more about this unique feature of JavaScript, how JavaScript uses this feature internally and how you can take advantage of it to maximize your application’s memory footprint.

### Lesson 4: Code Reuse
There are numerous ways to write concise, maintainable and reusable code in JavaScript and you’ll practice a number of them in this lesson. We’ll start writing a library using basic functions and learn the decorator pattern. Then, we’ll refactor this library into the functional, prototypal and pseudoclassical inheritance models. Finally, we’ll explore sub-classing -- coding objects that directly inherit from objects we’ve previously defined.",,True,5,weeks,False
ud032,"Data Wrangling with MongoDB",https://www.udacity.com/course/data-wrangling-with-mongodb--ud032?utm_medium=referral&utm_campaign=api,"Data Manipulation and Retrieval",intermediate,False,https://lh3.ggpht.com/ll9ungBQPIwG1u5WHYyB_q-CO6gAzJC-fT3xotaS5DV3UbNZ7Xdz6b5T3Jpl7aEfmVEY2gjvkkt7KzWVeIo=s0#w=1724&h=1060,https://lh4.ggpht.com/qu1npHHU4BMh7nSfMGanVGTIpCQZ8MdvrPzY_1M2plyszfsgzFma_B12ZwZ7QrDhyOst7pUJJIoQquUYKw=s0#w=1170&h=242,,"In this course, we will explore how to wrangle data from diverse sources and shape it to enable data-driven applications. Some data scientists spend the bulk of their time doing this!

Students will learn how to gather and extract data from widely used data formats. They will learn how to assess the quality of data and explore best practices for data cleaning. We will also introduce students to MongoDB, covering the essentials of storing data and the MongoDB query language together with exploratory analysis using the MongoDB aggregation framework.

This is a great course for those interested in entry-level data science positions as well as current business/data analysts looking to add big data to their repertoire, and managers working with data professionals or looking to leverage big data.

This course is also a part of our <a href=""https://www.udacity.com/course/nd002"">Data Analyst</a> Nanodegree.","Data Scientists spend most of their time cleaning data. In this course, you will learn to convert and manipulate messy data to extract what you need.","The ideal student should have the following skills:

*   Programming experience in Python or a willingness to read a little documentation to understand examples and exercises throughout the course.
*   The ability to perform rudimentary system administration on Windows or Unix

At least some experience using a unix shell or Windows PowerShell will be helpful, but is not required. 

No prior experience with databases is needed.  

**About MongoDB**  
*This course is developed in conjunction with MongoDB, Inc., the originator and primary contributor to the open source database <a href=""https://github.com/mongodb"" target=""_blank""> MongoDB</a>. MongoDB is the leading NoSQL database. Designed for how we build and run applications today, MongoDB empowers organizations to be more agile and scalable. It enables new types of applications, better customer experience, faster time to market and lower costs.*","At the end of the class, students should be able to:

*   Programmatically extract data stored in common formats such as csv, Microsoft Excel, JSON, XML and scrape web sites to parse data from HTML.
*   Audit data for quality (validity, accuracy, completeness, consistency, and uniformity) and critically assess options for cleaning data in different contexts. 
*   Store, retrieve, and analyze data using MongoDB.

<br />
This course concludes with a final project where students incorporate what they have learned to address a real-world data analysis problem.",False,"### Lesson 1: Data Extraction Fundamentals

- Assessing the Quality of Data
- Intro to Tabular Formats
- Parsing CSV
- Parsing XLS with XLRD
- Intro to JSON
- Using Web APIs

### Lesson 2: Data in More Complex Formats

- Intro to XML
- XML Design Principles
- Parsing XML
- Web Scraping
- Parsing HTML


### Lesson 3: Data Quality 

- What is Data Cleaning?
- Sources of Dirty Data
- Measuring Data Quality
- A Blueprint for Cleaning
- Auditing Validity 
- Auditing Accuracy
- Auditing Completeness
- Auditing Consistency
- Auditing Uniformity

### Lesson 4: Working with MongoDB

- Data Modelling in MongoDB
- Introduction to PyMongo
- Field Queries
- Projection Queries
- Getting Data into MongoDB
- Using mongoimport
- Operators like $gt, $lt, $exists, $regex
- Querying Arrays and using $in and $all Operators
- Changing entries: $update, $set, $unset

### Lesson 5: Analyzing Data

- Examples of Aggregation Framework 
- The Aggregation Pipeline
- Aggregation Operators: $match, $project, $unwind, $group
- Multiple Stages Using a Given Operator

### Lesson 6: Case Study - OpenStreetMap Data

- Using iterative parsing for large datafiles
- Open Street Map XML Overview
- Exercises around OpenStreetMap data
- Final Project Instructions",,True,2,months,False
ud036,"Programming Foundations with Python",https://www.udacity.com/course/programming-foundations-with-python--ud036?utm_medium=referral&utm_campaign=api,"Learn Object-Oriented Programming",beginner,False,https://lh5.ggpht.com/MNie9OxrtYLt5C_QMgezV9fYYR-07-U9z2AkqwKQhDIOguka15xhxrNafPFK6X538EUS6j0vJ193gEGLOpI=s0#w=1757&h=1080,https://lh3.ggpht.com/pmJ91CZPKtNWq_0KpHhWnmQ1xr2_lmwvm-dfEqnz3hxBwV9qrfO4Q9MSNN19mkCb6CPm9cJPzQe7fd5T5pU=s0#w=4680&h=968,https://www.youtube.com/watch?v=bwq2W6XUvyg,"In this introductory programming class, you’ll learn Object-Oriented Programming, a must-have technique for software engineers that will allow you to reuse and share code easily. You’ll learn by doing, and will build byte-sized (ha!) mini projects in each lesson to learn and practice programming concepts. 

We’ve heard that programming can be intimidating for newcomers, and we’ve created this course to make sure that you have a great learning experience! You’ll learn ***actively*** with our mini projects (see the awesome list below), which you’ll be able to share proudly with your friends. You’ll also learn important programming concepts one by one, with no surprises or leaps of logic along the way. 

You’ll pick up some great tools for your programming toolkit in this course! You will: 

- Start coding in the programming language Python;
- Reuse and share code with Object-Oriented Programming;
- Create and share amazing, life-hacking projects!   


This introductory course is for you if you want to be a software engineer, or if you want to collaborate with programmers. Mastering Object-Oriented Programming will propel your career in tech forward, and it’s also a great way to learn how software engineers think about solving problems.

This course is also a part of our <a href=""https://www.udacity.com/course/nd004"" target=""_blank"">Full Stack Web Developer</a> Nanodegree.","Introductory programming class to learn Object-Oriented Programming, a must-have technique to reuse and share code easily. Learn by making projects that spread happiness!","We require some familiarity with the following programming ideas in any computer language (C++, Java, Python, English etc.):

- if statements
- loops
- functions


Don’t worry if you feel you need a refresher on any of these programming ideas. That’s ok. We will provide information that will remind you how to use these ideas when building programs.","You should take this course if you want to build awesome projects, while writing only a few lines of code. Here are some of them:

- **Project Take a Break**: Do you know a friend who works too many hours? We will write a program that schedules breaks throughout the day -- reminding your friend to listen to music, get up and dance to their favorite song, or just walk away from the computer every once in awhile. <a href=""http://youtu.be/C29aerpwkc8"" target=""_blank"">http://youtu.be/C29aerpwkc8</a>
- **Project Profanity Editor**: Imagine it’s late at night and you get an email from your boss, requesting your help with something. You reply,  “I can take a shot at it” but accidentally end up including an awkward word (sh*t). Oops. We will write a python program that detects curse words, and saves clumsy email writers from embarrassing moments. <a href=""http://youtu.be/Rvj2UI-wVXA"" target=""_blank"">http://youtu.be/Rvj2UI-wVXA</a>
- **Movie Website**: We will learn how to make an awesome webpage that lists your favorite movies and shows their trailers. 
<a href=""https://www.youtube.com/watch?v=X0FoelOIZM0&t=1m24s"" target=""_blank"">https://www.youtube.com/watch?v=X0FoelOIZM0&t=1m24s</a>
<br />

While building these projects we will learn about a programming technique that is used by software engineers on a daily basis; it is called Object-Oriented Programming. 

Finally, we will work together to get better at reading help documents and using other people’s code almost like lego blocks to build our programs. By building these projects, you’ll become more confident in your ability to code and transition from “programming looks like magic” to “oh, I can do that.”",False,"### Lesson 0: Introduction (30 min)
We will begin with an introduction from the instructor. More specifically, we will talk about the projects we will build and the ideas we will learn in this course. Then we will conduct a short test to ensure you have all the prerequisites necessary for the course. Finally, we will work together to download Python on your computer.

### Lesson 1: Using Functions (3.5 hours)
We will use functions (webbrowser.open and os.rename) from the Python Standard Library to build two projects in this lesson. After that we will present a scenario where using functions will not present a very elegant solution; this will illuminate the need for a new programming tool called Classes.

### Lesson 2: Using Classes (5 hours)
Here we will learn about important object-oriented programming concepts like classes and instances. We will build three cool projects while using classes. These include drawing shapes with Turtle, sending text messages with Twilio and checking curse words with a function called open.

We will leverage modules from within the Python Standard Library and also learn to download and use an external Python package (twilio).

### Lesson 3: Making Classes (5 hours)
In this lesson we will learn to create our first class. While doing this we will build a website that plays trailers of your favorite movies. Here are some of the programming ideas we will learn in this lesson:

- How to create a class
- How to instantiate an object
- How to access class attributes and methods 
- What is the self keyword
- What are constructors (__init__)
- What are DocStrings
- How to create and access Class Variables
- How does Inheritance work
- How to override methods  

### Final Project (6 hours)
Here, you will use the skills learned in this course to identify a problem statement and idea for a project. You will then identify step-by step directions (in simple English) to design a solution for the previously identified problem. Finally, you will use this design and your newly learned object-oriented programming skills to write code to realize your project.",,True,6,weeks,False
ud061,"Computability, Complexity & Algorithms",https://www.udacity.com/course/computability-complexity-algorithms--ud061?utm_medium=referral&utm_campaign=api,"The Power and Limitation of Algorithms",advanced,False,https://lh6.ggpht.com/vYYjAYFZd3PyNKSsdHNQWCRx4BK4eNnc1-rEn956UjR2e1PyA9UMeFXE-Z08yNGaz4nPtZJR4nQcTe0WhwUl=s0#w=1724&h=1060,https://lh3.ggpht.com/Io-C7QzxN-8XpqpZzT7SFE_mcdlJd_xemjPCW8nY4hQzzStA6Vtfsdattuq3pFr3xysJWmluxjUFlZrZ5p4=s0#w=2340&h=484,,"<i>This class is offered as CS6505 at Georgia Tech where it is a part of the [Online Masters Degree (OMS)](http://www.omscs.gatech.edu/). Taking this course here will not earn credit towards the OMS degree.</i>

In this course, we will ask the big questions, “What is a computer? What are the limits of computation? Are there problems that no computer will ever solve? Are there problems that can’t be solved quickly? What kinds of problems can we solve efficiently and how do we go about developing these algorithms?” Understanding the power and limitations of algorithms helps us develop the tools to make real-world computers smarter, faster and safer.","Learn tools and techniques that will help you recognize when problems you encounter are intractable and when there an efficient solution.","Students are expected to have a solid grasp of the basics of discrete mathematics.  Discrete Mathematics and Its Applications by Ken Rosen provides an excellent background for this course. 

If you answer “no” to any of the following questions, it may be beneficial to acquire background knowledge concurrently or prior to taking the course.

1. Can you show that the sum of the first n numbers is n(n+1)/2? Can you give the proof as an induction on n?
2. Can you give an O(n log n) algorithm for sorting n numbers?
3. Can you describe the difference between breadth-first and depth-first search?
4. Given an nxn matrix A and an n-dimensional vector b, can you give a polynomial-time algorithm to find a vector x such that Ax=b?","You will learn a wealth of tools and techniques that will help you recognize when problems you encounter in the real-world are intractable and when there an efficient solution. This can save you countless hours that otherwise would have been spent on a fruitless endeavor or in re-inventing the wheel.",False,"### Lesson 1: Computability
* Languages & Countability
* Turing Machines
* The Church-Turing Thesis
* Universality
* Undecidability

### Lesson 2: Complexity
* P and NP
* NP-Completeness
* NP-Complete Problems
* The Golden Ticket

### Lesson 3: Algorithms
* Dynamic Programming
* Fast Fourier Transform
* Maximum Flow
* Maximum Bipartite Matching
* Linear Programming
* Duality
* Randomized Algorithms
* Approximation Algorithms",,False,0,,False
ud088,"Full Stack Foundations",https://www.udacity.com/course/full-stack-foundations--ud088?utm_medium=referral&utm_campaign=api,"Build a data-driven web app with Python",intermediate,False,https://lh3.ggpht.com/GKNi4exuLn_ER_qN9SIPx4bFpjBhVBGeSP1aTul1hh_Ge_9oRREpLimJyphdkJqc8sgwRo-GQ0vgSO3KcnY=s0#w=1745&h=1073,https://lh3.ggpht.com/l08Qgk6U2BQd-YaFrVnKFguPXoDm0Ior3FTowmcqMNuvDCubLyQ7jhwRDvqew2zMX0zg_Z0rlCLDK-wBA3k=s0#w=4680&h=968,,"In this course you will learn the fundamentals of back-end web development! You will create your own web application that queries a database for items on restaurant menus and then dynamically generates complete menus in the form of web pages and API endpoints.

You’ll start by learning how to interact with a database from a web application using an Object-Relational Mapping (ORM) layer. From there, you’ll learn how GET and POST requests translate to CRUD operations. You’ll then explore the Flask framework and the various ways in which it can speed up the development of your applications. Finally, you’ll develop your very own web application from the ground up using the iterative development process.","Learn the fundamentals of back-end web development by creating your own web application from the ground up using the iterative development process.","You should be comfortable with Python, including Object-Oriented Programming. If you’d like to brush up on your Python, try the first three lessons of our <a href=""/course/cs101"" target=""_blank"">Intro to Computer Science</a> course. For Object-Oriented Programming in Python, see <a href=""/course/ud036"" target=""_blank"">Programming Foundations with Python</a>.

You should also have a firm understanding of SQL and working with a relational database, particularly PostgreSQL. Our <a href=""/course/ud197"" target=""_blank"">Intro to Relational Databases</a> course can get you started if you feel you’re not yet prepared.

Finally, you should be able to read and write HTML and CSS without any guidance. If you need a refresher on HTML and CSS, start with our <a href=""/course/ud304"" target=""_blank"">Intro to HTML and CSS</a> course.

To complete the final project for this course, it is ***critical*** you meet these prerequisites as you are given no assets to begin with and will truly build a complete web application from scratch.","Interacting with a persistent datastore is what transforms static web pages into powerful and effective web applications. Giving users the ability to create, read, update and delete data is the backbone of the most popular services on the Internet today. But, you must do so safely and securely - the smallest mistake could bring your application down or leak your user’s data.

In this course, you’ll discover how all of the major components of web applications work and best practices in developing secure, data-driven web applications.",False,"<h3>Lesson 1 - Working with the CRUD</h3> 
In the first lesson, you will learn about CRUD; Create, Read, Update, and Delete. You will learn why this acronym is important in web development and implement CRUD operations on a database. You will also learn to use an ORM (Object-Relational Mapping) as an alternative to SQL.
<h3>Lesson 2 - Making a Web Server</h3>
<p>In the second lesson, you will build a web server from scratch using Python and some of the pre-installed libraries it includes. You will learn what GET and POST requests are and how we use them to retrieve and modify information on a web site. We will then use the concepts learned in Lesson 1 to add CRUD functionality to our website.
<h3>Lesson 3 - Developing with Frameworks</h3>
In the third lesson, we will discuss web frameworks like Django and Ruby on Rails. You will see how web frameworks simplify the development process and allow us to create web applications faster. We will use the Flask web framework to develop our own web application. We will also discuss API's (Application Programming Interfaces) and add JSON (JavaScript Object Notation) endpoints to our application to allow data to be sent in a format alternative to HTML. 
<h3>Lesson 4 - Iterative Development</h3>
In the last lesson, you will build an entire web application on your own. You will learn about the iterative development process and how developing iteratively allows you to have a working prototype throughout all stages of the development process.",,False,3,weeks,False
ud098,"GT - Refresher - Advanced OS",https://www.udacity.com/course/gt-refresher-advanced-os--ud098?utm_medium=referral&utm_campaign=api,"Optional background course for GT CS6210",intermediate,False,https://lh4.ggpht.com/mxbXeNtIMEhL0fCWbu9mlS0ozDSVkSlFg_tAYugac8ENfgPP0q796lCaVaSUfpjBsLEpX7Y1MdiPikDryeQk=s0#w=976&h=600,https://lh5.ggpht.com/noaX_fJ3Eg39OrZ_esRhm_OXmhqutxiQvWfas3FF3qsZ-bdqyuDA8xlbz3eGqkk6cIkRHkr_tH-7OoLtIw=s0#w=2048&h=739,,"The course covers the basics of Memory Systems, File Systems, Multithreaded Programming, and Networking.  Together these form a strong foundation from which the student can understand cutting edge research in the areas of Virtualization, Distributed Systems, and Internet-scale services in the GT *Advanced Operating Systems* sequence.","This course covers the essential Operating Systems concepts students need in preparation for the rest of the GT ""Advanced Operating Systems"" sequence.","No prior knowledge of Operating System concepts is assumed; however, the course is dense, since it is intended as a refresher for the student who already has some exposure to OS concepts.","Highlights of the course include a deep coverage of:

* cache systems and strategies
* how virtual memory is implemented
* the FAT and ext2 file systems
* the pthreads  interface
* the network protocol stack and the architecture of the Internet.",False,"### Lesson 1: Memory Systems
### Lesson 2: File Systems
### Lesson 3: Multithreaded Programming
### Lesson 4: Networking",,True,3,weeks,True
ud1000,"Deploying a Hadoop Cluster",https://www.udacity.com/course/deploying-a-hadoop-cluster--ud1000?utm_medium=referral&utm_campaign=api,"Analyze Data with Hadoop and MapReduce",intermediate,False,https://lh3.googleusercontent.com/LZEsP1t-pqTSszFWtnW6GwEHSJysztkRYJhKS9MgaZD8XudvrpwZPSbHCxplxApoLbpROviO4SRaDUp6pRO1=s0#w=1440&h=913,,,"Learn how to tackle big data problems with your own Hadoop clusters! In this course, you’ll deploy Hadoop clusters in the cloud and use them to gain insights from large datasets.","Deploy your own Hadoop cluster to crunch some big data!","This course is intended for students with some experience with Hadoop and MapReduce, Python, and bash commands.

You’ll have to be able to work with HDFS and write MapReduce programs. You can learn about these in our Intro to [Hadoop and MapReduce course](https://www.udacity.com/course/intro-to-hadoop-and-mapreduce--ud617).

The MapReduce programs in the course are written in Python. It is possible to use Java and other languages, but we suggest using Python, on the level of our [Intro to Computer Science course](https://www.udacity.com/course/intro-to-computer-science--cs101).

You’ll also be using remote cloud machines, so you’ll need to know these bash commands:

- ssh
- scp
- cat
- head/tail

You’ll also need to be able to work in an editor such as vim or nano. You can learn about these in our [Linux Command Line Basics](https://www.udacity.com/course/linux-command-line-basics--ud595) course.","Using massive datasets to guide decisions is becoming more and more important for modern businesses. Hadoop and MapReduce are fundamental tools for working with big data. By knowing how to deploy your own Hadoop clusters, you’ll be able to start exploring big data on your own.",False,"### Deploying a Hadoop cluster on Amazon EC2

Deploy a small Hadoop cluster on Amazon EC2 instances.
 
### Deploy a Hadoop cluster with Ambari

Use Apache Ambari to automatically deploy a larger, more powerful Hadoop cluster.

### On-demand Hadoop clusters

Use Amazon’s ElasticMapReduce to deploy a Hadoop cluster on-demand.

###Project: Analyzing a big dataset with Hadoop and MapReduce

Use Hadoop and MapReduce to analyze a 150 GB dataset of Wikipedia page views.",,False,3,weeks,False
ud1009,"Objective-C for Swift Developers",https://www.udacity.com/course/objective-c-for-swift-developers--ud1009?utm_medium=referral&utm_campaign=api,,intermediate,False,https://lh3.googleusercontent.com/Qi9kzCGRvRZ_UmjAJ8kWVqEa1ZRaLuWipbwDn42nL9O-EEbFJ5DcVWvwoGdyfFgIwbXpOk5f9uw6INy2BIjQ=s0#w=1440&h=913,,,"This course is designed to teach students how to understand and identify the differences between the Objective-C and Swift programming languages, and especially, how to rewrite from the former to the latter. Understanding communications between the two languages—called ""interoperability""—is becoming more and more important for developers, particularly as we prepare for the arrival of Swift 3.0. In the course, students will write classes and add functionality to classes by writing and calling methods. After learning some basic Objective-C syntax, students will examine and break down an app written in Objective-C and rewrite it in Swift. The course will conclude with a review of and practice with the most common challenges for interoperability between Objective-C and Swift.","Learn the distinguishing language features of Objective-C. Practice Objective-C syntax by writing classes, and writing and calling methods.","Experience writing iOS apps in Swift.","This course will teach you the distinguishing language features of Objective-C, including basic syntax. With this knowledge you will be able to confidently answer some of the most commonly asked interview questions related to Objective-C. You will migrate an app from Objective-C to Swift and in so doing become familiar with the experience of deciphering an unfamiliar Objective-C codebase, an experience you are likely to encounter in your first job as an iOS developer. You will also get an opportunity to practice with interoperability between Objective-C and Swift, practice negotiating the differences between the languages of iOS. 

When you look out at the iOS landscape you likely see that the number of engineers developing in Swift is growing rapidly, yet many apps and third party APIs are still written in Objective-C.  This course is designed to help prepare you for that landscape.",False,"### Lesson 1 Objective-C and Swift, Compare and Contrast
Learn the distinguishing language features of Objective-C.

### Lesson 2 Writing Classes
Familiarize yourself with Objective-C syntax. Write some classes and properties from scratch. 

### Lesson 3 Adding Functionality to a Class: Methods and Messages
Master how to write and call methods in Objective-C. Build a functioning game.

### Lesson 4 Migrate an App from Objective-C to Swift: Part I 
Write custom classes and incorporate third party frameworks and extensions.

### Lesson 5 Migrate an App from Objective-C to Swift: Part II 
Persist data with NSCoder and NSKeyedArchiver. Implement navigation with a collection view.

### Lesson 6 Common Interoperability Challenges
Facilitate communication between the languages of iOS. Complete a set of coding challenges to sharpen interop skills.",,False,5,weeks,False
ud110,"Intro to AJAX",https://www.udacity.com/course/intro-to-ajax--ud110?utm_medium=referral&utm_campaign=api,"Making Asynchronous Requests with jQuery",intermediate,False,https://lh3.ggpht.com/VM0Wo-7nMo9PvvjHoUW1Wzey41PSKlVafZUt6-n9bnZAsyhT0J1eCvBFViRDCUoolBQTHAAaJs2E_A-mod8=s0#w=1724&h=1060,https://lh3.ggpht.com/Lc3FZ8DcGgnxDDdTuIajlUZHk01EOePRk1TD8zMt_Lx5-jO5cbr3QAUwmB6u7yodn66IKqtJoI8Ln5QMwqs=s0#w=4680&h=968,,"In this course you will learn how to make asynchronous requests with JavaScript (using jQuery’s AJAX functionality), and gain a better understanding of what’s actually happening when you do so. You will also learn how to use data APIs so you can take advantage of freely accessible data in your applications, including photo results, news articles and up-to-date data about the world around us.

As part of the course, you’ll be building a web app that will help people learn about a place where they want to move! Your app will query the Google Streetview, Wikipedia and New York Times APIs!

This course is also a part of our <a href=""https://www.udacity.com/course/nd001"">Front-End Web Developer</a> Nanodegree.","Learn how to perform asynchronous requests as you build a web app with data from Google Street View, the New York Times and Wikipedia!","* Intermediate proficiency with JavaScript (equivalent to having finished JavaScript Basics).
* Familiarity with HTML/CSS.","User experience is vital to the success of your website or web app. It’s important that the user’s experience be smooth and free of jank, yet the application will have to do things that take a long time to complete. AJAX allows app developers to interact with server-side APIs without pausing script execution or forcing the page to reload.

Plus, learning how to query data APIs will open you to a tremendous amount of free data that’s freely accessible. Want to build a flight tracking app? How about a photo gallery with image search? Or what about a tweet viewer? Just find an API that provides the data you need, read the documentation and sample code, and query away!

If you want to build solid and fast web applications, knowing how to query servers using AJAX is a must.",False,"###Inspiration

* What is AJAX?
* Why use an API?
* How can you identify AJAX requests in existing websites?

###Perspiration

* Clone the Move Planner repository
* Implement the Google Streetview API
* Implement the NY Times API
* Error handling normal AJAX requests
* Implement the Wikipedia API
* Error handling JSON-P requests

###Meditation

* What did you learn?
* How else can you apply AJAX to make speedy page loads?
* Go customize!",,False,2,weeks,False
ud120,"Intro to Machine Learning",https://www.udacity.com/course/intro-to-machine-learning--ud120?utm_medium=referral&utm_campaign=api,"Pattern Recognition for Fun and Profit",intermediate,False,https://lh4.ggpht.com/iH59AlLRPUJvthBY2aYpNo-qvIB0wsh7OXNAxNgBciwkUa0lLhxzvYswHVJjG012yD5eQgbWYmcHyDczMg=s0#w=1724&h=1060,https://lh6.ggpht.com/CnktNdwaisHPcxH0faZZ5FVBCYuaSoVU2l_3rXujMyG9Em8GcZof-rIbH7sjmzL3BaBeTF4qXn3r3zAP0O4=s0#w=1170&h=242,,"Machine Learning is a first-class ticket to the most exciting careers in data analysis today. As data sources proliferate along with the computing power to process them, going straight to the data is one of the most straightforward ways to quickly gain insights and make predictions.  

Machine learning brings together computer science and statistics to harness that predictive power. It’s a must-have skill for all aspiring data analysts and data scientists, or anyone else who wants to wrestle all that raw data into refined trends and predictions.

This is a class that will teach you the end-to-end process of investigating data through a machine learning lens. It will teach you how to extract and identify useful features that best represent your data, a few of the most important machine learning algorithms, and how to evaluate the performance of your machine learning algorithms.

This course is also a part of our <a href=""https://www.udacity.com/course/nd002"">Data Analyst</a> Nanodegree.","This class will teach you the end-to-end process of investigating data through a machine learning lens, and you'll apply what you've learned to a real-world data set.","To succeed in this course, you must be proficient at programming in Python and basic statistics. If you need a refresher on any of these topics, you can check out these courses:

- [Intro to Computer Science](https://www.udacity.com/course/cs101) (You should know basic data structures and control statements, and be able to write and import functions.)

- [Inferential Statistics](https://www.udacity.com/course/ud201)

- [Descriptive Statistics](https://www.udacity.com/course/ud827)


One additional course that would be nice to have is Intro to [Data Science](https://www.udacity.com/course/intro-to-data-science--ud359), as this will get you familiar with scientific problem-solving.  However, completion of that class isn't required for success.  We will also use a tiny bit of <a href=""https://www.udacity.com/course/ud775"">git</a>, which you can also learn about on Udacity.

One thing that we don’t require is previous exposure to machine learning.  If you’re a machine learning beginner, you’re in the right place.","In this course, you’ll learn by doing! We’ll bring machine learning to life by showing you fascinating use cases and tackling interesting real-world problems like self-driving cars. For your final project you’ll mine the email inboxes and financial data of Enron to identify persons of interest in one of the greatest corporate fraud cases in American history.

When you finish this introductory course, you’ll be able to analyze data using machine learning techniques, and you’ll also be prepared to take our Data Analyst Nanodegree. We’ll get you started on your machine learning journey by teaching you how to use helpful tools, such as pre-written algorithms and libraries, to answer interesting questions.",False,"You’ll learn how to start with a question and/or a dataset, and use machine learning to turn them into insights. 

###Lessons 1-4: Supervised Classification

**Naive Bayes:** We jump in headfirst, learning perhaps the world’s greatest algorithm for classifying text.

**Support Vector Machines (SVMs):** One of the top 10 algorithms in machine learning, and a must-try for many classification tasks.  What makes it special?  The ability to generate new features independently and on the fly.

**Decision Trees:** Extremely straightforward, often just as accurate as an SVM but (usually) way faster.  The launch point for more sophisticated methods, like random forests and boosting.

###Lesson 5: Datasets and Questions
Behind any great machine learning project is a great dataset that the algorithm can learn from.  We were inspired by a treasure trove of email and financial data from the Enron corporation, which would normally be strictly confidential but became public when the company went bankrupt in a blizzard of fraud.  Follow our lead as we wrestle this dataset into a machine-learning-ready format, in anticipation of trying to predict cases of fraud.

###Lesson 6 and 7: Regressions and Outliers
Regressions are some of the most widely used machine learning algorithms, and rightly share prominence with classification.  What’s a fast way to make mistakes in regression, though?  Have troublesome outliers in your data.  We’ll tackle how to identify and clean away those pesky data points.

###Lesson 8: Unsupervised Learning

**K-Means Clustering:** The flagship algorithm when you don’t have labeled data to work with, and a quick method for pattern-searching when approaching a dataset for the first time.

###Lessons 9-12: Features, Features, Features

**Feature Creation:** Taking your human intuition about the world and turning it into data that a computer can use.

**Feature Selection:** Einstein said it best: make everything as simple as possible, and no simpler.  In this case, that means identifying the most important features of your data.

**Principal Component Analysis:** A more sophisticated take on feature selection, and one of the crown jewels of unsupervised learning.

**Feature Scaling:** Simple tricks for making sure your data and your algorithm play nicely together.
Learning from Text: More information is in text than any other format, and there are some effective but simple tools for extracting that information.

###Lessons 13-14: Validation and Evaluation

**Training/testing data split:** How do you know that what you’re doing is working?  You don’t, unless you validate.  The train-test split is simple to do, and the gold standard for understanding your results.

**Cross-validation:** Take the training/testing split and put it on steroids.  Validate your machine learning results like a pro.

**Precision, recall, and F1 score:**  After all this data-driven work, quantify your results with metrics tailored to what is most important to you.
 
###Lesson 15: Wrapping it all Up
We take a step back and review what we’ve learned, and how it all fits together.  

###Projects

Mini-project at the end of each lesson

**Final project:** searching for signs of corporate fraud in Enron data",,True,10,weeks,False
ud162,"Intro to Point & Click App Development",https://www.udacity.com/course/intro-to-point-click-app-development--ud162?utm_medium=referral&utm_campaign=api,"Think It. Build It.",beginner,True,https://lh5.ggpht.com/kI0ik4ILo3V22AmxDwyaAYaTFH__6PXBFyIYqmmNei3qhTGJIyT-jLLmpooYEqMyM8BehSTQEGmlnvIJWrs7=s0#w=1757&h=1080,https://lh5.ggpht.com/NaWEGnVTrwLQwzIzNM7m0uQCu1hv0nJL3Y12-F_Ml8iOUxA4Y1ozHrYnokYsPhLq9fCSwuoO3h9hUoqm00I=s0#w=4680&h=968,https://www.youtube.com/watch?v=nB-OjiwuOTk,"This class teaches you how to build powerful web and mobile apps and host them in the cloud, without writing a line of code.

By the end of this short course, you'll use the skills you've developed to conceptualize and create your own app. To get you there, your instructors Samantha and Andy will first help you build an app that could be used to manage logistics at a music festival. Though this is a very specific app use case, the skills you learn will be applicable to just about any business app you’d want to develop.","In this short class you'll build powerful apps without writing code. Great if you're an aspiring developer or someone who wants to learn what programmers do.","Good news! You don't need any programming experience and you don't need to know anything about Salesforce. You'll learn the ins and outs of point-and-click development, so all you need now is an interest in building an app.

One thing you should know: the skills you learn in this course are in high demand and will help further your career.","After completing this course you will have built your own web and mobile app. You will become familiar with the concept of abstraction and how to think about concrete problems in their most general sense -- a concept critical for all developers. In addition, you will learn how to map out a data model, create data visualizations, and automate manual processes after analyzing your abstractions.

What kind of apps can you build? Well, Facebook uses a Salesforce app to manage their entire hire-to-retire process: collecting resumes, sharing feedback, making job offers, and developing talent. And the Obama 2012 campaign built apps to mobilize their vast volunteer network and visualize the pulse of the nation in real-time. What will you build?",False,"### Overview
In this class you’ll learn the basics of building apps with Force.com, a part of Salesforce Platform. These apps are typically business apps: they solve organizational and logistical problems. You probably wouldn’t use Salesforce to build a computer game (though you could!).

There are two ways to build apps in Force.com: with or without code. This class will only cover the non-coding, point-and-click app building interface. But don’t be fooled! Building powerful apps does not require writing code. 

This class contains an introductory lesson, five primary lessons where you'll be building and learning (each of which has an accompanying problem set to practice your skills), and a final project where you'll put everything together.

### Lesson 0: What is Salesforce (15 mins)
What **is** Salesforce Platform? What does it do? Why should I learn about it? What kind of jobs can I get after I learn how to use it?

In this lesson, you’ll meet the instructors, get to know the class, and learn a bit about Salesforce in general. 

### Lesson 1: Creating your First App (90 minutes)
In this lesson you’ll get acquainted with Force.com and actually build the beginnings of your first app. You’ll get some experience taking a big problem (in this case, managing a music festival), breaking it into smaller parts, and representing those parts in Salesforce. As you do this, you’ll learn about the basic components of a Salesforce app and add some simple (but powerful) functionality to your app. More concretely, you’ll learn about:

* **Salesforce Data**: Salesforce represents data as objects, fields, and records. You’ll learn what these terms mean and build them into your app. 
* **Relationships**: When the pieces of your app start communicating, interesting things can happen. In this lesson you’ll learn the basics of Salesforce relationship fields. 
* **Validation Rules**: If you’ve ever incorrectly entered your credit card number into a website, you already know about validation rules. In this lesson, you’ll learn how to build them into your app. 
* **Formulas and Summaries**: These tools let you easily keep track of quantifiable things like money spent, customers contacted, or tickets sold. In this lesson you’ll learn how to build these automated calculations into your app.  

### Lesson 2: Building out your Data Model (90 mins)
Behind every powerful business app is a well-planned data model (also known as a schema). In this lesson you’ll learn how to decompose a complex problem into its component pieces and then connect those pieces together with the appropriate relationship fields. The data model you build will serve as the schematic skeleton onto which you’ll build dynamic functionality in later lessons. The specific topics covered are: 

* **One-to-Many Relationships**: These relationships let the pieces of your app talk to each other. In this lesson you’ll learn how and when (and why) to use master-detail and lookup relationships in the apps you build. 
* **Many-to-Many Relationships**: You’ll learn how to use a junction object to add flexibility into your data model. 
* **Customizing the User Interface**: Good apps should be easy to use! In this lesson you’ll learn how to configure the layout of your app to make sure the UI is simple and intuitive.
* **Schema Builder**: There are many ways to get things done in Salesforce. In this lesson you’ll start using the schema builder to understand how your app works.
* **Data Loading**: This is a convenient way to get lots of data onto your app at once.

### Lesson 3: Visualizing your Data (45 mins) 
No matter what kind of app you’re building, you’ve probably got some data that you want other people in your organization to understand quickly and easily. In this lesson you’ll learn how quickly communicate information with  real-time data visualizations. Specifically, you’ll learn how to make:

* **Reports**: These let you gather related information into one place.  These let you gather data according to specific criteria and display it in neat rows and columns. 
* **Charts**: These let you graphically summarize the information in a report.
* **Dashboards**: Different people want access to different information. A dashboard is a collection of charts that give specific people in your organization exactly the information that they need in real-time.
* **Views**: Data is good, but sometimes you have too much. Views let you selectively and quickly display only the data you care about.

### Lesson 4: Adding Automation (45 mins)
In this lesson you’ll think about how to use your app to automate manual tasks. You’ll learn how to use two important Salesforce tools: 

* **Workflows**: There are situations where a series of steps need to happen in sequence: first do this, then do that. Workflows let you automate processes like these, such as sending an email, assigning a task, or updating a field.
* **Approval Processes**: You don’t want every job to be completely automated. Sometimes you need someone to step in and say “this looks good.” Approval processes add a human element to your automated tasks.

### Lesson 5: Make it Social. Make it Mobile. (45 mins)
This is it. With a few clicks of the mouse you’ll make your app social and mobile. The tools you’ll use are:

* **Chatter**: This will let your users collaborate on the projects and records they work on together.  
* **Salesforce1**: That web app you’ve been building this whole time? It’s actually a mobile app too. You’ll even learn how to quickly customize your mobile interface and add functionality for mobile productivity. 

### Final Project: Build your own App (2-4 hours)
By the time you get here, you will have already built a music festival management app. Now it’s time to take your own idea and turn it into a functional web and mobile app.",,True,1,months,False
ud170,"Intro to Data Analysis",https://www.udacity.com/course/intro-to-data-analysis--ud170?utm_medium=referral&utm_campaign=api,"Data Analysis Using NumPy and Pandas",beginner,False,https://lh3.googleusercontent.com/oN7SxjOKxWSTnGr965xejpQxz7PDyojhhCDON_7-O0CIYTSCWkehbB4H6fni7rtbGW5K-EZ80aVz50Os6ck=s0#w=1553&h=954,https://lh3.googleusercontent.com/kL2AB-KAvzx_AnWG6ImK-nKrYBYBE2ZrHxzTbixnxs59jWnXD-tXdplXztt8HXj9azLXigm0azNnP2SeTJ4=s0#w=4672&h=968,,"This course will introduce you to the world of data analysis. You'll learn how to go through the entire data analysis process, which includes:

* Posing a question
* Wrangling your data into a format you can use and fixing any problems with it
* Exploring the data, finding patterns in it, and building your intuition about it
* Drawing conclusions and/or making predictions
* Communicating your findings

You'll also learn how to use the Python libraries NumPy, Pandas, and Matplotlib to write code that's cleaner, more concise, and runs faster.

This course is part of the [Data Analyst Nanodegree](https://www.udacity.com/course/data-analyst-nanodegree--nd002).","Explore a variety of datasets, posing and answering your own questions about each. You'll be using the Python libraries NumPy, Pandas, and Matplotlib.","To take this course, you need to be comfortable programming in Python.

* You should be familiar with if statements, loops, functions, lists, sets, and dictionaries. To learn about any of these topics, take the course [Intro to Computer Science](https://www.udacity.com/course/intro-to-computer-science--cs101).
* You should also be familiar with classes, objects, and modules. To learn about these topics, take the course [Programming Foundations with Python](https://www.udacity.com/course/programming-foundations-with-python--ud036).","This course is a good first step towards understanding the data analysis process as a whole. Before delving into each individual phase, it is important to learn the difference between all phases of the process and how they relate to each other. After taking this course, you will be better positioned to succeed in other courses in the [Data Analyst Nanodegree program](https://www.udacity.com/course/data-analyst-nanodegree--nd002). For example, a student who started with [Data Analysis with R](https://www.udacity.com/course/data-analysis-with-r--ud651), which covers the exploratory data analysis phase, might not understand at that point the difference between data exploration and data wrangling. By taking this course first, you will learn what each phase accomplishes and how it fits into the larger process.

This course also covers the Python libraries NumPy, Pandas, and Matplotlib, which are indispensable tools for doing data analysis in Python. Their many convenient functions and high performance make writing data analysis code a lot easier!",False,"### Lesson 1: Data Analysis Process

In this lesson, you will learn about the data analysis process, which includes posing a question, wrangling and exploring your data, drawing conclusions and/or making predictions, and communicating your findings. You will complete an analysis of Udacity student data using pure Python, with minimal reliance on additional libraries.

### Lesson 2: NumPy and Pandas for 1D Data

In this lesson, you will start learning to use NumPy and Pandas to make the data analysis process easier. This lesson focuses on features that apply to one-dimensional data. You'll learn to use NumPy arrays, Pandas Series, and vectorized operations.

### Lesson 3: NumPy and Pandas for 2D Data

In this lesson, you'll continue learning about NumPy and Pandas, this time focusing on two-dimensional data. You'll learn to use two-dimensional NumPy arrays and Pandas DataFrames. You'll also learn to group your data and to combine data from multiple files.

### Final Project: Investigate a Dataset

In the project, you will use NumPy and Pandas to go through the data analysis process on one of a list of recommended datasets.",,False,6,weeks,False
ud189,"Advanced Operating Systems",https://www.udacity.com/course/advanced-operating-systems--ud189?utm_medium=referral&utm_campaign=api,"Abstractions and Virtualization",advanced,False,https://lh3.ggpht.com/SdbdPteIUGqjQT9M1z3FlEXulgHFwj60lYsnHovptPyAtE3U8bHF2ic2qUuxQs8D6zngFi2yEOUES1fOD3G-=s0#w=1724&h=1060,https://lh6.ggpht.com/EyBkEKFXan6Z43n_gq66PjNmWInp3JsI515vEEHDQ-snEPnNf9kUdH5nXeGgnhMd5p8Ad3Vfaze7iD_nScQ=s0#w=4680&h=968,,"In this course, we will see all the advances that have led to the state-of-the-art operating system that we know today, covering variety of platforms -- cell phones, multi-core, parallel systems, distributed systems, and cloud computing.",,"Students are expected to have taken an undergraduate OS course, or have some experience in industry. A good understanding of the concepts in a standard textbook such as ""Operating Systems Concepts,"" Silberschatz and Galvin (or its equivalent) will be assumed in this course. 

Students must also be comfortable with UNIX and C programming.","This course is a journey to understanding the role played by the Operating System in providing the rich user experience afforded to modern applications by today’s computers. Along the way, we highlight the symbiotic relationship between hardware and software that makes it possible for the computer and OS to provide a pleasing user experience.",False,"###Lesson 1: Abstractions

 * The Princple of Abstraction
 * Hardware Resources
 * OS Functionality
 * Managing the CPU and Memory
 
###Lesson 2: OS Structure

* OS Structure Overview
* The SPIN Approach 
* The Exokernel Approach
* The L3 Micro-Kernel Approach
 
###Lesson 3: Virtualization

* Intro to Virtualization
* Memory Virtualization
* CPU and Device Virtualization
 
###Lesson 4: Parallelism

* Shared Memory Machines
* Synchronization
* Communication
* Lightweight RPC
* Scheduling
* A Shared-Memory Multiprocessor OS

###Lesson 5: Distributed Systems

* Definitions 
* Lamport Clocks
* Latency limits
* Active networks
* Systems from Components
 
###Lesson 6: Distributed Object Technology

* Spring Operating System
* Java RMI
* Enterprise Java Beans
 
###Lesson 7: Design and Implementation of Distributed Services

* Global Memory System  
* Distributed Shared Memory 
* Distributed File System

###Lesson 8: System Recovery

* Lightweight Recoverable Virtual Memory
* Rio Vista 
* Quicksilver
 
###Lesson 9: Internet Scale Computing

* Giant Scale Services
* MapReduce
* Content Delivery Networks
 
###L10: Real-Time and Multimedia

* Time sensitive Linux
* Persistent temporal streams
 
###L11: Security

* Principles of Information Security
Security 
* The Andrew System",,False,5,weeks,False
ud197,"Intro to Relational Databases",https://www.udacity.com/course/intro-to-relational-databases--ud197?utm_medium=referral&utm_campaign=api,"SQL, DB-API, and More!",intermediate,False,https://lh4.ggpht.com/H9zRncxCIalNMrZLqYqGNikKXGPe7U_f6tS-v1VeHo12Zt8QqpTDqxI1FMsJSLYXWNpz1BhZXTgeQZRw_3s=s0#w=1758&h=1080,https://lh3.ggpht.com/_IU6K-6RwzuS59MFXIFRpiPFUPED8t-bZQbB9fY9BqXEeVMf1giijZISSMbXMossadcebHkJViOCoGaAHw=s0#w=4680&h=968,,"This course is a quick, fun introduction to using a relational database from your code, using examples in Python. You'll learn the basics of SQL (the Structured Query Language) and database design, as well as the Python API for connecting Python code to a database. You'll also learn a bit about protecting your database-backed web apps from common security problems.

After taking this course, you'll be able to write code using a database as a backend to store application data reliably and safely.","Relational databases are a powerful tool used throughout the industry. Learn the basics of SQL and how to connect your Python code to a relational database.","**You can read and write basic code in Python.** This course uses programming exercises in Python. If you haven't worked with Python before, check out our course <a href=""https://www.udacity.com/course/ud036"" target=""_blank"">Programming Foundations with Python</a>.

If you can understand this code (maybe with the help of the <a href=""https://docs.python.org/2/library/random.html#random.choice"" target=""_blank"">**random** module documentation</a>), you know enough Python for this course:

<pre>
import random

def ChooseTwice(items):
    a = random.choice(items)
    b = random.choice(items)
    return a, b

names = [""Alice"", ""Bob"", ""Charlie"", ""Debra""]
(one, two) = ChooseTwice(names)
if one == two:
    print ""%s is happy!"" % one
else:
    print ""%s likes %s!"" % (one, two)
</pre>

**You can use a command-line interface (terminal).** Some of the exercises in this course involve using a Unix-style command-line interface to enter commands, run Python programs, and navigate directories.

If you have taken our course on <a href=""/course/ud775"" target=""_blank"">Git and Github</a>, the level of command-line use in this course is similar.

**You don't need to be a Web programmer.** This course does include a small Web application and some HTML and JavaScript in examples, but you will not need to make changes in these languages.

**You don't need any previous database experience.** This course is an entry-level introduction to relational databases.

**You need a programming text editor** (such as <a href=""http://www.sublimetext.com/"" target=""_blank"">Sublime Text</a>) installed on your computer. You should be able to use it to open and edit files of Python code.","If you look under the hood of a lot of major web sites — from Wikipedia to Reddit — you'll find a relational database somewhere.

Database systems such as PostgreSQL and MySQL have been part of the web developer's toolkit for many years, and remain some of the most powerful tools available for storing and manipulating structured data.

If you're planning to continue on in full-stack development, knowing about databases is essential background. Even though many toolkits hide the details of the database from your application code, being able to interact with the database will serve you well in designing, debugging, and maintaining your applications.",False,"### Lesson 1: Data and Tables
In this lesson, you'll learn about how relational databases let you structure data into tables. You'll learn about the importance of unique keys and relationships between tables.

### Lesson 2: <s>Elephants</s> Elements of SQL
In this lesson, you'll begin learning SQL, the Structured Query Language used by most relational databases. You'll learn about the **select** and **insert** statements, the basic operations for getting data out of a database and putting data into a database. You'll learn about the operators and syntax available to get the database to scan and join tables for you.

### Lesson 3: Python DB-API
In this lesson, you'll learn how to access a relational database from Python code. You'll use a virtual machine (VM) running on your own computer to run a Python web application, and adapt that application to use a database backend. Then you'll learn about some of the most common security pitfalls of database-backed applications, including the famous <a href=""http://xkcd.com/327/"" target=""_blank"">Bobby Tables</a>. This lesson also covers the SQL **update** and **delete** statements.

### Lesson 4: Deeper Into SQL
In this lesson, you'll learn how to design and create new databases. You'll learn about normalized design, which makes it easier to write effective code using a database. You'll also learn how to use the SQL **join** operators to rapidly connect data from different tables.

### Lesson 5: Final Project
In this project, you'll use your Python and SQL knowledge to build a database-backed Python module to run a game tournament. You'll design the database schema and write code to implement an API for the project.",,False,4,weeks,False
ud201,"Intro to Inferential Statistics",https://www.udacity.com/course/intro-to-inferential-statistics--ud201?utm_medium=referral&utm_campaign=api,"Making Predictions from Data",beginner,True,https://lh5.ggpht.com/OD60sILjGeSrUb2O7nPqio4ym7qsZo7z_7M4vkxTeW4T_sj_mUosbK_omXfdDfyjK5oIv_XZGH1bOis8aMk=s0#w=1724&h=1060,https://lh5.ggpht.com/F8moDNQh-uVmQJgECq8EESBy3MX-pMfXbWmaqRGK17HRpReckB3dJXLFNVviOYky2vOkNQIywhVPLcs7jw=s0#w=4680&h=968,,"Inferential statistics allows us to draw conclusions from data that might not be immediately obvious. This course focuses on enhancing your ability to develop hypotheses and use common tests such as t-tests, ANOVA tests, and regression to validate your claims.","Intro to Inferential Statistics will teach you how to test your hypotheses and begin to make predictions based on statistical results drawn from data!","This course assumes basic understanding of Descriptive Statistics, specifically the following:

- calculating the mean and standard deviation of a data set
- central limit theorem
- interpreting probability and probability distributions
- normal distributions and sampling distributions
- normalizing observations

If you need a refresher, check out our [Descriptive Statistics course](https://www.udacity.com/course/ud827)! The course also utilizes Google Spreadsheets as a tool.","This course will guide you through some of the basic tools of inferential statistics. 
<br> <br>
This course will cover:

- estimating parameters of a population using sample statistics
- hypothesis testing and confidence intervals
- t-tests and ANOVA
- correlation and regression
- chi-squared test",False,"Inferential Statistics is a continuation of the material covered in [Descriptive Statistics](https://www.udacity.com/course/ud827), and so lesson numbers follow from that course:

### Lesson 8: Estimation
You will learn how to estimate population parameters from sample statistics using confidence intervals and estimating the effect of a treatment.
### Lesson 9: Hypothesis Testing 
You will learn how to use critical values to make decisions on whether or not a treatment has changed the value of a population parameter.
### Lesson 10,11: t-tests
You will learn how to test the effect of a treatment or compare the difference in means for two groups when we have small sample sizes.
### Lesson 12,13: ANOVA
You will learn how to test whether or not there are differences between three or more groups.
### Lesson 14: Correlation
You will learn how to describe and test the strength of a relationship between two variables.
### Lesson 15: Regression 
You will learn how to describe the way in which changes in one variable are related to changes in a second variable.
### Lesson 16: Chi-squared Tests
You will learn how to compare and test frequencies for categorical data. 
### Final Project 
You will use the methods you have learned in this course to perform an analysis on a dataset and report your findings. You will describe the data, calculate statistics, perform inference, and make conclusions.",,True,2,months,False
ud245,"Intro to jQuery",https://www.udacity.com/course/intro-to-jquery--ud245?utm_medium=referral&utm_campaign=api,"Manipulating Websites with Ease",intermediate,False,https://lh3.ggpht.com/lB5iRpDRGX9DbDvxXD1yyJO_ogqX2_XX1zgeAV9tOovVPc6VLgTb77YglQ_CkILg7KQGoFGys04UYOk-C3Pf=s0#w=1753&h=1078,https://lh3.ggpht.com/WEFejImzckqQTV8y6O9CRlpaA0EJZ4XO3NzcZRLeO8EumzobN63TRDI0IojjugodhS3HdsROf5y0bVQTqTm8=s0#w=4680&h=968,,"jQuery is the most popular JavaScript library today, in use by over 60% of the top 100,000 most visited websites. This course will teach you how to use jQuery’s core features - DOM element selections, traversal and manipulation.

You'll also learn how to read and make sense of jQuery's documentation, making it easy for you to go beyond the methods taught in this class and take advantage of jQuery's full array of features!

This course is also a part of our <a href=""https://www.udacity.com/course/nd001"">Front-End Web Developer</a> Nanodegree.","Learn how to access and modify the DOM with ease using jQuery!","To succeed in this course, we expect you to have some HTML and JavaScript experience. You should at minimum understand loops, functions, and conditional statements (if/else). 

Udacity’s [JavaScript Basics course](https://www.udacity.com/course/ud804) and [HTML/CSS course](https://www.udacity.com/course/ud304) are good preparation for this course.","Due to jQuery’s popularity and ease of use, learning jQuery is a must for all front-end web developers. jQuery makes selecting DOM elements and manipulating them simple by providing a consistent API that works across all browsers.

Proficiency in using jQuery is an important skill that can speed up your development time and opens up a world of useful plugins.",False,"In this course, you will learn how to use jQuery to select and navigate to DOM elements within your page, how to manipulate DOM elements by altering attributes, how to dynamically change content and how to add/remove DOM elements.

Most importantly, you'll practice making sense of jQuery's documentation so that you'll be able to go beyond what you learn here and take advantage of jQuery's full suite of features!

### Lesson 1: the DOM, $ and Selectors

* The jQuery Object ($)
* Basic DOM Structure
* Selectors
* Filters

### Lesson 2: DOM Manipulation

* Reading jQuery Documentation
* Accessing HTML Attributes and Content
* Modifying HTML Attributes and Content
* Adding and Removing DOM Elements
* Iterating with .each()
* Using jQuery to run on DOM ready",,False,2,days,False
ud248,"Make Your Own 2048",https://www.udacity.com/course/make-your-own-2048--ud248?utm_medium=referral&utm_campaign=api,"Your Tiles. Your Styles.",beginner,True,https://lh4.ggpht.com/kJEnfqhPvtm4m3EneSZ4fWYGS8lW4YNhEjk6zPkyrQaBUHc-2Y_ElDic99NHI0h-UBLXVbRCjFybFvrWxdk=s0#w=970&h=485,https://lh6.ggpht.com/B1RP3M4ix4ci0mRVdw416va2XUh-AawyATAFkcFakg1lqcNRRTtmkFbx15em3cxAmfogB0z7113fVJctfg=s0#w=970&h=485,https://www.youtube.com/watch?v=915_kRZ6Hfc,"Ten minutes into this class you will make your own completely personalized version of the insanely addictive game <a href=""http://gabrielecirulli.github.io/2048/"" target=""_blank"">2048</a>. Even if you've never coded before. Pretty cool, no?

You'll do this by making small (but important) modifications to the source code for the original 2048 game. If this sounds intimidating, don't worry. We'll teach you the basics of HTML and CSS and how they interact with Javascript (don't worry if that sentence doesn't mean anything to you yet. It will soon).

The purpose of this class is to have fun learning how to quickly and easily take an existing open source program, make some changes, and create something that looks and feels completely new. The game you create will be mobile friendly (you can play it on your phone!) and totally shareable.","Ten minutes into this class you'll make your own completely personalized version of the insanely addictive game 2048. Even if you've never coded before. Pretty cool, no?","Nothing! 

Really. This course is for complete beginners. It is designed to help someone who has never seen computer code take their first steps into the world of programming and web-development.","**In this course, you'll learn:**

* How a computer program works (specifically small web applications like the 2048 game).
* What HTML, CSS, and Javascript are and how they interact to make a functioning web application.
* How to make small changes to HTML and CSS files that have **very large** changes in a program (large enough to turn the original 2048 game into a drastically different <a href=""http://2048-class.github.io/2048/"" target=""_blank"">Udacity version</a>).
* How to use Github to make a copy of an open-source program, make changes to that copy, create your own version, and then host that version so you can share it with your friends.
* Why open-source is such an amazing idea :)",False,"### Lesson 1: Exploring the HTML and CSS
You will create our own version of 2048 by making changes to the existing HTML and CSS files. Within 10 minutes, you'll have your own game. Within an hour, you're friends will be playing **your** 2048 game (fun bonus: your game will be totally mobile-friendly). The topics we'll cover are:

* What is open source? 
* What is HTML? What is CSS? Javascript? 
* How do these three interact to lead to a fully functioning web/mobile app?
* What is Github?
* How do I get someone else's code, make changes, and create my own version?
* How do I host and share my game?",,False,1,days,False
ud256,"Networking for Web Developers",https://www.udacity.com/course/networking-for-web-developers--ud256?utm_medium=referral&utm_campaign=api,"TCP, IP, What's Underneath HTTP?",beginner,False,https://lh3.googleusercontent.com/D4lIL8SEeU-yFKUv2cQE_iY5-1LvtR-oTsMA8MjFSvL7XiEdcxpnwqfXUNk3URzTBri-rEFEecvfy0oEhbU=s0#w=1724&h=1060,https://lh3.googleusercontent.com/nTQ0cilhpLHKNp_ehiUZKkbjEHZ1jcI1B0YjjsK4SIbtHeMKLQVSrEh9X1_11yR6pe8YTeNr1s09cPQiJs8=s0#w=2400&h=540,,"How does the Web work? Under the hood of HTTP there's a whole stack of networking protocols.

Explore the underpinnings of the net with tools like `traceroute`, `tcpdump`, and `nc`.","You've used the Internet. Now find out more about how it works.","**You have written code that makes use of HTTP.** As a beginning backend developer, you may have written code that accepts or performs HTTP requests. But you'd like to know more about what's going on ""under the hood"" when you use HTTP.

**You can use the Linux command line.** To follow the material in this course, you'll need to enter commands into the shell and make sense of their output. You'll use command-line programs like `ping` and `tcpdump` to gather information about computers on the network.

**You have used the Internet.** If you're looking at this page, you pass this requirement! This course does not assume that you are configuring routers or building firewalls in your spare time. It is really intended as an introduction.

**You have access to a Linux system to run commands.** If you're taking this course as part of a Udacity Nanodegree program, you can use the Linux-based development environment that we have set up for you. [Find out how to access it here.](https://www.udacity.com/account#!/development_environment) Many of the practical exercises in this course can be done using another Unix-like shell environment, but you may get different results for some exercises.","As a web developer, it's handy to know a bit about the TCP/IP stack, IP addressing, DNS, and other protocols that underlie the Web technologies you use.",False,"### Lesson 1: From Ping to HTTP

In this lesson you'll begin using command-line tools to explore the network: `ping` to check hosts, and `nc` (netcat) to manually communicate with web servers and to emulate a web server. You'll also learn about port numbers and the layering of HTTP on top of TCP.

### Lesson 2: Names and Addresses

In this lesson you'll learn about the Domain Name System (DNS). Optionally, you'll register your own domain name for your web server. You'll also learn more about the binary representation of IP addresses.

### Lesson 3: Addressing and Networks

In this lesson you'll learn more details about Internet addressing: network blocks, interfaces, network address translation (NAT), and IPv6.

### Lesson 4: Protocol Layers

In this lesson you'll use `tcpdump` to examine the packets that make up the requests and responses for three protocols: ping, DNS, and HTTP. You'll learn more about how TCP sessions work.

### Lesson 5: Big Networks

In this lesson you'll learn more about bandwidth, latency, filtering, and other properties that matter when users are accessing your application over the Internet.",,False,2,weeks,False
ud257,"A/B Testing",https://www.udacity.com/course/ab-testing--ud257?utm_medium=referral&utm_campaign=api,"Online Experiment Design and Analysis",intermediate,False,https://lh3.googleusercontent.com/FLR8sZtru0MSoate5rC2zIXWVHYqHaJVrRAQgK_ms9VkEBc_sy1sCBytGQMQlAlafdb_IP-IXRZcszor0kg=s0#w=1726&h=1061,https://lh3.googleusercontent.com/azCLWUGSHFxBz6I49NATWEuWwfrwfwyniwFQ2dbBn9cLOy6RrgxQWjB-TEM4xgncFwQaJRN86_6AKXeiSwEN=s0#w=4672&h=968,,"This course will cover the design and analysis of A/B tests, also known as split tests, which are online experiments used to test potential improvements to a website or mobile application. Two versions of the website are shown to different users - usually the existing website and a potential change. Then, the results are analyzed to determine whether the change is an improvement worth launching. This course will cover how to choose and characterize metrics to evaluate your experiments, how to design an experiment with enough statistical power, how to analyze the results and draw valid conclusions, and how to ensure that the the participants of your experiments are adequately protected.","This course will cover the design and analysis of A/B tests, which are online experiments used throughout tech industry by companies like Google, Amazon, and Netflix.","This course requires introductory knowledge of descriptive and inferential statistics. If you haven't learned these topics, or need a refresher, they are covered in the Udacity courses <a href=""https://www.udacity.com/course/ud201"" target=""_blank"">Inferential Statistics</a> and <a href=""https://www.udacity.com/course/ud827"" target=""_blank"">Descriptive Statistics</a>.

Prior experience with A/B testing is not required, and neither is programming knowledge.","A/B testing, or split testing, is used by companies like Google, Microsoft, Amazon, Ebay/Paypal, Netflix, and numerous others to decide which changes are worth launching. By using A/B tests to make decisions, you can base your decisions on actual data, rather than relying on intuition or HiPPO's - the highest paid person's opinion! Designing good A/B tests and drawing valid conclusions can be difficult. You can almost never measure exactly what you want to know (such as whether the users are ""happier"" on one version of the site), so you need to find good proxies. You need sanity checks to make sure your experimental set-up isn't flawed, and you need to use a variety of statistical techniques to make sure the results you're seeing aren't due to chance. This course will walk you through the entire process. At the end, you will be ready to help businesses small or large make crucial decisions that could significantly affect their future!",True,"### Lesson 1: Overview of A/B Testing
This lesson will cover what A/B testing is and what it can be used for. It will also cover an example A/B test from start to finish, including how to decide how long to run the experiment, how to construct a binomial confidence interval for the results, and how to decide whether the change is worth the launch cost.

### Lesson 2: Policy and Ethics for Experiments
This lesson will cover how to make sure the participants of your experiments are adequately protected and what questions you should be asking regarding the ethicality of experiments. It will cover four main ethics principles to consider when designing experiments: the risk to the user, the potential benefits, what alternatives users have to participating in the experiment, and the sensitivity of the data being collected.

### Lesson 3: Choosing and Characterizing Metrics
One of the most important and time-consuming pieces of designing an A/B test is choosing and validating metrics to use in evaluating your experiment. This lesson will cover techniques for brainstorming metrics, what to do when you can't measure what you want directly, and characteristics you should consider when validating your metrics.

### Lesson 4: Designing an Experiment
This lesson will cover how to design an A/B test. This includes how to choose which users will be in your experiment and control group - different online definitions of a ""user"", and what effects different choices will have on your experiment. It will also cover when to  limit your experiment to a subset of your entire user base, how to calculate how many events you will need in order to draw strong conclusions from your results, and how this translates into how long to run the experiment. Finally, the lesson will cover how various design decisions affect the size of your experiment, so you will know which decisions to revisit if you need results more quickly.

### Lesson 5: Analyzing Results
This lesson will cover how to analyze the results of your experiments. Step one is always to run some sanity checks so that you can catch problems with your experiment set-up. Then, you will learn how to check conclusions with multiple methods, including a hypothesis test on the effect size and a binomial sign test, if you get results that surprise you. You will also learn how measuring multiple metrics for the same experiment can make analysis difficult, and some techniques for handling multiple metrics. Finally, you will learn about several analysis ""gotchas"", and what to do if you see them, including how Simpson's Paradox can affect A/B tests, and why even statistically significant results might disappear when you launch.

### Final Project: Design and Analyze an A/B Test
Make design decisions for an A/B test, including which metrics to measure and how long the test should be run. Analyze the results of an A/B test that was run by Udacity and recommend whether or not to launch the change.",,False,1,months,True
ud257-certified,"A/B Testing (Certified Course)",https://www.udacity.com/course/ab-testing-certified-course--ud257-certified?utm_medium=referral&utm_campaign=api,"Online Experiment Design and Analysis",intermediate,False,https://lh3.googleusercontent.com/OhIEMkVWidP9AhvFgBv7bB7RyJNkjh0v6_Zalap3f73wsSx6WhULPYaIt1OvCU4YMI1bx08X3lXR64tfvUdv=s0#w=1726&h=1061,https://lh3.googleusercontent.com/0qED42VPRD1ikk2gicsUDeygQ6uFp8AT7wu1Yq-TeKhQ3kLaqDYQtUXe4UPhNY502Oprgk1fcFo0YTSDRsc5=s0#w=1170&h=320,,"Test course only - please ignore if you see this","Test course only - please ignore if you see this","Test course only - please ignore if you see this","Test course only - please ignore if you see this",False,"Test course only - please ignore if you see this","Test course only - please ignore if you see this",True,1,months,False
ud262,"Machine Learning",https://www.udacity.com/course/machine-learning--ud262?utm_medium=referral&utm_campaign=api,"Supervised, Unsupervised & Reinforcement",intermediate,False,https://lh3.ggpht.com/qYa_klGgwhsrYg9HIo6U7ln4B10p1zJvNy5i_0iyowC8RiRMJ8c2mfJToAqOA8SRS36ziDkGmluycIj-GQ=s0#w=1150&h=706,https://lh3.ggpht.com/dwxey9JbdCOxTqrLCwfmHEKWLHM6Y54cyqsiAMMlEcmx7hhnlE-7B31_fzxggqmLD0QEI5FtNteIHiZEmuUW=s0#w=4680&h=968,,"<i>This class is offered as CS7641 at Georgia Tech where it is a part of the [Online Masters Degree (OMS)](http://www.omscs.gatech.edu/). Taking this course here will not earn credit towards the OMS degree.</i>

Machine Learning is a graduate-level course covering the area of Artificial Intelligence concerned with computer programs that modify and improve their performance through experiences. 

The first part of the course covers Supervised Learning, a machine learning task that makes it possible for your phone to recognize your voice, your email to filter spam, and for computers to learn a bunch of other cool stuff.

In part two, you will learn about Unsupervised Learning. Ever wonder how Netflix can predict what movies you'll like? Or how Amazon knows what you want to buy before you do? Such answers can be found in this section!

Finally, can we program machines to learn like humans? This Reinforcement Learning section will teach you the algorithms for designing self-learning agents like us!","In this course, you'll learn how to apply Supervised, Unsupervised and Reinforcement Learning techniques for solving a range of data science problems.","A strong familiarity with Probability Theory, Linear Algebra and Statistics is required. An understanding of [Intro to Statistics](https://www.udacity.com/course/st101), especially [Lessons 8, 9 and 10](https://www.udacity.com/course/viewer#!/c-st101/l-48738235/m-48688822), would be helpful.

Students should also have some experience in programming (perhaps through [Introduction to CS](https://www.udacity.com/course/cs101)) and a familiarity with Neural Networks (as covered in [Introduction to Artificial Intelligence](https://www.udacity.com/course/cs271)).","You will learn about and practice a variety of Supervised, Unsupervised and Reinforcement Learning approaches. 

Supervised Learning is an important component of all kinds of technologies, from stopping credit card fraud, to finding faces in camera images, to recognizing spoken language. Our goal is to give you the skills that you need to understand these technologies and interpret their output, which is important for solving a range of data science problems. And for surviving a robot uprising.

Closely related to pattern recognition, Unsupervised Learning is about analyzing data and looking for patterns. It is an extremely powerful tool for identifying structure in data. This section focuses on how you can use Unsupervised Learning approaches -- including randomized optimization, clustering, and feature selection and transformation -- to find structure in unlabeled data.

Reinforcement Learning is the area of Machine Learning concerned with the actions that software agents ought to take in a particular environment in order to maximize rewards. You can apply Reinforcement Learning to robot control, chess, backgammon, checkers, and other activities that a software agent can learn. Reinforcement Learning uses behaviorist psychology in order to achieve reward maximization. This section also includes important Reinforcement Learning approaches like Markov Decision Processes and Game Theory.",False,"###Supervised Learning
- Lesson 0: Machine Learning is the ROX
- Lesson 1: Decision Trees
- Lesson 2: Regression and Classification
- Lesson 3: Neural Networks
- Lesson 4: Instance-Based Learning
- Lesson 5: Ensemble B&B
- Lesson 6: Kernel Methods and Support Vector Machines (SVM)s
- Lesson 7: Computational Learning Theory
- Lesson 8: VC Dimensions
- Lesson 9: Bayesian Learning
- Lesson 10: Bayesian Inference

###Unsupervised Learning
- Lesson 1: Randomized optimization
- Lesson 2: Clustering
- Lesson 3: Feature Selection
- Lesson 4: Feature Transformation
- Lesson 5: Information Theory

###Reinforcement Learning
- Lesson 1: Markov Decision Processes
- Lesson 2: Reinforcement Learning
- Lesson 3: Game Theory
- Lesson 4: Game Theory, Continued",,False,4,months,False
ud281,"High Performance Computing",https://www.udacity.com/course/high-performance-computing--ud281?utm_medium=referral&utm_campaign=api,"Offered at Georgia Tech as CS 6220",advanced,False,https://lh3.googleusercontent.com/dd4IV3owDGDCyA3rmrTcmTuTlFSinNXTcjkcyxxBhqGEeNobLr2Ol_qv75V_6V8y1pvD0fa4e9aGgZbyfKo=s0#w=1292&h=790,,,"The goal of this course is to give you solid foundations for developing, analyzing, and implementing parallel and locality-efficient algorithms. This course focuses on theoretical underpinnings. To give a practical feeling for how algorithms map to and behave on real systems, we will supplement algorithmic theory with hands-on exercises on modern HPC systems, such as Cilk Plus or OpenMP on shared memory nodes, CUDA for graphics co-processors (GPUs), and MPI and PGAS models for distributed memory systems.

This course is a graduate-level introduction to scalable parallel algorithms. “Scale” really refers to two things: efficient as the problem size grows, and efficient as the system size (measured in numbers of cores or compute nodes) grows. To really scale your algorithm in both of these senses, you need to be smart about reducing asymptotic complexity the way you’ve done for sequential algorithms since CS 101; but you also need to think about reducing communication and data movement. This course is about the basic algorithmic techniques you’ll need to do so.

The techniques you’ll encounter covers the main algorithm design and analysis ideas for three major classes of machines: for multicore and many core shared memory machines, via the work-span model; for distributed memory machines like clusters and supercomputers, via network models; and for sequential or parallel machines with deep memory hierarchies (e.g., caches). You will see these techniques applied to fundamental problems, like sorting, search on trees and graphs, and linear algebra, among others. The practical aspect of this course is implementing the algorithms and techniques you’ll learn to run on real parallel and distributed systems, so you can check whether what appears to work well in theory also translates into practice. (Programming models you’ll use include Cilk Plus, OpenMP, and MPI, and possibly others.)","This course will give you solid foundations for developing, analyzing, and implementing parallel and locality-efficient algorithms.  Offered at Georgia Tech as CS6220","A “second course” in algorithms and data structures, a la Georgia Tech’s
CS 3510-B or Udacity’s Intro to Algorithms

 For the programming assignments, programming experience in a “low-
level” “high-level” language like C or C++

 Experience using command line interfaces in *nix environments (e.g.,
Unix, Linux)

Course readiness survey. 
You should feel comfortable answering questions like those found in the Readiness Survey Course, 
<a href=""https://www.udacity.com/course/viewer#!/c-ud266"" target=""_blank"">HPC-0</a>",,False,"The course topics are centered on three different ideas or extensions to the usual serial RAM model you encounter in CS 101. Recall that a serial RAM assumes a sequential or serial processor connected to a main memory.

* Unit 1: The work-span or dynamic multithreading model

In this model, the idea is that there are multiple processors connected to the main memory. Since they can all “see” the same memory, the processors can coordinate and communicate via reads and writes to that “shared” memory.

Sub-topics include:

** Intro to the basic algorithmic model
** Intro to OpenMP, a practical programming model
** Comparison-based sorting algorithms
** Scans and linked list algorithms
** Tree algorithms
** Graph algorithms, e.g., breadth-first search

* Unit 2: Distributed memory or network models

In this model, the idea is that there is not one serial RAM, but many serial RAMs connected by a network. In this model, each serial RAM’s memory is private to the other RAMs; consequently, the processors must coordinate and communicate by sending and receiving messages.

Sub-topics include:

** The basic algorithmic model
** Intro to the Message Passing Interface, a practical programming model
** Reasoning about the effects of network topology
** Dense linear algebra
** Sorting
** Sparse graph algorithms
** Graph partitioning

* Unit 3: Two-level memory or I/O models

In this model, we return to a serial RAM, but instead of having only a processor connected to a main memory, there is a smaller but faster scratchpad memory in between the two. The algorithmic question here is how to use the scratchpad effectively, in order to minimize costly data transfers from main memory.

Sub-topics include:

** Basic models
** Efficiency metrics, including “emerging” metrics like energy and power
** I/O-aware algorithms
** Cache-oblivious algorithms",,True,6,months,False
ud292,"HTML5 Canvas",https://www.udacity.com/course/html5-canvas--ud292?utm_medium=referral&utm_campaign=api,"From Pixels to Animation!",beginner,False,https://lh4.ggpht.com/eypKKAxmyK2LpMKULiQy76aAkS5M5-da0k9eUNP2HeK4bk7_ZgjAV65pAwSu-hjWM-sSwdUJkNeZAG8Wx8o=s0#w=1724&h=1060,https://lh6.ggpht.com/I-TN7O_c6sPrp1USRyDMPcBohqlguELOAxhLJXt9QB94IJxaxiPK0x9E7mpgidNSmQS7PeD8b7ZawUc7PJ4p=s0#w=4680&h=968,,"Canvas is an HTML5 element which gives you drawable surface inside your web pages you can control with JavaScript. Powerful enough to use for compositing images and even creating games.

In this course, through several sample projects, you’ll learn how to use the canvas; how to make compositions using shapes, images, and text; how to create effects and filters on images and how to create animations.","Learn how you can use HTML5 Canvas to create and modify images or even interactive animations.","To succeed in this course, we expect you to have some HTML and JavaScript experience. You should at minimum understand loops, functions, and conditional statements(if/else). 

Udacity’s [JavaScript Basics course](https://www.udacity.com/course/ud804) and [HTML/CSS course](https://www.udacity.com/course/ud304) are good preparation for this course.","You should take this course if you want to move beyond static HTML tag content and build on your JavaScript skills to make interactive and engaging experiences. Maybe you want to start on the journey of creating a game or complex animations, maybe you want to create visually compelling compositions like infographs, or maybe you just want to make memes. Canvas to the rescue.

*This is a recommended course for the <a href=""https://www.udacity.com/course/nd001"">Front-End Web Developer</a> nanodegree, and will help you complete the Frogger project.*",False,"You’ll learn how the Canvas 2D API works and how to use it to create interesting applications. Each sample project will expose you to different aspects of HTML5 Canvas that you can use to make your own applications.

### Lesson 1: HTML5 Canvas Basics

In this lesson, we’ll discuss what the Canvas is, how it affects graphics in the browser and what makes it truly awesome. We’ll make compositions with text and images (e.g. memes) as we learn the API.

### Lesson 2: From Pixels to Animation

In this lesson, we’ll learn about how images are stored by the Canvas2D context, how to modify them on a pixel level by applying various effects and filters, and how to create animations.",,False,2,weeks,False
ud299,"Configuring Linux Web Servers",https://www.udacity.com/course/configuring-linux-web-servers--ud299?utm_medium=referral&utm_campaign=api,"Your First Ubuntu Server",advanced,False,https://lh3.googleusercontent.com/C1226nashMhJjzL3Ils4ym5FjxCU6Gi7y4HsZd-CblfGfMOuInXNazEKHDUr4JAoS3w7YsN6Ju39jWwg9Q=s0#w=1920&h=1080,https://lh3.googleusercontent.com/J07bIb5_qaxgxyF7qTU3v3EgDal_5ugqJN0CJ_DYd_8Ct6wdZ5B05nvclkC_S8qOgO0F0qk8hE-5MP4E2w=s0#w=4680&h=968,,"In this course you'll learn the basic Linux fundamentals every web developer needs to know to share their web applications with the world! You'll get a basic Python WSGI application up and running within a Vagrant virtual machine that queries data from a PostgreSQL database.

You'll start by exploring various Linux distributions and learning the differences between a number of them. You'll then explore how the Linux operating system differs from other operating systems you may be more familiar with. With this base knowledge, you'll then move into Linux security - covering topics such as file permissions, user management, package management and configuring firewalls. Finally, you'll transform a safe and secure baseline server into a web application server by installing and configuring the Apache HTTP Server and PostgreSQL database server.","Serve a data-driven web application as you become acquainted with, configure and finally secure a Ubuntu Linux web application server.","You should be comfortable with your terminal and working within a shell, if you need a refresher take a look at our Intro to the Shell.

To actually get a web application up and running you should be familiar with the Python programming language and PostgreSQL. <a href=""https://www.udacity.com/course/programming-foundations-with-python--ud036"" target=""_blank"">Programming Foundations with Python</a> and <a href=""https://www.udacity.com/course/intro-to-relational-databases--ud197"" target=""_blank"">Intro to Relational Databases</a> can help you get up to speed if you feel you need some additional practice.","A basic understanding of linux systems administration is required to not only get your web application up and running for the world to see, but also to ensure it continues operating efficiently. In this course, you’ll explore a bare-bones linux system and how it differs from desktop environments you are currently familiar with. You’ll then address a number of security concerns full stack developers must contend with and, finally, serve one of your applications from your very own piece of the Internet.",False,"## Overview

This course consists of 3 lessons which will take you from absolutely zero knowledge about the Linux operating system all the way to hosting your very own data-driven application that is publically accessible to everyone in the world!

## Lesson 1 - Intro to Linux

In this lesson you will be introduced to the Linux operating system and the various available distributions. You will then setup your very own Linux virtual machine on your own computer and explore that system, learning how the filesystem is organized and identifying key files.

## Lesson 2- Linux Security

As you unleash your new server onto the Internet you'll need to be a good citizen - and this means, **security**! In this lesson, you'll learn how to execute administrative tasks, update the software on your system, install new software, and manage users. You'll then learn how to implement even stronger authentication mechanisms, how to interpret Linux file permission and, finally, how to configure a firewall to keep your system secure.

## Lesson 3 - Web Application Servers

In this lesson you'll transform your secure and safe barebones server into a fully functional web application server by installing and configuring the Apache HTTP Server and PostgreSQL database server. You'll then write a very basic Python WSGI application that can query a database and present that data upon a web request.",,False,1,weeks,False
ud304,"Intro to HTML and CSS",https://www.udacity.com/course/intro-to-html-and-css--ud304?utm_medium=referral&utm_campaign=api,"Not Your Typical Intro to Web Dev",beginner,False,https://lh6.ggpht.com/KHjK8i_BBLXVYAverR73RvYt06rPk7JnKQWcUIyzMYUnVSPL_zC_asTuM-e69zkibagGRnC5u-bB04nPTQ=s0#w=1278&h=786,https://lh5.ggpht.com/hsbaPB2ONN_pDAljOlO6i5gWjneQcRnVnn5j4vmYqoqkASy2gcfKnUSogEmFcXAVwZFx1ZL2Pen-toR1zQNS=s0#w=4680&h=968,,"HTML and CSS are markup languages and the building blocks that make up the web. This course is called ""Not your Typical Intro"" because it does not follow the usual pattern of other courses and tutorials that you find on the Internet. Usually HTML and CSS are taught with a focus on language syntax. But knowing syntax alone does not enable you to create a webpage from a design. You need to know where to start and how to approach the task, in other words - you need to learn how to think like a front-end developer. 

In this course you will learn how to convert digital design mockups into static web pages. We will teach you how to approach page layout, how to break down a design mockup into page elements, and how to implement that in HTML and CSS.

You will also learn about responsive design techniques, which are increasingly important in a world where mobile devices and TV screens are used more and more often to look for information and entertainment.","Learn how to convert digital design mockups into static web pages and how to build a responsive portfolio site to showcase your work.","You should have ability and skills to download and use a text editor for editing your web pages, we recommend <a href=""http://www.sublimetext.com/"" target=""_blank"">Sublime Text</a> or <a href=""https://atom.io/"" target=""_blank"">Atom</a>. You can use another text editor if you want, but it should have the ability to highlight code syntax for your own convenience.

You should be able to download and install <a href=""https://www.google.com/intl/en/chrome/browser/"" target=""_blank"">Google Chrome</a>, which is the browser we’ll be exploring developer tools with in this course.","Front-end Web Developers must have a fundamental understanding of HTML and CSS, which we’ll accomplish in this course by converting digital design mockups into static web pages. To build the web pages you will use HTML, CSS and Bootstrap, the popular Twitter CSS framework.

After completing this course you will be able to build a responsive portfolio site with your own CSS framework. You'll also have the functionality in place to add future projects to your portfolio. Most importantly, you will have an understanding of the DOM and how HTML, CSS, and JavaScript relate to each other.

This course's project is part of our <a href=""https://www.udacity.com/course/nd001"" target=""_blank"">Front-End Web Developer</a> Nanodegree.",True,"### Lesson 1 -  <a href=""https://udacity.com/course/viewer#!/c-ud304/l-2617868617"">From Design to Code</a>

Diligently employ a code/test/refine strategy as you precisely and deliberately translate initial design documents into static web pages. You'll also investigate the Document Object Model (DOM) and its implications for web development.

### Lesson 2 - <a href=""https://udacity.com/course/viewer#!/c-ud304/l-2810388540"">Your Own Framework</a>

Take pride in creating and personalising your own multi-platform, responsive CSS framework for publishing your professional portfolio projects to the web.

### Lesson 3 - <a href=""https://udacity.com/course/viewer#!/c-ud304/l-2794148535"">Learning and Using Bootstrap</a>

Strategically investigate an existing professional CSS framework as you use it to build a website using responsive design principles while maintaining code readability.",,True,3,weeks,False
ud325,"iOS Persistence and Core Data",https://www.udacity.com/course/ios-persistence-and-core-data--ud325?utm_medium=referral&utm_campaign=api,"Learn the top 3 technologies to store an",advanced,False,https://lh3.googleusercontent.com/kW90RInKV6-0Rjlw-MDzDzx7azeaeUOPr6DFnnORdIwpdOxz1vW4RF8YokSl3IKxeVyY_0tDHFao_YOJdQA=s0#w=1440&h=913,https://lh5.ggpht.com/7yJNi6zmwj-XZUIVoy6GxsRu5eqE7IiiNQzlasZqWSZ4BPvU7VIWus1c3aGRhnPGzD45TlvGpcSplKJg-uU=s0#w=4680&h=968,,"Persisting data is a core skill for any iOS developer. This course will teach you three techniques for storing data to your device’s hard drive: NSUserPreferences for small amounts of data, the Sandbox for files and Core Data when you have to play in the Big Leagues!","Persisting data is a core skill for any iOS developer. Learn how to store app data to your device using three common techniques: NSUserDefaults, Sandbox & Core Data.","This course assumes extensive iOS experience. Specifically, you’ve built several apps, know how to use core iOS libraries, and are familiar with networking and MVC design principles. [Introduction to iOS App Development with Swift](https://www.udacity.com/course/ud585), [UIKit Fundamentals](https://www.udacity.com/course/ud788), and [iOS Networking with Swift](https://www.udacity.com/course/ud421) are good courses to take if you need to familiarize yourself with these concepts.

The course also assumes basic familiarity with git. Specifically, you will need to be able to clone git repositories and checkout branches specific to each lesson. [How to Use Git & GitHub](https://www.udacity.com/course/ud775) is a great option if you need to brush up on these skills.

You will need access to a Mac computer running OS X 10.9 or later. However, you do not need an iPad or iPhone to complete the activities. All exercises can be completed using the iOS simulator built into Xcode.

See the [Technology Requirements](https://www.udacity.com/tech-requirements) for using Udacity.","Just like computers, your iPhone has two types of memory: main memory (RAM) and the hard drive. In all the apps you’ve written, you’ve interacted with RAM, but this memory is limited, and it’s important that the apps you design use it as efficiently as possible. To use the RAM efficiently it is important to be able to store data on the hard drive.

It is also important for your apps to maintain state when they are turned off. The apps you’ve built probably aren’t persistent, meaning that they don’t save their state to the device’s hard drive. As RAM is volatile, data is lost when the app stops running. In this course, you’ll learn how to persist the state of the device using NSUserDefaults and Core Data.",False,"###Lesson 1: Simple Persistence
In this lesson, you’ll learn about simple persistence and how to save small pieces of data, like user preferences, using NSUserDefaults.

###Lesson 2: The iOS File System
In this lesson, we’ll discuss the iOS File System, the “sandbox”, and how to access these files using NSFileManager.

###Lesson 3: Comprehensive Persistence: Core Data (Part 1)
IIn this lesson, you’ll be introduced to the Core Data framework, Apple’s favorite framework for the model class. We’ll learn about the Core Data stack, how to create a model and managed model objects, and begin work on our very own note-taking app.

###Lesson 4: Comprehensive Persistence: Core Data (Part 2)
In this lesson, we’ll continue our implementation of Core Data and learn how tableviews adjust their display, how a user can add new notes to the app, how we actually save and persist changes, and the important role Core Data plays in memory management.

###Lesson 5: Important Extras 

In this lesson, we’ll wrap up Core Data and discuss some important aspects of maintaining a persistent app.

###Lesson 6: Core Data & Concurrency
Some tasks in Core Data can take pretty long, especially if your data model is complex or have a huge amount of data. Back in the Grand Central Dispatch course, we've seen how to send lengthy tasks to a background queue. In this lesson, we'll learn how Core Data tasks can run in different queues in a safe and efficient way.",,False,2,months,False
ud330,"Authentication & Authorization: OAuth",https://www.udacity.com/course/authentication-authorization-oauth--ud330?utm_medium=referral&utm_campaign=api,"Implementing Web Security with OAuth 2.0",intermediate,False,https://lh3.googleusercontent.com/RqJla1FbVoOuOFO78K1eKBiAeSa1iTsmHqZ1MQFB43xY2DwTCxZd2QFOo73YxOHeDJ-CPbIm-H-NbRPNSnU=s0#w=1758&h=1080,https://lh3.googleusercontent.com/Co20vEpuixh-FEdRQla_LpDf7SMIuAl5jlb8H6Yz-cRenMgRkTcN4vxUEpgk7vAeplFOu5_VNwwl0BmGep1O=s0#w=4680&h=968,,"As a Python programmer, leveraging Flask allows you to quickly and easily build your own web applications. But before you share your apps on the Internet you should protect your users' data, ensuring information stored on your site is safe from unwanted manipulation. You could implement web security and permissions on your own, but relying on trusted providers is a faster, safer, and easier way to allow users to login to your application - without having to create and maintain another account, profile, and password. 

In this course, you will learn to implement the OAuth 2.0 framework to allow users to securely login to your web applications. You'll be provided a  <a href=""http://udacity-oauth.herokuapp.com"" target=""_blank"">restaurant menu application</a> created in Flask. By the end of this course, you will write the necessary code to implement Google+ Sign-In and Facebook Login in options so users can create restaurant menus that are viewable by everyone but only modifiable by the original creator.","Learn to implement the OAuth 2.0 framework to allow users to securely and easily login to your web applications.","This course was built to expand upon the concepts introduced in <a href=""https://www.udacity.com/course/ud088"" target=""_blank"">Full Stack Foundations</a>, specifically: 

* performing CRUD operations
* making use of templates
* developing with the Flask framework

Additionally, HTML, JavaScript, AJAX are heavily used in this course.  A basic understanding of these technologies is needed to get the most out of these lectures.

If you'd like to refresh your HTML knowledge start with our <a href=""https://www.udacity.com/course/ud304"" target=""_blank"">Intro to HTML and CSS</a> course. You can check out the <a href=""https://www.udacity.com/course/ud804"" target=""_blank"">JavaScript Basics</a> and <a href=""https://www.udacity.com/course/ud110"" target=""_blank"">Intro to AJAX</a> courses to brush up on these topics as well.","OAuth 2.0 is a popular framework that allows users to login to your web application by using  third party sign ins, from providers they've already created and trust, with the click of a button. And because passwords and sensitive data are never sent, your web application does not have to deal with the complexities of secure password storage and security breaches. Your users can then control the level of access your application has to their data, and change or revoke this access at any point in time.",False,"### Lesson 1 - Authentication vs. Authorization
Learn the difference between the concepts of authentication and authorization and address some major security concerns that developers must protect against when developing a web application.  You will learn how OAuth 2.0 makes implementing security easier for developers and users alike by allowing your users to sign in to your applications while keeping all of the security on well-known and trusted OAuth providers. Finally, you will see OAuth 2.0 in action as you make API requests using Google's OAuth 2.0 Playground.

### Lesson 2 - Creating a Google+ Sign-In
Learn about the different types of security flows your application can implement. You will see how security can be handled by your server, your user's browser, or both depending on the type of security your application needs.  You will then add a Google+ Sign-In to an existing web application and implement a hybridized client/server flow.


### Lesson 3 - Local Permission Systems
Add python code to create server-side rules that will constitute a permission system. This system will limit access of the database for each logged in user based on how the developer designs this code. You will add a User model model to your database to store the credentials, such as username, email, and profile picture, collected from the OAuth provider's API.

###Lesson 4 - Adding Facebook & Other Providers
Learn to implement multiple OAuth providers on your web application. You will add Facebook Login as an alternative sign in option for your users and understand how to use OAuth provider documentation to add as many providers as you see fit for your application.",,False,2,weeks,False
ud359,"Intro to Data Science",https://www.udacity.com/course/intro-to-data-science--ud359?utm_medium=referral&utm_campaign=api,"Learn What It Takes to Become a Data Scientist",intermediate,False,https://lh3.ggpht.com/PGzMw8H7sLoOMDvdpLVdg3rMH7xCnGtC6w5j47_ezPLh61QGgi0pzZoC-vrVUqpXmOggNgJGBcDd-NWC0Og=s0#w=1724&h=1060,https://lh5.ggpht.com/BeeZTWQPl18GIaxjjjfOM7X2hoGqIj_c-wlovtGe-PF4KBEiqFkOjGHfHqUcO-PtZ0KQ6loO3y5bJXrQOJI=s0#w=1170&h=242,https://www.youtube.com/watch?v=ZB38GB4EF7s,"The Introduction to Data Science class will survey the foundational topics in data science, namely:

*   Data Manipulation
*   Data Analysis with Statistics and Machine Learning
*   Data Communication with Information Visualization
*   Data at Scale -- Working with Big Data  

The class will focus on breadth and present the topics briefly instead of focusing on a single topic in depth. This will give you the opportunity to sample and apply the basic techniques of data science.

This course is also a part of our <a href=""https://www.udacity.com/course/nd002"">Data Analyst</a> Nanodegree.","What does a data scientist do? In this course, we will survey the main topics in data science so you can understand the skills that are needed to become a data scientist!","The ideal students for this class are prepared individuals who have:

*   Strong interest in data science
*   Background in intro level statistics
*   Python programming experience
*   Or understanding of programming concepts such as variables, functions, loops, and basic python data structures like lists and dictionaries

If you need to brush up on your programming, we highly recommend [Introduction to Computer Science: Building a Search Engine](https://www.udacity.com/course/cs101). If you need a refresher on statistics, enroll in [Intro to Descriptive Statistics](https://www.udacity.com/course/ud827) and [Intro to Inferential Statisitics](https://www.udacity.com/course/ud201). All three are on Udacity!","You will have an opportunity to work through a data science project end to end, from analyzing a dataset to visualizing and communicating your data analysis.

Through working on the class project, you will be exposed to and understand the skills that are needed to become a data scientist yourself.",False,"### Lesson 1: Introduction to Data Science

- Introduction to Data Science
- What is a Data Scientist
- Pi-Chaun (Data Scientist @ Google): What is Data Science?
- Gabor (Data Scientist @ Twitter): What is Data Science?
- Problems Solved by Data Science 
- Pandas
- Dataframes
- Create a New Dataframe

### Lesson 2: Data Wrangling 

- What is Data Wrangling?
- Acquiring Data
- Common Data Formats
- What are Relational Databases?
- Aadhaar Data 
- Aadhaar Data and Relational Databases
- Introduction to Databases Schemas
- API’s
- Data in JSON Format
- How to Access an API efficiently 
- Missing Values
- Easy Imputation
- Impute using Linear Regression
- Tip of the Imputation Iceberg

### Lesson 3: Data Analysis

- Statistical Rigor
- Kurt (Data Scientist @ Twitter) - Why is Stats Useful?
- Introduction to Normal Distribution
- T Test
- Welch T Test
- Non-Parametric Tests
- Non-Normal Data
- Stats vs. Machine Learning
- Different Types of Machine Learning
- Prediction with Regression 
- Cost Function
- How to Minimize Cost Function
- Coefficients of Determination

### Lesson 4: Data Visualization

- Effective Information Visualization
- Napoleon's March on Russia
- Don (Principal Data Scientist @ AT&T): Communicating Findings
- Rishiraj (Principal Data Scientist @ AT&T): Communicating Findings Well
- Visual Encodings
- Perception of Visual Cues
- Plotting in Python
- Data Scales
- Visualizing Time Series Data

### Lesson 5: MapReduce

- Big Data and MapReduce
- Basics of MapReduce
- Mapper
- Reducer
- MapReduce with Aadhaar Data
- MapReduce with Subway Data",,True,2,months,False
ud381,"Real-Time Analytics with Apache Storm",https://www.udacity.com/course/real-time-analytics-with-apache-storm--ud381?utm_medium=referral&utm_campaign=api,"The ""Hadoop of Real-Time""",intermediate,False,https://lh6.ggpht.com/UfMbnNAjbz9gpWVzFhmYyOJg-5paoozIIkVhKWHAGNLpfaptKrysZxyuiQlqVkYiCHhyBBlJiowyxzHStn0P=s0#w=1748&h=1075,https://lh5.ggpht.com/nTmzg9gnSSpQ9nO1vuyErMxcZFYZtcUn9JMi4e31DyRR8gLYS8ynTTElKwJfEDik9sWFUQAaHmOa_cibkLI=s0#w=1170&h=242,,"The world is trending in real time!  Learn from Twitter to scalably process tweets, or any big data stream, in real-time to drive d3 visualizations using Apache Storm, the “Hadoop of Real Time.”  Storm is free, open source, and fun to use!  Learn from Karthik Ramasamy, Technical Lead of Storm@Twitter, about the distributed, fault-tolerant, and flexible technology used to power Twitter’s real-time data flow pipeline.  Twitter open sourced Storm in 2011, and it graduated to a top-level Apache project in September, 2014.  

Starting from basic distributed concepts presented during our first Udacity-Twitter Storm Hackathon, link Storm concepts to Storm syntax to scalably drive Word Cloud visualizations with Vagrant, Ubuntu, Maven, Flask, Redis, and d3.  Link to the public Twitter gardenhose stream to process live tweets, parse embedded URLs, and calculate Top worldwide hashtags.  Extend beyond Storm basics by exploring multi-language capabilities in Python, integrate open source components, and implement real-time streaming joins.

In your final project, follow real-time trending topics by implementing the data pipeline to visualize only tweets that contain Top worldwide hashtags.  Extend your project by exploring the Twitter API, or any data source, alongside Hackathon participants as they design their own ideas, receive feedback from Karthik, and open source a final project calculating real-time tweet sentiment and geolocation to drive a U.S. Map.","The world is trending in real time! Learn Apache Storm, taught by Twitter, to scalably analyze real-time tweets and drive d3 visualizations. Storm is free, open and fun!","Programming language required: Java

To be successful, you'll need intermediate knowledge of Java. Specifically, this is defined by experience and comfort with Java syntax, compile & run-time error diagnostics and debugging, ability to use javadocs as needed, and intermediate data structures including Arrays, HashMaps, and LinkedLists.  If you need to build these skills, a good starting point is Udacity’s <a href=""https://www.udacity.com/course/cs046"">Introduction to Java</a> with additional comfortability needed identifying and debugging compile & run-time errors.

No prior experience is assumed in Ubuntu, git, Maven, Redis, Flask (Python) or d3 (Javascript).  Python is useful, but optional.  A basic course such as CS101 or OO in Python would be helpful.","Learn by doing! The world is going real time.  Batch processing, popularized by Hadoop, has latency exceeding required real-time demands of modern mobile, connected, always-on users.  Stream processing with seconds-required response time is necessary to meet this demand. Twitter is a world leader in real-time processing at scale.  Learn the future from the company defining it.",False,"###Lesson 1
Join instructor Karthik Ramasamy and the first Udacity-Twitter Storm Hackathon to cover the motivation and practice of real-time, distributed, fault-tolerant data processing.  Dive into basic Storm Topologies by linking to a real-time d3 Word Cloud Visualization using Redis, Flask, and d3. 

###Lesson 2
Explore Storm basics by programming Bolts, linking Spouts, and finally connecting to the live Twitter API to process real-time tweets.  Explore open source components by connecting a Rolling Count Bolt to your topology to visualize Rolling Top Tweeted Words.

###Lesson 3
Go beyond Storm basics by exploring multi-language capabilities to download and parse real-time Tweeted URLs in Python using Beautiful Soup.  Integrate complex open source bolts to calculate Top-N words to visualize real-time Top-N Hashtags.  Finally, use stream grouping concepts to easily create streaming join to connect and dynamically process multiple streams.

###Lesson 4
Work on your final project and we cover additional questions and topics brought up by Hackathon participants.  Explore Vagrant, VirtualBox, Redis, Flask, and d3 further if you are interested!

###Final Project: Construct a Storm Topology
Design a Storm Topology and new bolt that uses streaming joins to dynamically calculate Top-N Hashtags and display real-time tweets that contain trending Top Hashtags.  Post your visualization to the forum and tweet them to your Twitter followers.

###Project Extensions
Use additional features of the real-time Twitter sample stream or use any data source to drive your real-time d3 visualization.",,False,2,weeks,False
ud388,"Designing RESTful APIs",https://www.udacity.com/course/designing-restful-apis--ud388?utm_medium=referral&utm_campaign=api,"Build and Secure a Backend API Server",intermediate,False,https://lh3.googleusercontent.com/YvORzIbvlDMotYr9E2c2Q2oxXvumjkPfGW6c3NEzUeeiW_LomCMlt_BuSAjVS-7BZ9sWVvKDSu3X7vGrGdE=s0#w=2880&h=1628,https://lh3.googleusercontent.com/S-3P56l_jJFXyihXbqU-KL99nMvYUSbVMQd4Fs0-IIYAa2AgkuMWPA3tnoa5CDn8k8_yOvTwFhaenUCr=s0#w=4680&h=968,,"API (Application Programming Interface) endpoints are the connections between your application and the rest of the developer community.  In this course you will learn about writing secure, developer-friendly APIs that will make your back-end application thrive and keep your users happy.  

At the end of this course you will create the back-end for a social application called ""Meet n' Eat"" that matches together users based on their location and food interests.","Build and secure a web server with a RESTful Developer-Friendly API that developers will love to use.","This course assumes you have experience working with the Flask web development framework, SQLAlchemy,  and understand the basics of OAuth 2.0.  Python will be the primary language of instruction for the entirety of this course.

Recommended Courses:<br>
<a href=""https://www.udacity.com/course/full-stack-foundations--ud088"" target = ""_blank"">Full Stacks Foundations</a> <br>
<a href=""https://www.udacity.com/course/authentication-authorization-oauth--ud330"" target=""_blank"">Authentication & Authorization: OAuth</a>","A crucial skill for a back-end or full-stack web developer is the ability to make  applications that are easily accessible and understood for other developers .  Mobile developers, front-end developers and other back-end and full-stack developers all rely on API endpoints to enhance the functionality of their applications.",False,"**Lesson 1 - What's and Why's of APIs**

In Lesson one of this course you will learn about the basics of APIs, why they are important, and how to choose the appropriate technologies for implementing a modern web API.

**Lesson 2 - Accessing Published APIs**

In lesson 2, you will explore published APIs from Foursquare and Google Maps to see how these companies implement their API endpoints and leverage some of this information for our own use.

**Lesson 3 - Creating your own API Endpoints**

In lesson 3 you will use Flask to build your own web server with API endpoints  that follow the constraints to qualify as a RESTful API.  

**Lesson 4 - Securing your API**

In lesson 4, you will learn about API security and add OAuth login, token-based authentication, and rate limiting to your API endpoints.

**Lesson 5 - Writing Developer-Friendly APIs**

In Lesson 5 you will learn some API best practices using real-world examples and  take on the final project.",,False,3,weeks,False
ud405,"2D Game Development with libGDX",https://www.udacity.com/course/2d-game-development-with-libgdx--ud405?utm_medium=referral&utm_campaign=api,"Building Cross Platform Mobile Games",intermediate,False,https://lh3.googleusercontent.com/NpCEkFwRBPGqMad350u4M4b96aenrM1H4qTmccbNkAofealSwciK9lLo9dup_JUtD0zY-teD6I8pjqVPqhk=s0#w=1324&h=814,https://lh3.googleusercontent.com/MGsyC2o7Akj14D3iqViGozRkU8ZUpMQ9YOBqgESPvvR_hqLfTr8fJBnXPGLzqPTkhBW_SfAzWRWWhGAtDfM=s0#w=4680&h=968,,"This course explores how to use LibGDX to build 2D games that run anywhere, from web browsers to mobile devices. We start with simple drawings, and then turn to simple animations, physics, and user input handling. Finally, we create a full game, called Icicles, where icicles rain down from the top of the screen, and the player must dodge them using the arrow keys or by tilting their phone.","This course explores how to use LibGDX to build 2D games that run anywhere, from web browsers to mobile devices. At the end you will create a full game, called Icicles.","This course assumes basic proficiency with Java, including working with collections, implementing interfaces, and extending abstract classes. It is also assumed that you can read and understand documentation and source code.

Proficiency with Git and Android Studio is helpful, but not required.

To brush up on these skills, consider taking [Intro to Java Programming](https://www.udacity.com/course/intro-to-java-programming--cs046), and [How to Install Android Studio](https://www.udacity.com/course/how-to-install-android-studio--ud808).","You already know that making and playing games is the most fun you can have with a computer, but if you need more convincing, you should know that over the last decade, mobile gaming has grown into a huge market. It's full of opportunities for independent game developers, or for people looking to join established gaming studios. 

If you want the skills to turn your game ideas into reality, or get ready to jump into professional game development, this is the course for you.",False,"### Level 1-1: Intro to Cross Platform Game Development

Learn how LibGDX allows you write a game once, then deploy to to both Android and iOS devices, as well as desktop computers and web browsers. Also explore the functionality that the LibGDX game framework provides.

### Level 1-2: Intro to LibGDX

Import and your first LibGDX project, run it on your computer and Android device, and learn the basic structure of a LibGDX game.

### Level 1-3: Drawing

Use the LibGDX ShapeRenderer object to draw some simple shapes (and some not-so-simple fractals).

### Level 1-4: Cameras and Viewports

Use a camera to focus the player's field of view on a portion of a larger game world, and learn to use viewports to simplify camera management.

### Level 1-5: Movement

Create simple animations and physics effects by updating the game world over time. Also learn to break up a complex game into separate screens.

### Level 1-6: User Input

Handle key presses, touches, and accelerometer input.

### Level 1-7: Growing Icicles

Create the core of Icicles, including player controls.

### Level 1-8: Polishing Icicles

Add scoring, a head-up display, and a difficulty select screen.",,False,8,weeks,True
ud406,"How to Make a Platformer Using libGDX",https://www.udacity.com/course/how-to-make-a-platformer-using-libgdx--ud406?utm_medium=referral&utm_campaign=api,"Cross Platform Robot-Blasting Fun",intermediate,False,https://lh3.googleusercontent.com/upXlKrCJ1HcmW97dzI8C-dvofzkucIL5XYrOU1R0SZJ5hThpoHp0kFGZ4rkmw6G2PO7LVXq_ceyt4BIqgnU=s0#w=634&h=390,,,"'2D Game Development with libGDX' explored the basics of the libGDX game framework, from simple drawing to user input. 

This course will use those skills to create a much more sophisticated platforming game called GigaGal. In creating GigaGal, you'll learn about sprite drawing, keeping track of complex game state, controlling interactions between game entities, and also how to load and manage level data.","This course will explore how to create a game called Giga Gal. Giga Gal is a platformer in which you run, collect energy packs, jump a bunch, and shoot enemies.","This course builds on '2D Game Development with libGDX', so taking that course first is strongly recommended. Otherwise, you'll need familiarity with the basics of libGDX. 

This course assumes basic proficiency with Java and Android Studio, including working with collections, implementing interfaces, and extending abstract classes. It is also assumed that you can read and understand documentation and source code.

To brush up on these skills, consider taking Intro to Java Programming and How to Install Android Studio.","Making and playing games is easily the most fun you can have with a computer, but there are real career opportunities here as well. Over the last decade, mobile gaming has grown into a huge market. Independent game developers are enjoying unparalleled success, and established gaming studios are hiring faster than ever.

In the course '2D Game Development with libGDX' you learned to build a simple game. Now, you'll learn to build a platformer. These are the skills you'll need to enter the world of professional game development.",False,"### Level 2-1: Sprites and Animations
Learn to draw using predefined sprites and combine sprites into animations and stretchable nine-patches. Finally, you'll learn to pack many sprites into a texture atlas that can be efficiently loaded by your game.

### Level 2-2: The Player
Create GigaGal and give her the ability to move and jump. You'll add separate sprites for facing left, facing right, standing, and jumping. Then, you will add an animation for GigaGal's walk.

### Level 2-3: The Platforms
Add the platforms to GigaGal and allow GigaGal to jump on them and fall off again.

### Level 2-4: The Camera
Set up the camera to follow GigaGal around the level.

### Level 2-5: The Enemies
Add GigaGal's evil robot adversaries. 
### Level 2-6: The Bullets
Let GigaGal fight back with her arm cannon and create awesome explosions when she scores a hit.

### Level 2-7: Level Loading
With the gameplay complete, add the ability to load level data created in an external tool.

### Level 2-8: Adding the HUD and onscreen controls
Add a score display, lives counter, and on screen controls for mobile players.",,False,8,weeks,True
ud407,"Engagement & Monetization | Mobile Games",https://www.udacity.com/course/engagement-monetization-mobile-games--ud407?utm_medium=referral&utm_campaign=api,"How to make Money with your Games",beginner,False,https://lh3.googleusercontent.com/mvLbJefOKGEDsCd3_qKTJVi3YWRvNGuCC0azxfmcMVsSsOjPxi1YxVzt-UYBt5aGL1Qa67J1ZOrLHrAX9uoF=s0#w=1732&h=1065,,,"At first it may seem strange to consider monetization before a game is even completed, and many developers leave this as an afterthought. But monetization should be built into the fabric of a game from the beginning, because a clearly defined and understood monetization strategy can have tremendous impact on design decisions made during the development process. This kind of forward-thinking approach is especially important in today’s highly competitive game market, and keeping monetization strategy front-of-mind throughout can be the difference between product success and failure. 

This course will teach you how to make your game stand out in a very crowded field, and encourage people to pay for game features that will define the ultimate success of your product.

Currently, most game apps are free to play, and many users are looking for something simple and entertaining without the risk of making a purchase. We'll look at the most successful premium and freemium games, and discuss the most effective strategies for monetization. Our goal in this course is to teach students how to design games that produce sustainable revenue over the long-term.","You will learn the most effective monetization strategies for your game, how to  keep your players interested and engaged, so that your game stands out in the app store.","Some experience with Java, Android Studio, and activities is very helpful for coding in your own ads, otherwise minimal technical experience is required.","Many wonderful games make appearances in the app stores, and while often well-built, aesthetically appealing, and rewarding to play, they generally come and go before you know it. Genuine and sustainable monetization is necessary for your game to be successful over the long-term. 

The skills you learn in this course will enable you to pursue and implement the most effective monetization strategies for your game, build a game that keeps your players interested and engaged, and present your game in  ways that allow it to stand out in the app store. 

You will also learn how to program and use mobile ads in your game.",False,"##Lesson 1
###Engagement 
Students will learn the best design strategies to keep players interested and engaged, and come to understand what it takes to build an appealingly addictive game. We'll talk about designing game  difficulty, and including competition and social networks to get players more involved in your game. Inspiring genuine engagement is critical for a game to produce revenue in the long-term.

##Lesson 2
###Monetization Models 
We'll discuss monetization strategies for both premium games—which cost a set price to download—and free-to-download “freemium” games which rely on things like ads and in-app purchases to generate revenue. Topics will include a comparison of both premium and freemium models, how to make a profit from them, and how to effectively implement ads and in-app purchases.

##Lesson 3
###Best Publishing Practices
Here we’ll look at the final steps you’ll want to take before submitting your game to the app store. This lesson will cover how to get useful player feedback, and how to test out versions of your game with A/B testing. We'll also discuss design strategies for choosing what will appear in the app store—like icons and screenshots—so that your game is appealing to potential players, stands out against the competition, and encourages shoppers to become customers.",,False,3,weeks,True
ud409,"Knowledge-Based AI: Cognitive Systems",https://www.udacity.com/course/knowledge-based-ai-cognitive-systems--ud409?utm_medium=referral&utm_campaign=api,"The Core of Artificial Intelligence",advanced,False,https://lh3.ggpht.com/-JBocyEV8fz8jHy4stIq_HVt-CqCNpvmxwUQuOT7UMiM5zRJ6-5lDI92eUL6Ibvogdhvq2TmpHeR58y9jQqh=s0#w=1724&h=1060,https://lh5.ggpht.com/DV_nU5WyiUQQkG0YLTv9uvkEJMqYPmsTBSOdcq_vwRt23_yT3GoLDPCiNTODkLWUwv2UNyh1aaJjlHjQGm4=s0#w=4680&h=968,,"<i>This class is offered as CS7637 at Georgia Tech where it is a part of the [Online Masters Degree (OMS)](http://www.omscs.gatech.edu/). Taking this course here will not earn credit towards the OMS degree.</i>

This is a core course in artificial intelligence. It is designed to be a challenging course, involving significant independent work, readings, assignments, and projects. It covers structured knowledge representations, as well as knowledge-based methods of problem solving, planning, decision-making, and learning.

The class is organized around three primary learning goals. First, this class teaches the concepts, methods, and prominent issues in knowledge-based artificial intelligence. Second, it teaches the specific skills and abilities needed to apply those concepts to the design of knowledge-based AI agents. Third, it teaches the relationship between knowledge-based artificial intelligence and the study of human cognition.","The twin goals of knowledge-based artificial intelligence (AI) are to build AI agents capable of human-level intelligence and gain insights into human cognition.","A good course on computer programming such as CS 1332 or Udacity’s CS 101 is beneficial for students. An introductory course on Artificial Intelligence, such as Georgia Tech's CS 3600 or CS 6601, is recommended but not required.

To succeed in this course, you should be able to answer 'Yes' to the following four questions:
     
1. Are you comfortable with computer programming?
2. Are you familiar with concepts of data structures and object-oriented programming, such as inheritance and polymorphism?
3. Are you familiar with concepts of algorithms, such as sorting and searching algorithms?
4. Are you confident with either Java or Python?","At the conclusion of this class, you will be able to accomplish three primary tasks. First, you will be able to design and implement a knowledge-based artificial intelligence agent that can address a complex task using the methods discussed in the course. Second, you will be able to use this agent to reflect on the process of human cognition. Third, you will be able to use both these practices to address practical problems in multiple domains.",False,"### Unit 1: Introduction to KBAI and Cognitive Systems.
- Where Knowledge-Based AI fits into AI as a whole
- Cognitive systems: what are they?
- AI and cognition: how are they connected?

### Unit 2: Fundamentals
- Semantic Networks
- Generate & Test
- Means-Ends Analysis
- Problem Reduction
- Production Systems

### Unit 3: Common Sense Reasoning
- Frames
- Understanding
- Common Sense Reasoning
- Scripts

### Unit 4: Planning
- Logic
- Planning

### Unit 5: Learning
- Learning by Recording Cases
- Incremental Concept Learning
- Classification
- Version Spaces & Discrimination Trees

### Unit 6: Analogical Reasoning
- Case-Based Reasoning
- Explanation-Based Learning
- Analogical Reasoning

### Unit 7: Visuospatial Reasoning
- Constraint Propagation
- Visuospatial Reasoning

### Unit 8: Design & Creativity
- Configuration
- Diagnosis
- Design
- Creativity

### Unit 9: Metacognition
- Learning by Correcting Mistakes
- Meta-Reasoning
- AI Ethics",,False,7,weeks,False
ud421,"iOS Networking with Swift",https://www.udacity.com/course/ios-networking-with-swift--ud421?utm_medium=referral&utm_campaign=api,"Web Services, APIs, and JSON",advanced,False,https://lh5.ggpht.com/R20fs5CnxLpzqvacgXY36EIqw0ZGiw3rYYttnI8FBCoXk-jtPEaD37DT6VyxUxwVCGBAD1MbKWeOT4n0GA=s0#w=1670&h=1026,https://lh5.ggpht.com/dmAXbiVqQFXiMpAwgu1HifxPYuOaB_zY_61dP3HrGbbj1vxmqnip-kHY6m9UhhJhIVHksUcBIhFUF4MluCs=s0#w=4680&h=968,,"In this course, you’ll learn how to incorporate networking into your apps, so they can access data from around the world. You’ll learn how to harness the power of APIs to display images and retrieve movie data. At the end of the course, you’ll build the “On the Map” app which allows you to share interesting links, projects, or other information with fellow Udacity students.","Learn how to incorporate networking into your apps to access data from around the world. Build the On the Map app to share location and fun links with fellow students.","**This course assumes prior iOS experience.** Specifically, you’ve built several apps, know how to use core iOS libraries, and are familiar with MVC design principles. <a href=""https://www.udacity.com/course/ud585"" target=""_blank"">Introduction to iOS App Development with Swift</a> and <a href=""https://www.udacity.com/course/ud788"" target=""_blank"">UIKit Fundamentals</a> are good courses to take if you need to familiarize yourself with these concepts. 

The course also assumes basic familiarity with Git. Specifically, you will need to be able to clone Git repositories and checkout branches specific to each lesson. <a href=""https://www.udacity.com/course/ud775"" target=""_blank"">How to Use Git & GitHub</a> is a great option if you need to brush up on these skills.

You will need access to a Mac computer running OS X 10.10 or later. However, you do not need an iPad or iPhone to complete the activities. All exercises can be completed using the iOS simulator built into Xcode.","Without networking, mobile apps can only perceive, process, and present the data that is local to the host device. This greatly restricts the scope of problems which apps can solve and limits their overall utility. By incorporating networking, apps truly become “mobile” -- they can interact with interesting data using popular web services, coordinate multi-user activities, and build experiences that bring users together.

This course will cover concepts fundamental to communication over the network like HTTP, JSON, and authentication. These concepts are also highly transferrable to other platforms, languages, and applications. Additionally, it will mold your understanding of app design, especially when networking constraints are involved.",False,"###Lesson 1: Networking and Web Services
In this lesson, you’ll learn all about networks and how they work. You’ll also build your first app that utilizes a web service: “Sleeping in the Library.” This app uses the Flickr API to pull pictures of people sleeping in libraries.
###Lesson 2: Building “Flick Finder”
In this lesson, you’ll learn how to parse JSON data and display it to a user. You’ll demonstrate these new skills by building the “Flick Finder” app, which displays Flickr images based on a phrase or location.
###Lesson 3: The MovieDB and Authentication
In this lesson, you’ll learn the difference between user and anonymously accessed data. You’ll do so by building the “My Favorite Movies” app that utilizes the Movie Database API.
###Lesson 4: Improving Networking with MVC
In this lesson, you’ll improve on your “My Favorite Movies” app to build the “Movie Manager” app. For this app, we’ll be sure to use good MVC design, and learn what this means from a networking perspective.
###Lesson 5: Preparing for “On the Map”
In this lesson, you’ll start on your final project app, “On the Map.” You’ll also learn about network reliability, and how your app should behave if a network can’t be reached.",,False,3,months,False
ud436,"Computer Networking",https://www.udacity.com/course/computer-networking--ud436?utm_medium=referral&utm_campaign=api,"Security and Software Defined Networking",intermediate,False,https://lh3.ggpht.com/PwqnZYeOVbWr4a3Qn3WkmZNzRlf6acf7EbQoGCBAqrmn1pOFrsX5vVr4WUHGTOaqslvjDY864Q8X2-o9ENU=s0#w=1725&h=1060,https://lh6.ggpht.com/75-re6CeBrGq3I5BnqAZXnflSNz2bywhosDxGrEMwrN1aiajVO3DzYMIWgfBYaOISw-CTqOMzPCvGlf_Kg=s0#w=4680&h=968,,"<i>This class is offered as CS6250 at Georgia Tech where it is a part of the [Online Masters Degree (OMS)](http://www.omscs.gatech.edu/). Taking this course here will not earn credit towards the OMS degree.</i>

This course covers advanced topics in Computer Networking such as Software-Defined Networking (SDN), Data Center Networking and Content Distribution. The course is divided into three parts:

Part 1 is about the implementation, design principles and goals of a Computer Network and touches upon the various routing algorithms used in CN (such as link-state and distance vector). 

Part 2 talks about resource control and content distribution in Networking Applications. It covers Congestion Control and Traffic Shaping.

Part 3 deals with the operations and management of computer networks encompassing SDN's (Software Defined Networks), Traffic Engineering and Network Security.","This is an advanced Computer Networking course that delves into the latest concepts and tools used by the CN industry.","The ideal preparation for this course would be the successful completion of an undergraduate level Computer Networking course. An understanding of the TCP/IP protocol and the its layer model is recommended. Basic knowledge of python (such as through <a href= ""https://www.udacity.com/course/cs101"">Intro to Computer Science</a>) is required.

You should be comfortable with the implementation of basic search algorithms and a working knowledge of Linux and virtual machines is recommended.","Want to build on your Computer Networking knowledge or move into Network Engineering positions such as Systems Admin, Network Admin or Technical Operations (WebOps)? If so, this is the class for you.

Computer Networking takes a hands-on approach to teaching very technical material, using Mininet (a network emulator) to show you how a computer network functions, what factors contribute to its efficiency and how to overcome inherent limitations.",False,"### Lesson 1: Introduction

- Computer Networking Overview
- What This Class is Not About


### Lesson 2: Architecture & Principles

-	A Brief History of the Internet
-	Architectural Design Principles
-	Packet Switching
-	File Transfer
-	End to End Argument Violations

### Lesson 3: Switching

-	Switching and Bridging
-	Bootstrapping: Networking Two Hosts
-	ARP: Address Resolution Protocol
-	Interconnecting LANs with Hubs
-	Switches: Traffic Isolation
-	Spanning Tree
-	Switches vs. Routers
-	Buffer Sizing for a TCP Sender


### Lesson 4: Routing

-	Internet Routing
-	Intra-AS Topology
-	Distance-Vector Routing
-	Link State Routing
-	Interdomain Routing
-	IGP vs. iBGP
-	BGP Route Selection
-	Multiple Exit Discriminator (MEI)
-	Interdomain Routing Business Models


### Lesson 5: Naming, Addressing & Forwarding

-	IP Addressing
-	Pre-1994: “Classful” Addressing
-	IP Address Allocation
-	Classless Interdomain Routing (CIDR)
-	Multihoming Frustrates Aggregation
-	Address Lookup Using Tries
-	Memory Efficiency and Fast Lookup
-	Alternatives to LPM with Tries
-	NAT and IPv6
-	Network Address Translation (NAT)

### Lesson 5.1: Router Design Basics

-	Router Design
-	Basic Router Architecture
-	Decision: Crossbar Switching
-	Switching Algorithm: Maximal Matching
-	Head of Line Blocking
-	Scheduling and Fairness
-	Max-Min Fairness

### Lesson 5.2: Domain Name System (DNS)

-	Record Types
-	Examples (using “dig”)
-	Lookup IP Address

### Lesson 6: Congestion Control & Streaming

-	Congestion Control
-	AIMD (TCP Congestion Control)
-	Data Centers & TCP “Incast”
-	Barrier Synchronization & Idle Time
-	Multimedia & Streaming
-	Digitizing Audio & Video
-	Streaming Video
-	Skype


### Lesson 7: Rate Limiting and Traffic Shaping

-	Traffic Classification & Shaping
-	Source Classification 
-	Leaky Bucket Traffic Shaping
-	(r, t) Traffic Shaping
-	Shaping Bursty Traffic Patterns
-	Power Boost
-	Effects on Latency
-	Buffer Bloat
-	Packet Monitoring

### Lesson 8: Content Distribution

-	The Web and Caching
-	HTTP Requests
-	Persistent Connections
-	Content Distribution Networks (CDNs)
-	Server Selection
-	Content Routing
-	Bit Torrent
-	Solution to Freeriding: “Choking”
-	Distributed Hash Tables
-	Consistent Hashing

### Lesson 9: Software Defined Networking

-	Network Management Overview
-	Software Defined Networking (SDN)
-	Control and Data Planes
-	Different SDN Controllers
-	NOX: Overview
-	Ryu, Floodlight, Nox and Pox
-	Customizing Control

### Lesson 10: Traffic Engineering

-	Traffic Engineering Overview
-	Interdomain Traffic Engineering
-	Measuring, Modeling and Controlling Traffic
-	Link Utilization Function
-	BGP in Interdomain Traffic Engineering
-	Multipath Routing
-	Data Center Networking
-	Valiant Load Balance
-	Jellyfish Data Center Topology

### Lesson 11: Network Security

-	Internet is Insecure
-	Resource Exhaustion 
-	Routing Security
-	Origin and Path Authentication
-	DNS Security
-	DNS Cache Poisoning

### Lesson 11.1: Internet Worms

-	Viruses and Internet Worms
-	Internet Worm Lifecyle
-	First Worm: “Morris” Worm
-	Worm Outbreaks in Detail 
-	Modeling Fast-Spreading Worms

### Lesson 11.2: Spam

-	Spam
-	IP Blacklisting

### Lesson 11.3: Denial of Service (DoS) Attacks

-	TCP 3-Way Handshake
-	Inferring Denial of Service Activity using Backscatter
-	Automated DoS Attack Mitigation
-	MTPCP",,True,3,months,False
ud459,"Intro to Information Security",https://www.udacity.com/course/intro-to-information-security--ud459?utm_medium=referral&utm_campaign=api,"Offered at Georgia Tech as CS 6035",intermediate,False,https://lh3.googleusercontent.com/Pb0nWySWyAWnotDDcetjlldoMvh7YurzS-ERshfEDtb1VYiahpCbtWufyZVUqNb9_DJiYyGreU-FG1nnKfQ=s0#w=1389&h=788,,,"This course provides a one-semester overview of information security. It is designed to help students with
prior computer and programming knowledge — both undergraduate and graduate — understand this important
priority in society today. The technical content of the course gives a broad overview of essential concepts and
methods for providing and evaluating security in information processing systems (operating systems and
applications, networks, protocols, and so on). 

In addition to its technical content, the course touches on the
importance of management and administration, the place information security holds in overall business risk,
social issues such as individual privacy, and the role of public policy.",,,,False,"The course will be organized around a few broad themes:

• Foundations: security mindset, essential concepts (policy, CIA, etc.)

• Software security: vulnerabilities and protections, malware, program analysis

• Practical cryptography: encryption, authentication, hashing, symmetric and asymmetric crypto

• Networks: wired and wireless networks, protocols, attacks and countermeasures
• Applications and special topics: databases, web apps, privacy and anonymity, voting, public policy

The course is divided into three parts:
Part 1: 
Part 2:
Part 3:",,False,0,,False
ud501,"Machine Learning for Trading",https://www.udacity.com/course/machine-learning-for-trading--ud501?utm_medium=referral&utm_campaign=api,"Offered at Georgia Tech as CS 7646",intermediate,False,https://lh3.googleusercontent.com/sstOlcko2U-Ah4Ot8xu0I-6JLpzHVlvwwjCNQ9fq7GW6YOKxdii1gxgUs44bt5qsy5qTT7kDCRu2GHiFrw=s0#w=1355&h=776,https://lh3.googleusercontent.com/9J8svpTASx1e3Wdk8Wk4Acq8MWODD2dcEjTwvwqqVz00Ok6z4ROGXE1htxhgkJ7PpnAHdFSEvv1IDUVa8PU=s0#w=1170&h=242,,"This course introduces students to the real world challenges of implementing machine learning based trading strategies including the algorithmic steps from information gathering to market orders. The focus is on how to apply probabilistic machine learning approaches to trading decisions. We consider statistical approaches like linear regression, KNN and regression trees and how to apply them to actual stock trading situations.","Implement machine learning based strategies to make trading decisions using real-world data.","Students should have strong coding skills and some familiarity with equity markets. No finance or machine learning experience is assumed.

Note that this course serves students focusing on computer science, as well as students in other majors such as industrial systems engineering, management, or math who have different experiences. All types of students are welcome!

The ML topics might be ""review"" for CS students, while finance parts will be review for finance students. However, even if you have experience in these topics, you will find that we consider them in a different way than you might have seen before, in particular with an eye towards implementation for trading.

Programming will primarily be in Python. We will make heavy use of numerical computing libraries like NumPy and Pandas.","#### By the end of this course, you should be able to:
- Understand data structures used for algorithmic trading.
- Know how to construct software to access live equity data, assess it, and make trading decisions.
- Understand 3 popular machine learning algorithms and how to apply them to trading problems.
- Understand how to assess a machine learning algorithm's performance for time series data (stock price data).
- Know how and why data mining (machine learning) techniques fail.
- Construct a stock trading software system that uses current daily data.

#### Some limitations/constraints:
- We use daily data. This is not an HFT course, but many of the concepts here are relevant.
- We don't interact (trade) directly with the market, but we will generate equity allocations that you could trade if you wanted to.",False,"This course is composed of three _mini-courses_:

- Mini-course 1: Manipulating Financial Data in Python
- Mini-course 2: Computational Investing
- Mini-course 3: Machine Learning Algorithms for Trading

Each mini-course consists of about 7-10 short lessons. Assignments and projects are interleaved.

**Fall 2015 OMS students**: There will be two tests - one midterm after mini-course 2, and one final exam.",,False,4,months,False
ud507,"Data Visualization and D3.js",https://www.udacity.com/course/data-visualization-and-d3js--ud507?utm_medium=referral&utm_campaign=api,"Communicating with Data",intermediate,False,https://lh4.ggpht.com/-8k47x6ig0mLWtYBVs1jSILrKvM6oxad_thcLIM4Hzf9KTLLafG3by9g443o_fb5ugXomH-eps6z94hp9Sk=s0#w=1725&h=1060,https://lh4.ggpht.com/U6QogkXo7B-Tll6-h9dTYVtkBVv_POuKORlwQ3B0T003rUnUGMAQscN6VAoBqwdDAcPjqosCjTqXMvi60YiA=s0#w=1170&h=242,,"Learn the fundamentals of data visualization and practice communicating with data. This course covers how to apply design principles, human perception, color theory, and effective storytelling to data visualization. If you present data to others, aspire to be an analyst or data scientist, or if you’d like to become more technical with visualization tools, then you can grow your skills with this course.

The course does not cover exploratory approaches to discover insights about data. Instead, the course focuses on how to visually encode and present data to an audience once an insight has been found.

This course is part of the <a href=""https://www.udacity.com/course/nd002"" target=""_blank"">Data Analyst Nanodegree</a>.","Learn the fundamentals of data visualization and apply design and narrative concepts to create your own visualization.","Regardless of your programming background, you can learn about data visualization and design principles in Lesson 1a and Lesson 2a without the following recommended background.

To succeed in this course, you should to be familiar with basic programming principles, including data types (strings, arrays, booleans, etc.), `if else` statements, and `for` loops. You should also be able to describe concepts like functions and objects. Our <a href=""https://www.udacity.com/course/cs101"" target=""_blank"">Intro to Computer Science</a> and <a href=""https://www.udacity.com/course/ud036"" target=""_blank"">Programming Fundamentals with Python</a> courses are great places to get started.

Basic knowledge of HTML and CSS (structuring and styling a web page) is not required but highly recommended. We suggest taking the <a href=""https://www.udacity.com/course/ud304"" target=""_blank"">Intro to HTML and CSS</a> course if you have no experience with HTML or CSS.

This course is unique in that the final project can be completed using either dimple.js or d3.js. The visualization library, dimple.js, is easier to use than d3.js and requires less background knowledge. Furthermore, a graphic can be created in considerably fewer lines of code using dimple.js as opposed to d3.js.

So why should you learn d3.js?

Data Driven Documents (d3.js) allows you to build highly customized graphics. If you would like to gain more technical skills and learn more about Javascript and open web standards, then you should complete Lesson 3 and Lesson 4 in order to prepare for the final project.


If you would like to complete the final project using d3.js, you should have some experience reading and using documentation. For example, you should be able to code a `for` loop in Javascript or be able to look up the syntax to work with strings and arrays in Javascript. We recommend taking the <a href=""https://www.udacity.com/course/ud804"" target=""_blank"">Javascript Basics</a> course if you have little to no experience with Javascript.","Learn by doing! You will analyze existing data visualization and create new ones to learn about the field. At it’s core, data visualization is a form of communication. Learn how to be a great communicator and how to enable readers to walk away from your graphics with insight and understanding. This course also makes use of open web standards (HTML, CSS, and SVG) to create data visualizations.

### You can also learn how to...

- communicate clearly with the best visual representation of your data
- tell stories, spark discussion, and create calls to actions for readers
- design graphics like ones from the NYTimes and other media companies
- how to use open web technologies to create an online portfolio of your work
- use visualization libraries (<a href=""http://dimplejs.org/"" target=""_blank"">dimple.js</a> and <a href=""http://d3js.org/"" target=""_blank"">D3.js</a>) to create graphics",False,"### Lesson 1a Visualization Fundamentals (2 hours)
Learn about the elements of great data visualization. In this lesson, you will meet data visualization experts, learn about data visualization in the context of data science, and learn how to represent data values in visual form.

### Lesson 1b D3 Building Blocks (4 hours)
Learn how to use the open standards of the web to create graphical elements. You’ll learn how to select elements on the page, add SVG elements, and how to style SVG elements. Make use of all the Instructor Notes throughout this lesson if you have little to no experience with HTML and CSS.

### Mini-Project 1: RAW Visualization (2 hours)
Create a data visualization using a software of your choice. We will provide recommendations for visualization software as well as data sets. We want you to get right into making data visualization so here’s your first chance!

### Lesson 2a Design Principles (2 hours)
Which chart type should I use for my data? Which colors should I avoid when making graphics? How do I know if my graphic is effective? Investigate these questions, and learn about the World Cup data set which will be use throughout the rest of the course.

### Lesson 2b Dimple.js (4 hours)
Learn how to create graphics using the Dimple JavaScript library. You will learn about this library as a gentle coding introduction before learning about D3.js. You will be able to produce great graphics with minimal code, and all of your graphics will come with interactivity without any extra effort on your part. Dimple, it's simple!

### Mini-Project 2: Take Two (2-5 hours)
Find an existing data visualization, critique it for what it does well and what it doesn’t do well, and finally, recreate the graphic using a software tool of your choice. We recommend using Dimple.js, which is covered in Lesson 2b, but we don’t want you to feel constrained by the choice of tools. Use any tool that works for you.

### Special Note
At this point in the course, you can start the final project. The remaining content of the course covers narrative structures, types of bias, and maps. All of the code  in Lesson 3 and Lesson 4 pertains to d3.js. If you'd like to learn d3.js and complete the final project using d3.js, then please continue. If you prefer to stop, you can complete the final project using dimple.js.

### Lesson 3 Narratives (5 hours)
Learn how to incorporate different narrative structures into your visualizations and code along with Jonathan as you create a graphic for the World Cup data set. You’ll learn about different types of bias in the data visualization process and learn how to add context to your data visualizations. By the end of this lesson, you’ll have a solid foundation in D3.js.

### Lesson 4 Animation and Interaction (5 hours)
Static graphics are great, but interactive graphics can be even better. Learn how to leverage animation and interaction to bring more data insights to your audience. Code along with Jonathan once again as you learn how to create a bubble map for the World Cup data set.

### Final Project: Making an Effective Data Visualization (2 hours or more)
You will create a data visualization that conveys a clear message about a data set. You will use dimple.js or d3.js and collect feedback along the way to arrive at a polished product.
####<b>NOTE:</b> As a free student, you are welcome to complete the project to showcase your learning; however, only students enrolled in the <a href=""https://www.udacity.com/course/nd002"" target=""_blank"">Data Analyst Nanodegree</a> are able to submit the final project for review and certificate. Interested in enrolling? <a href=""https://www.udacity.com/course/nd002"" target=""_blank"">Find out more!</a>",,True,7,weeks,False
ud509,"Product Design",https://www.udacity.com/course/product-design--ud509?utm_medium=referral&utm_campaign=api,"Validation and UX through Design Sprints",intermediate,False,https://lh3.googleusercontent.com/1RoMggIjpqstcLqFPS4anLDCXYSvhI1l_PObbgY1hzeDX9hnPhLMV7k515AWbePKNzllzFK8p6cvzM3lHco=s0#w=1724&h=1060,https://lh3.googleusercontent.com/0imdG8vMSCcdfthm_xiCN8C6U_IqDOBVcUL9kbzwxn-RgUAyvuYNXj0kOk3ctKfiLAUwD9sWTwINpnero9vK=s0#w=4680&h=968,,"There is nothing more powerful than an idea whose time has come. This course is designed to help you materialize your game-changing idea and transform it into a product that you can build a business around. Product Design blends theory and practice to teach you product validation, UI/UX practices, Google’s Design Sprint and the process for setting and tracking actionable metrics.

This course is part of our Tech Entrepreneur Nanodegree Program, click [here to learn more](https://www.udacity.com/course/tech-entrepreneur-nanodegree--nd007).","Learn product validation, UI/UX practices, Google’s Design Sprint and the process for setting and tracking actionable metrics.","This course has no formal prerequisites. You just need to have a problem to solve and be open to feedback!","Over the years, Silicon Valley startups have developed a series of frameworks and best practices for product design. Through startup case studies and interviews with industry experts, we want to bring you the best of Silicon Valley with lessons you can apply to influence the design of your mobile or web app.

By the end of the course, you will know how to perform a Google Design Sprint (developed at Google Ventures and exclusively taught in this course) to design, prototype and test your ideas. You will also learn to design low fidelity  mockups for your product and capture appropriate metrics.",True,"###Lesson 1: Ideation & Validation
Life's too short to build products no one wants. This lesson will help you develop, validate and refine your ideas to ensure you’re building for a product/market fit. Through case studies and interviews with founders, product experts, and investors, you will learn how to efficiently conduct user research and build an entrepreneurial mindset.

###Lesson 2: UI/UX
They say good design shrinks the gap between what a product does and why it exists. This lesson takes you beyond visual style to understand material design, building for accessibility, user flows and personas. You’ll hear about how startups make design decisions and learn from senior designers at Google on how they use design to emphasize the purpose of their products.
By the end of the lesson, you will analyze the user experience of another product and start documenting a user flow for your own product.

###Lesson 3: Design Sprint

Created by Google Ventures, the Design Sprint Process is widely used by teams seeking to design, prototype, and test their ideas with customers. In this lesson, Google’s leading Design Sprint Master will help you go through all the steps required to validate your ideas and build mockups of your product. You will also get a first-hand look at how design sprints happen at Udacity and how you can design & conduct your own. 

###Lesson 4: Key Metrics 

In the final lesson, you will learn to identify common metrics for websites and apps relating to traffic, customer satisfaction, and engagement. You will learn tools that can be used to monitor metrics and examples from startups on what metrics not to measure. 

At the end of the lesson, you will identify actionable metrics that will work best for your own product.",,True,2,months,False
ud513,"Technical Interview",https://www.udacity.com/course/technical-interview--ud513?utm_medium=referral&utm_campaign=api,"Algorithms and Data Structures in Python",intermediate,False,https://lh3.googleusercontent.com/uIqdO2AmL0fzzVxYF02KPuusuBxdFgbFGY-EfQhWuc8kKroaqUpameNoI8-cg-rRrfW0-RKM29AwgZQuBA=s0#w=3264&h=2448,,,"Are you ready to conquer your next interview? To succeed, you need to understand the expectations. 
Virtually all technical interviews follow a very set pattern: you get asked a very specific type of question, you're required to have very specific knowledge, and you're expected to answer—and interact with your interviewer—in a very particular way. Knowing this in advance, and preparing accordingly, is the key to success. 

This course was designed to give you what you need to ace a technical interview. Included are:

 - videos that walk you through the algorithms and data structures concepts commonly asked in technical interviews
 - an explanation of efficiency, and an explanation of how it relates to topics covered throughout the class
 - practice problems and quizzes to test your understanding
 - a mock interview with a breakdown explaining how interviewers expect you to explain your thought process
 - curated links to outside resources, including a special link to live practice interviewing with other Udacity students on Pramp 
 - if you’re a Nanodegree student, a final project where you can answer interview questions and get feedback from a trained reviewer.

The goal of this course is to prepare you for a real technical interview, so we focus on the material you'll actually be expected to do.","Learn the skills technical interviewers expect you to know—efficiency, common algorithms, manipulating popular data structures, and how to explain a solution.","- Basic knowledge of Python
- Familiarity with basic algebra","This course provides an introduction to topics that often show up on technical interviews. It is aimed at students who have never taken a course in algorithms and data structures, but want to learn the material. It can also be used to refresh on these topics for those who have seen them before. In addition to video explanations, there are plenty of examples and discussions of the intricacies of different approaches.

This course is distinct from other similar offerings on Udacity. It is a precursor to the “Intro to Algorithms” course, and complimentary to the Interviewing Course listed in most career-focused Nanodegrees. This course is focused on explaining the technical content that show up in interviews, while the other course is more centered on behavioral questions and how to act in an interview.",False,"**Introduction and Efficiency**

 - Start off with a basic introduction to topics covered in this course and the overall content structure, including an explanation of expected Python knowledge. 
 - Then, dive in with the definition of efficiency in a computer science context, as well as an explanation of the notation commonly used to describe efficiency. Practice describing efficiency from code snippets.

**List-Based Collections**

 - Learn the formal definition of a list in computer science, and see definitions and examples of list-based data structures, arrays, linked lists, stacks, and queues. 
 - Examine the efficiency of common list methods, and practice using and manipulating these data structures.

**Searching and Sorting**

 - Explore how to search and sort with list-based data structures, including binary search and bubble, merge, and quick sort. Examine the efficiency of each and learn how to use recursion in searching and sorting. 
 - See and write examples of these methods, as well as more sorting algorithms like insertion sort.

**Maps and Hashing**

- Understand the concepts of sets, maps (dictionaries), and hashing. Examine common problems and approaches to hashing, and practice with examples of hash tables and hash maps.

**Trees**

 - Learn the concepts and terminology associated with tree data structures. Investigate common tree types, such as binary search trees, heaps, and self-balancing trees. 
 - See examples of common tree traversal techniques, examine the efficiency of traversals and common tree functions, and practice manipulating trees.

**Graphs**

 - Examine the theoretical concept of a graph and understand common graph terms, coded representations, properties, traversals, and paths.  
 - Practice manipulating graphs and determining the efficiency associated with graphs.

**Case Studies in Algorithms**

 - Explore famous computer science problems, specifically the Shortest Path Problem, the Knapsack Problem, and the Traveling Salesman Problem. 
 - Learn about brute-force, greedy, and dynamic programming solutions to such problems.

**Technical Interviewing Techniques**

 - Learn about the “algorithm” for answering common technical interviewing questions. See how to clarify and explain practice interview questions using the concepts taught in this course, and get tips for giving interviewers exactly what they’re looking for in an interview.

**Practice Interview**

 - Use Pramp to meet with another Udacity student and get live technical interview practice.",,False,4,weeks,True
ud518,"App Monetization",https://www.udacity.com/course/app-monetization--ud518?utm_medium=referral&utm_campaign=api,"Develop a Sustainable Financial Strategy",intermediate,False,https://lh3.googleusercontent.com/ExdtHAQwrj8I1RjVrJt78udW3xNYFzcyTqqi25Q_Q2h4GoWeSzA4UUJxMtkH3sfG2qydfm-2rZ6CLXYc_sA=s0#w=1200&h=738,https://lh3.googleusercontent.com/cOzqt7M5gmPrnMFyUO4i9jIe1hrgmzOh4HMHTXVOeCr1JuX1CcRkoAwaLYzGCKaGCUgC_w0TopOW7_kjQA=s0#w=4680&h=968,,"There is no higher form of user validation than having customers support your product with their wallets. However, the path to a profitable business is not necessarily an easy one. This course blends instruction with real life examples to help you effectively develop, implement, and measure your monetization strategy, iterating on the model as appropriate.

This course is part of our Tech Entrepreneur Nanodegree Program, click [here to learn more](https://www.udacity.com/course/tech-entrepreneur-nanodegree--nd007).","Learn how to effectively develop, implement, and measure your monetization strategy, iterating on the model as appropriate.","This course has no formal prerequisites, but you will get a lot more out of the instruction and exercises if you’ve got a product design, or you’ve completed <a href=""https://www.udacity.com/course/product-design--ud509"" target=""_blank"">Product Design</a>  before enrolling in this course.","Google Developer Relations has worked with thousands of developers in hundreds of startups to help them build successful apps. Along the way, they’ve identified common themes that contribute to successful monetization strategies.

This course combines this expertise with insights from leading startups in multiple industries. From ecommerce to games, this course will guide you through the best practices and principles for monetizing your app. By the end of this course, you’ll be able to:

- Choose & implement a monetization strategy relevant to your product
- Set performance metrics & monitor the success of a strategy
- Know when it might be time to change methods",False,"###Lesson 1: Introducing Monetization 
Developing an appropriate monetization strategy is comparable to finding the product/market fit for a new idea. This lesson will get you started on the path to finding that strategy by helping you think about profitability from the very beginning. You will also learn about different monetization models, profit margins, KPIs, and customer acquisition and retention.   

###Lesson 2: Monetization Strategies 
They say nothing happens before you make your first dollar. This lesson takes a deep dive into monetization strategies for different platforms, covering freemium, subscription, eCommerce, and Ads across web, games, and native apps. You’ll learn about the tools startups use to implement these strategies and design a plan to execute a model for your own product. 

###Lesson 3: Implement a Monetization Plan
Monetization strategies change over time as the user base grows and the product evolves. In this lesson, you will choose and tailor a monetization strategy for your product and learn how to set up tracking to monitor its effectiveness. Using Google Analytics and other tracking tools, you will begin closely following and iterating based on behavior reports, crashes, exceptions, and app speed. 

###Lesson 4: Optimize Your Model
In the final lesson, you will learn how to react and re-engage users if your monetization strategies don’t originally work. Through a case study with Nir Eyal, you will see how product and monetization are closely tied and how the Hooked Model can be used to optimize your strategy. 

###Case Study: Wufoo
Learn how Kevin Hale got started with Wufoo (sold to SurveyMonkey).",,False,1,months,False
ud549,"JavaScript Testing",https://www.udacity.com/course/javascript-testing--ud549?utm_medium=referral&utm_campaign=api,"Developing Apps with Confidence",intermediate,False,https://lh5.ggpht.com/vcyKpS2avvfz5qxyESkg23ul0R2U21iNgoIa76hADbha-IBnA_TEIZ5CPbvnblC2F6vRjiu76uDQ4lym2w=s0#w=2560&h=1440,https://lh6.ggpht.com/zv_rFtzcKCwgIe9ETRsWn9UUQ_7-9Kerni99O2OwmYuMNxoXYab6ddnx-jifhuH8lPqJx5ZA6C96mat6wxQ=s0#w=4680&h=968,,"In this course you'll learn how to write JavaScript applications with confidence, using the red-green-refactor workflow. You'll write comprehensive suites of tests that validate your application is functioning as intended at all times.

You'll start by exploring how other industries use a variety of tests and the value it provides. You'll then start writing your very own tests, using the Jasmine testing framework. Finally, you'll start developing your very own address book application using the red-green-refactor workflow and explore a variety of scenarios including testing asynchronous functions.","Learn how to iterate on your web applications with confidence using the red-green-refactor workflow cycle and automated testing frameworks.","You should be comfortable writing JavaScript and using its object-oriented programming features. If you need a refresher on these subjects, consider taking our <a href=""https://www.udacity.com/course/ud804"" target=""_blank"">JavaScript Basics</a> and <a href=""https://www.udacity.com/course/ud015"" target=""_blank"">Object-Oriented JavaScript</a> courses.","As your applications become more complex and you continue adding new features, you need to verify your additions haven't introduced bugs to your existing functionality. Automated testing provides this functionality and allows you to focus on.",False,"### Overview
This course consists of 2 lessons. In the first lesson, you'll discover the importance of testing and reconsider its purpose and the value it provides. In the second lesson, you'll explore the <a href=""http://jasmine.github.io/"" target=""_blank"">Jasmine</a> testing framework write your own test suites while developing an address book application.

### Lesson 1: Rethinking Testing
From education to aerospace, tests provide invaluable feedback to those that analyze the results. In this lesson, you'll learn all about the importance of testing, how to identify the expectations a test is attempting to validate and how to write expectations in code.

**Topics covered:**

* What is a test?
* Validating opinions
* Identifying and defining expectations
* Writing expectations in code

### Lesson 2: Writing Test Suites

JavaScript doesn't support testing natively, so you'll need a framework to provide the functionality you need. In this lesson, you'll get an introductions to the <a href=""http://jasmine.github.io/"" target=""_blank"">Jasmine</a> testing framework and use the red-green-refactor workflow to begin development on an address book application.

**Topics covered:**

* Introduction to Jasmine
* Writing suites, specs and tests
* The red-green-refactor workflow cycle
* Testing asynchronous functionality",,False,2,weeks,False
ud576,"Grand Central Dispatch (GCD)",https://www.udacity.com/course/grand-central-dispatch-gcd--ud576?utm_medium=referral&utm_campaign=api,"Perform Asynchronous Operations in iOS",,False,https://lh3.googleusercontent.com/llYhGIRXD74ogbr6VSbPcHdbUt_XCL6_UPHJjaYlKan07VWUfBg4EAiPVNIRyqzD6hDxmWkW1zGMmR-sAbKc=s0#w=1024&h=630,,,"Many times your apps need to run lengthy operations in the background, like downloading data, but you don't want these operations to interfere with your UI.

Apple's GCD (long form: Grand Central Dispatch) framework allows you to create asynchronous apps for iOS, ensuring smooth a smooth user experience in situations like the one mentioned above.","Apple's Grand Central Dispatch framework allows you to create asynchronous apps for iOS, ensuring a smooth user experience.","To be successful in this course, you should be comfortable programming in Swift, and understand closures. You can learn these skills in our [Swift Syntax](https://www.udacity.com/courses/ud902) course. 

Familiarity with _The Hitchhiker's Guide to the Galaxy_ and _The Matrix_ are also 
recommended in order to understand the jokes in this course.","Almsot all Apps consume data from web services, and therefore must use background threads for these lengthy operations.

Even though we provide a black box solution for concurrency in the <a href=""https://www.udacity.com/courses/ud421"">iOS Networking with Swift</a> course, it is important that you understand how concurrency works in iOS. 

This knowledge is vital to deliver Apps that won't be rejected from the App Store and also provide a great user experience.

On top of that, GCD is a frequent topic in iOS job interviews.",False,"###Lesson 1: Closures Reloaded

In this chapter we will revisit the concept of closures in Swift. We need to learn a few properties of closures that we bypassed in [Swift Syntax](https://www.udacity.com/courses/ud902). These are vital when dealing with GCD.

You will put you new knowledge of closures to test in several playgrounds. By the end of this lesson you will be able to drop things like, ""Closures are first class types that capture their lexical environment"" in casual conversations and impress fellow nerds. Even better: you will actually know what the heck you're talking about!

###Lesson 2: Grand Central Dispatch

Here you meet our main antagonist: Apple's open source library *Grand Central Dispatch*. 

GCD is an enormous library, so we will concentrate on its core features: how it allows you to send tasks to the background and (equally important) to the foreground.

When you finish this lesson you will have a sound knowledge of how and what you can send to the background and what must always run in the foreground.

###Lesson 3: Sample App

```Talk is cheap. Show me the code! -- Linus Torvalds.```

In this chapter you will create a simple App that downloads huge images (the easiest way to block the UI). You will apply your newly acquired knowledge to send this network lengthy task to the background in 2 different ways.

By the end of this lesson you will know how to run closures in the background, design methods that take a completion closure and understand the code in the *black box* in the Networking course.",,False,2,weeks,False
ud585,"Intro to iOS App Development with Swift",https://www.udacity.com/course/intro-to-ios-app-development-with-swift--ud585?utm_medium=referral&utm_campaign=api,"Make Your First iPhone App",intermediate,False,https://lh6.ggpht.com/EMXyMl3EwCgLdaLkYkOFsEwnXI7feP6_Mt4rTSa9_nBZQ2lnRKuyVlhSeTWHJfYVi_uGyC2mkEhXymajTrMu=s0#w=1724&h=1060,https://lh5.ggpht.com/6dnxW1q6Hip7w1eSqZgKYO2nbGAC9EZjDOHIoKnUu15EgFwTwVl6RLJpU24unfD3e3by9PsZcvWVRS1qrddb=s0#w=4680&h=968,https://www.youtube.com/watch?v=bOxlCjM5gw8,"In this course we will build an iPhone app that records a conversation between you and a friend, and then makes your voices sound like a Chipmunk or Darth Vader.

This course will introduce you to iOS app development in Swift, a new programming language from Apple, and serves as your launching point into the [iOS Developer Nanodegree](https://www.udacity.com/course/nd003).","Take the first step in becoming an iOS Developer by learning about Swift and writing your first app.","This course assumes prior programming experience. Specifically, you should have a strong understanding of programming concepts like variables, if statements, loops, functions, and classes. Lesson 1 of [Intro to Computer Science](https://www.udacity.com/course/cs101) and [Programming Foundations with Python](https://www.udacity.com/course/ud036) are good courses to take if you are completely new to programming.

You will also need access to a Mac computer running OS X 10.10 or later.

We have designed this course such that you will not need a physical device (i.e. an iPhone or an iPad) to build your app. We will be using a simulator on your mac that will imitate the features of a phone on your computer. Towards the end of the course we will provide instructions on how to download your app on an iPhone (in case you do have access to a physical device.)","This course will set you on your way to becoming an iOS Developer, where you’ll establish a basic understanding of the iOS ecosystem. You’ll also have working knowledge of Swift, Apple’s custom programming language created exclusively for the mobile developer.",True,"###Lesson 1: Introduction and Xcode
Introduction to Swift and Xcode, taking the first steps in becoming an iOS developer.
###Lesson 2: AutoLayout and Buttons
Learn Storyboard, AutoLayout, UIButtons and UILabels. Start developing the Pitch Perfect App and creating the user interface.
###Lesson 3: ViewController & Multiple Views
View Controllers, View Controller Lifecycle, and Multiple Views. Learn how to react to touch events and change the user interface based on those events.
###Lesson 4: Delegation and Recording
Introduction to AVAudioRecorder, Delegation, and programatic segues. Setup audio recording in the Pitch Perfect App.
###Lesson 5: Playback and Effects
Setup audio playback including rate, pitch, echo, and reverb. Learn about UIStackViews and class extensions.
###Final App Submission (1 hour)
In this final lesson, you will ensure that your app works according to a rubric we have designed, and will also have an opportunity to add new features to your app. We will also share with you a Code Review document that contains suggestions from an external reviewer on how to improve your code. We will request that you implement those suggestions to enhance your code and make it ready for the app store. Finally, to complete the course, you will submit your app to a Udacity coach for a thorough evaluation of your work.","Before course development started, we asked you what questions you had about Apple's Swift language. Here are the answers to your most burning questions:

### Why is the language called Swift?
The language was designed with two goals in mind: to be (1) swift to code, and (2) swift to execute. In terms of speed, Swift compiles Swift code to optimized native code depending on target device. In terms of learning curve, the Swift syntax was designed to be clean and easy to read. 

### Should I learn Swift or Objective-C?
Swift! Apple has made it clear that Swift is the cornerstone of the future of iOS development. Plus, you can still utilize Objective-C files alongside Swift code, so you won’t miss out on any pre-existing libraries and code.

### How easy is Swift to learn?
Swift was designed to be friendly for new programmers, and as a result it is incredibly easy to learn. <a href=""https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/"">According to Apple</a>, Swift is the “first industrial-quality systems programming language that is as expressive and enjoyable as a scripting language.” Some have even <a href=""http://www.zdnet.com/why-apples-swift-might-be-the-new-basic-and-thats-no-small-thing-7000030186/"" target=""_blank"">called Swift the new BASIC</a>.

### Is it fast?
<a href=""http://www.apple.com/swift/"" target=""_blank"">Apple boasts</a> that Swift is up to 2.6x faster than Objective-C and 8.4x faster than Python 2.7. And why should you care about how quickly code executes? Well, faster running code makes for more efficient and smoother running apps, which makes for a better experience for your user.

### Why did Apple decide to create a new language?
Objective-C has been Apple’s primary programming language for app writing since OS X was created. In that time, programming languages and practices changed drastically, especially in mobile development. Rather than adopt a new, already existing language, Apple created a new language tailored specifically for development on their own hardware.

### Can I create an app in Swift and submit it to the App Store?
Absolutely! In fact, you were able to as soon as Xcode 6 and iOS 8 launched.

### Why was there a need to go from Objective-C to Swift?
As mentioned in the answer to question five, after 20 years, Objective-C was starting to show it’s age. Plus, Objective-C is a difficult language for new programmers to learn, so the barrier to entry is pretty high. Swift provides a modern language tailor-made for Apple hardware.

### How Stable is Swift?
As with any new language, there is a potential for bugs. While you may encounter some trouble with the Swift language, the majority of issues were addressed before the 1.0 release.

The thing to most look out for is changes to the Swift language during each update. For example, when updating from 1.0 to 1.1, Apple introduced a new feature: <a href=""https://developer.apple.com/swift/blog/?id=17"" target=""_blank"">failable initializers</a>. You can expect that the language will change as more people use it and give feedback to Apple. Stay apprised of changes using the <a href=""https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/RevisionHistory.html#//apple_ref/doc/uid/TP40014097-CH40-XID_1655"" target=""_blank"">revision history for *The Swift Programming Language*</a>.

### What other languages is it similar to?
Swift is probably most similar in look and feel to Ruby or Python. Though you’ll also probably recognize some C syntax. 

### Is it compatible with iOS 6 & 7?
Swift can be run on iOS 7, but not iOS 6.",True,1,months,False
ud595,"Linux Command Line Basics",https://www.udacity.com/course/linux-command-line-basics--ud595?utm_medium=referral&utm_campaign=api,"Getting Started with the Shell",beginner,True,https://lh3.googleusercontent.com/01InpXSAJZ8p8n60RpDb9C_hETBy_0D7pA_1Q9ey2X3CrO5fLrDF4TrpWwfOiizbzDzrWDWE_xX3EieDOvA=s0#w=1920&h=1080,https://lh3.googleusercontent.com/Wg5JiWcpupfG7QUjvIttrS2A6xdcnuJ8mBkJ5feog1CZJbjBTm8FohlDH5SsKclx3UFJucHjaRZlq_Zg_4Q=s0#w=4680&h=968,,"We have built this course for beginners who have no experience with the Linux system and the command-line interface.

In this course, you'll learn the basics of the command line interface of a Linux server: the terminal and shell (GNU Bash). This course includes an introduction to files and directories in the Linux filesystem.","An introduction to the Linux command line interface.","To take this course, you should have beginner-level experience in a programming languages such as Python or JavaScript. While this course does not involve doing any programming, it does use concepts that are familiar to the beginning programmer such as ""function"", ""expression"", and ""string"".

*Note: This course is intended for beginners to the shell environment. If you have done shell scripting or other extensive use of the shell before, this course will probably be too introductory for you. You might want to check out our <a href=""http://www.udacity.com/ud299"" target=""_blank"">Configuring Linux Web Servers</a> course.*

---","Most servers on the Internet today run on Linux or other Unix-like systems. Installing, configuring, and troubleshooting often relies on the command line interface. This, accordingly, is foundational web knowledge, and in fact many of our intermediate and advanced courses rely on a familiarity with the command-line interface to run servers, work with version control systems and more.",False,"### Lesson 1: Get Into the Shell  
In this lesson, you'll learn about the terminal user interface and how you can interact with a Linux server using shell commands.

### Lesson 2: Shell Commands
There are different kinds of shell commands that work with the terminal in different ways. This lesson also covers the use of the Linux manual (manpages) to expand your knowledge of shell commands.

### Lesson 3: The Linux Filesystem
Working with files and directories is a big part of using the shell. In this lesson you'll learn basic commands for interacting with the filesystem.",,False,1,weeks,False
ud600,"Reinforcement Learning",https://www.udacity.com/course/reinforcement-learning--ud600?utm_medium=referral&utm_campaign=api,"Offered at Georgia Tech as CS 8803",advanced,False,https://lh3.googleusercontent.com/pt1vxMCUDY1FFAyiff0s7ZrIivaUhYvNz3wP3RrkLLYScqh3lVWlqGEnRLKjgzIZC8yHP4XAguxIR-8ZE6A=s0#w=1287&h=782,https://lh3.googleusercontent.com/q3B6U4FIKtIiglN3RrPTecVUxKB14hiKl-omg1kzSIcmdu8wTo4dvtUbjJfkIDLqW_nPIhT39UqScnpdUQU=s0#w=4680&h=968,,"You should take this course if you have an interest in machine learning and the desire to engage with it from a theoretical perspective. Through a combination of classic papers and more recent work, you will explore automated decision-making from a computer-science perspective. You will examine efficient algorithms, where they exist, for single-agent and multi-agent planning as well as approaches to learning near-optimal decisions from experience. At the end of the course, you will replicate a result from a published paper in reinforcement learning.","Study machine learning at a deeper level and become a participant in the reinforcement learning research community.","Before taking this course, you should have taken a graduate-level machine-learning course and should have had some exposure to reinforcement learning from a previous course or seminar in computer science (students who have completed <a href=""http://www.udacity.com/course/ud675"">CS 7641</a> will be well prepared for this course).

Additionally, you will be programming extensively in Java during this course. If you are not familiar with Java, we recommend you review Udacity's <a href=""http://www.udacity.com/course/cs046"">Intro to Java Programming</a> course materials to get up to speed beforehand.","This course will prepare you to participate in the reinforcement learning research community. You will also have the opportunity to learn from two of the foremost experts in this field of research, Profs. Charles Isbell and Michael Littman.",False,"* Reinforcement Learning Basics
* Introduction to BURLAP
* TD Lambda
* Convergence of Value and Policy Iteration
* Reward Shaping
* Exploration
* Generalization
* Partially Observable MDPs
* Options
* Topics in Game Theory
* Further Topics in RL Models",,False,4,months,False
ud607,"How to Make an iOS App",https://www.udacity.com/course/how-to-make-an-ios-app--ud607?utm_medium=referral&utm_campaign=api,"From Drawing Board to App Store",advanced,False,https://lh3.googleusercontent.com/jl17SWQdE1BJx2qgOKWI23jWKdPFjgrF4PjE1kCOdJv9NO0HLtNCyZJ0yElmkRRRwMrAG1rNxBmplaI_1dA=s0#w=1753&h=1078,https://lh3.googleusercontent.com/htGVTEpavhMFSdlRqmkwOcUUfAmfOpEBNwKoOVBdXx1__dXABUxj-xXJ1vsHQ0b3pxpEzTkCDt_W0XADnic=s0#w=1170&h=242,,"Do you have some experience building apps for the iPhone or iPad and want to build an app from the ground up, but don't know where to begin? Look no further! In this course, you'll learn the process of building an iOS app, from brainstorming ideas to publishing on the App Store.","Learn the process of building an app, taking your ideas from drawing board to App Store!","**Enrolling in this course assumes you have prior iOS development experience.** The material won't cover the technical aspects of app development, instead serving as a guide through the process of building an app. Specifically, the course was built to support the final project in the <a href=""https://www.udacity.com/course/ios-developer-nanodegree--nd003"" target=""_blank"">iOS Developer Nanodegree</a> and assumes mastery of the concepts taught in the following courses:

* <a href=""https://www.udacity.com/course/uikit-fundamentals--ud788"" target=""_blank"">UIKit Fundamentals</a>
* <a href=""https://www.udacity.com/course/ios-networking-with-swift--ud421"" target=""_blank"">iOS Networking with Swift</a>
* <a href=""https://www.udacity.com/course/ios-persistence-and-core-data--ud325"" target=""_blank"">iOS Persistence and Core Data</a> 

Please also note that submitting to the App Store, or loading your app to a physical device requires enrollment in the <a href=""https://developer.apple.com/programs/ios/"" target=""_blank"">iOS Developer Program</a>.","Building an app from scratch is a time-consuming, but rewarding process. Don't let the length of the lessons fool you!

This course is unique in that you'll spend most of your time outside of the classroom, working on your app. We'll point you in the right direction to find resources and make progress, but it will be up to you to implement.

By the end of the course, you'll have built you very own custom iOS app, and have the confidence to do it all again.",False,"###Lesson 1: Research
In this first lesson, you'll brainstorm and vet multiple app ideas. You'll begin to think about the UI elements used in each, get user feedback on the designs, as well as start thinking about relevant web APIs and libraries to use.

###Lesson 2: Build
In this lesson, you'll choose an idea to pursue and build it! We'll share tips for getting started, dealing with code that doesn't work, and how to submit to the App Store.

###Lesson 3: Reflect
In this last lesson, you'll reflect on the process: what went well, and what you might do differently next time. Recognizing and learning from mistakes is what makes you a better developer!",,False,3,months,False
ud611,"Intro to DevOps",https://www.udacity.com/course/intro-to-devops--ud611?utm_medium=referral&utm_campaign=api,"Improving Software Lifecycle",advanced,False,https://lh3.googleusercontent.com/1rUp2qe5hr1tlrguR3DwxvBTuqCIhfgMNIUIWACehPl-W-0-KGSE-VmBYABTVcxyX79jjryk1I4D8NdF2nA=s0#w=1725&h=1060,https://lh3.googleusercontent.com/upMXLI_nj8ZpBjVuLA0PbUNl1IyYNe-RTL9aNmlcy4FAtyG_WNei1TfBFqm10f6uQWJ6UquSWrlh8eW0dSI=s0#w=4680&h=968,,"The goal of this course is to take existing IT professionals, whether they come from software development or operations, and help them appreciate the challenges facing companies who are looking to embrace scalable software deployment as well as the architectures and thought processes they can use to address these challenges. 

Students will start with a presentation of the problem as it stands today, then dive into the DevOps workflow and a survey of the system architectures currently being used to address this problem.","Learn all about the DevOps landscape, workflow, and a survey of the systems currently being used to support scalable software deployment.","- Ability to install software
- Ability to use git
- Some experience with programming (even just scripting in shell)
- Some experience as SysAdmin; some experience with Linux is beneficial","Based on Puppetlab's ""State of DevOps"" report for 2013 and 2014,
high-performing organizations are deploying code 30 times more frequently, with
50 percent fewer failures than their lower-performing counterparts.

The report states:
>We can now assert with confidence that high IT performance correlates with strong business performance, helping to boost productivity, profitability and market.

Adopting DevOps is the way most companies improve the performance of their IT organisations,  and this course will help you take the first steps towards that goal.",False,"##Lesson 1
- What is DevOps
- Why DevOps is needed
- CAMS (Culture, Automation, Measurement, Sharing) principles

##Lesson 2
- The different perspectives of Dev and Ops
- Different perspectives can cause conflict
- How to solve the problems with different approach and some tools
- How the tools work

##Lesson 3
- Continuous Integration and Delivery workflows
- Tools that enable these workflows
- Measurement and the ways it helps IT and business
- Tools that help with measurement",,False,3,weeks,False
ud615,"Scalable Microservices with Kubernetes",https://www.udacity.com/course/scalable-microservices-with-kubernetes--ud615?utm_medium=referral&utm_campaign=api,"Master infrastructure management",intermediate,False,https://lh3.googleusercontent.com/hqA_2FcPMhebJNIRcKkMWZYtu48FMsFebTkxmsfkKaTdYWakds5T9K543EZ1Epm7ES7Ej_tJtllvwrjjZI4=s0#w=1920&h=1080,,https://www.youtube.com/watch?v=T59RtLov9E0,"***""Scalable Microservices with Kubernetes"" is part of the upcoming <a href=""https://www.udacity.com/course/devops-engineer-nanodegree--nd012"">DevOps Nanodegree program</a>. If you are interested in DevOps, be sure to check out this program as well!***

This course is designed to teach you about managing application containers, using Kubernetes. We've built this course in partnership with experts such as Kelsey Hightower and Carter Morgan from Google and Netflix’s former Cloud Architect, Adrian Cockcroft (current Technology Fellow at Battery Ventures), who provide critical learning throughout the course. 

Mastering highly resilient and scalable infrastructure management is very important, because the modern expectation is that your favorite sites will be up 24/7, and that they will roll out new features frequently and without disruption of the service. Achieving this requires tools that allow you to ensure speed of development, infrastructure stability and ability to scale. Students with backgrounds in Operations or Development who are interested in managing container based infrastructure with Kubernetes are recommended to enroll!

In this course you will learn to:

 - Containerize an application by creating Docker config files and build processes to produce all the necessary Docker images
 - Configure and launch an auto-scaling, self-healing Kubernetes cluster
 - Use Kubernetes to manage deploying, scaling, and updating your applications
 - Employ best practices for using containers in general, and specifically Kubernetes, when architecting and developing new microservices","This course is designed to teach you about managing microservices, using Kubernetes. This course is built in partnership with experts such as Google’s Kelsey Hightower.","Prior to taking this course, and in addition to the prerequisites and requirements outlined for the <a href=""https://www.udacity.com/course/devops-engineer-nanodegree--nd012"">DevOps Engineer Nanodegree program</a>, you should possess the following experience and skills:

 - Comfortable using Linux command line tools
 - Fluent in at least one programming language
 - Familiar with general virtualization concepts","If you’re currently involved in infrastructure management — as a sysadmin or a developer — this course will enable you to build on that experience, and master the most cutting edge tools and practices in automation and distributed system management. For students who might be new to the field, this course is an excellent opportunity to familiarize yourself with microservices, containers, Docker, Kubernetes and deployment patterns; you’ll even run your first application on your very own Kubernetes cluster in the cloud!",False,"**Lesson 1 - Introduction to Microservices**

 - Learn how 12-factor apps and the microservices design pattern make modern applications easier to deploy and maintain.

**Lesson 2 - Building the Containers with Docker**

 - Use Docker to build container images that package an application and its dependencies for deployment on a single machine.

**Lesson 3 - Kubernetes**

 - The infrastructure to support an application at scale is as important as the application itself. See how Kubernetes allows you to focus on the big picture.

**Lesson 4 - Deploying Microservices (From Image to Running Service)**

 - Go beyond the theoretical concepts and try out Kubernetes so that you can use it to manage real world apps.",,False,1,months,True
ud617,"Intro to Hadoop and MapReduce",https://www.udacity.com/course/intro-to-hadoop-and-mapreduce--ud617?utm_medium=referral&utm_campaign=api,"How to Process Big Data",intermediate,False,https://lh5.ggpht.com/JJc55ckwLOPH2koySqtvwd8Hc4vzFodhg-x5JxcvFKth-dKW_iD8zy9Ax2W8oPvyR6iOYoeVPRvclIhVmdE=s0#w=1725&h=1060,https://lh4.ggpht.com/05Dcr-kT6tfnSS2NEkyUCbKrCQPKDCUUG3p1FA2Kd-Qu72BkOBnTk-d5naoIzHxFOvSiog5Q9w_r3i0-uuY=s0#w=4680&h=968,https://www.youtube.com/watch?v=44K_bzTL_SM,"The Apache™ Hadoop® project develops open-source software for reliable, scalable, distributed computing. Learn the fundamental principles behind it, and how you can use its power to make sense of your Big Data.","In this short course, learn the fundamentals of MapReduce and Apache Hadoop to start making sense of Big Data in the real world!","Lesson 1 does not have technical prerequisites and is a good overview of Hadoop and MapReduce for managers.

To get the most out of the class, however, you need basic programming skills in Python on a level provided by introductory courses like our <a target=""_blank"" href=""https://www.udacity.com/course/cs101"">Introduction to Computer Science</a> course.

To learn more about Hadoop, you can also check out the book <a href=""http://www.amazon.com/gp/product/1449311520/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1449311520&linkCode=as2&tag=udacity-20"" target=""_blank"">Hadoop: The Definitive Guide</a>.","- How Hadoop fits into the world (recognize the problems it solves)
- Understand the concepts of HDFS and MapReduce (find out how it solves the problems)
- Write MapReduce programs (see how we solve the problems)
- Practice solving problems on your own",False,"### Lesson 1
What is ""Big Data""? The dimensions of Big Data. Scaling problems.  HDFS and the Hadoop ecosystem.

### Lesson 2
The basics of HDFS, MapReduce and Hadoop cluster.

### Lesson 3
Writing MapReduce programs to answer questions about data.

### Lesson 4
MapReduce design patterns.

### Final Project
Answering questions about big sales data and analyzing  large website logs.",,True,1,months,False
ud651,"Data Analysis with R",https://www.udacity.com/course/data-analysis-with-r--ud651?utm_medium=referral&utm_campaign=api,"Visually Analyze and Summarize Data Sets",intermediate,False,https://lh3.ggpht.com/lmdonpHvisppe4bgIF9a5UaEcM_78F0s6egR2hmVw5HnQGLuornNJCfpsNhBuGVokCpfn0WasYsqytT52elY=s0#w=1725&h=1060,https://lh6.ggpht.com/ZxfMGgj7Xy2O_rEiPTuynKoobC01ZiVEDYyz3QnRblsG7IQhtKakV1h2olgRWcXSw03pF0ofRSOljLgzHIw=s0#w=1170&h=242,,"Exploratory data analysis is an approach for summarizing and visualizing the important characteristics of a data set. Promoted by [John Tukey](http://en.wikipedia.org/wiki/John_Tukey), exploratory data analysis focuses on exploring data to understand the data’s underlying structure and variables, to develop intuition about the data set, to consider how that data set came into existence, and to decide how it can be investigated with more formal statistical methods.

If you're interested in supplemental reading material for the course check out the <a href=""http://www.amazon.com/gp/product/0201076160/ref=as_li_ss_il?ie=UTF8&camp=1789&creative=390957&creativeASIN=0201076160&linkCode=as2&tag=udacity-20"">Exploratory Data Analysis</a> book. (Not Required)

This course is also a part of our <a href=""https://www.udacity.com/course/nd002"">Data Analyst</a> Nanodegree.","Data is everywhere and so much of it is unexplored. Learn how to investigate and summarize data sets using R and eventually create your own analysis.","A background in statistics is helpful but not required. Consider taking [Intro to Descriptive Statistics](https://www.udacity.com/course/ud827) and [Intro to Inferential Statistics](https://www.udacity.com/course/ud201) prior to taking this course. Relevant topics include:  

*   Mean, median, mode
*   Normal, uniform, and skewed distributions
*   Histograms and box plots

<br />
Familiarity with the following CS and Math topics will help students:  

*   Variable assignment
*   Comparison and logical operators ( <, >, <=, >=, ==, &, | )
*   If else statements
*   Square roots, logarithms, and exponentials","You will...

*   Understand data analysis via EDA as a journey and a way to explore data
*   Explore data at multiple levels using appropriate visualizations
*   Acquire statistical knowledge for summarizing data
*   Demonstrate curiosity and skepticism when performing data analysis
*   Develop intuition around a data set and understand how the data was generated.",False,"### Lesson 1: What is EDA? (1 hour)
We'll start by learn about what exploratory data analysis (EDA) is and why it is important. You'll meet the amazing instructors for the course and find out about the course structure and final project.

### Lesson 2: R Basics (3 hours)
EDA, which comes before formal hypothesis testing and modeling, makes use of visual methods to analyze and summarize data sets. R will be our tool for generating those visuals and conducting analyses. In this lesson, we will install RStudio and packages, learn the layout and basic commands of R, practice writing basic R scripts, and inspect data sets.

### Lesson 3: Explore One Variable (4 hours)
We perform EDA to understand the distribution of a variable and to check for anomalies and outliers. Learn how to quantify and visualize individual variables within a data set as we begin to make sense of a pseudo-data set of Facebook users. While the data set does not contain real user data, it does contain a wealth of information. Through the lesson, we will create histograms and boxplots, transform variables, and examine tradeoffs in visualizations.

### Problem Set 3 (2 hours)

### Lesson 4: Explore Two Variables (4 hours)
EDA allows us to identify the most important variables and relationships within a data set before building predictive models. In this lesson, we will learn techniques for exploring the relationship between any two variables in a data set. We'll create scatter plots, calculate correlations, and investigate conditional means.

### Problem Set 4 (2 hours)

### Lesson 5: Explore Many Variables (4 hours)
Data sets can be complex. In this lesson, we will learn powerful methods and visualizations for examining relationships among multiple variables. We'll learn how to reshape data frames and how to use aesthetics like color and shape to uncover more information. Extending our knowledge of previous plots, we'll continue to build intuition around the Facebook data set and explore some new data sets as well.

### Problem Set 5 (2 hours)

### Lesson 6: Diamonds and Price Predictions (2 hours)
Investigate the diamonds data set alongside Facebook Data Scientist, Solomon Messing. He'll recap many of the strategies covered in the course and show how predictive modeling can allow us to determine a good price for a diamond. As a final project, you will create your own exploratory data analysis on a data set of your choice.

### Final Project (10+ hours)
You've explored simulated Facebook user data and the diamonds data set. Now, it's your turn to conduct your own exploratory data analysis. Choose one data set to explore (one provided by Udacity or your own) and create a RMD file that uncovers the patterns, anomalies and relationships of the data set.",,True,2,months,False
ud719,"App Marketing",https://www.udacity.com/course/app-marketing--ud719?utm_medium=referral&utm_campaign=api,"Your First 1,000 Users & Beyond",intermediate,False,https://lh3.googleusercontent.com/9xu4a7fRWBue7q2dUvNEcyZ6bdIAnuB4SxfmAzLop9HZScBGFx0Z8eDW_EsBoXyvj-971aOkU7MqTFN0lfyO=s0#w=1724&h=1060,https://lh3.googleusercontent.com/XZxGs38mxfYb6sZ2ZqekO9mWHntHvJpXYoFHZFWGaMjX7OuEaPm_1PkGE7GOd_K6uJe3PTEWiyYgbOh_mknh=s0#w=4680&h=968,,"Without customers, your business does not exist. Marketing helps you understand your potential user and focus your product on their needs. This course will help you organize a strategy of identifying your perfect user, find ways to connect with them and what you’ll say when you find them. This covers research, planning, execution and most importantly how to grow your user base.

This course is part of our Tech Entrepreneur Nanodegree Program, click [here to learn more](https://www.udacity.com/course/tech-entrepreneur-nanodegree--nd007).","This course will help you organize a strategy of identifying your perfect user, and teach you how to grow your user base by focusing your product on their needs.","This course has no formal prerequisites, and you can complete this course using our aBarkment app as an example. But if you have your own product idea, we encourage you to explore our <a href=""https://www.udacity.com/course/product-design--ud509"" target=""_blank"">Product Design</a> and <a href=""https://www.udacity.com/course/rapid-prototyping--ud723"" target=""_blank"">Rapid Prototyping</a> courses. You can leverage the mockups from those course to get even more out the instruction and exercises in this course.","You’re going to come up with a plan to acquire users and grow! By the time you’re done, you will have a robust marketing plan, including a slide deck with a description of your value to your customers, how you stack up against competitors, who your target audience is, and to grow your customer base.",False,"###Lesson 1: Understand the User
Learn to define and create a targeted marketing plan for specific user segments. Analyze your competitive advantages and disadvantages through market segmentation and the five level of market competition and learn how to position your product. Conduct competitive analysis in order to create your unique value proposition.

###Lesson 2: Pre-launch 
Create marketing goals in order to focus your marketing plan. You’ll start thinking about your distribution plan and consider what keywords work best for your goals. You’ll also create the materials to help prepare you for launch and learn about your app listing page. Finally, you’ll learn about the beta-testing community, beta-testing groups, and prepare your landing pages.

###Lesson 3: Launch! 
Prepare, launch, execute, and gain your first users. You’ll outline a go-to-market strategy and gain the know-how to execute on it. You’ll learn SEO (search engine optimization) and ASO (app store optimization) skills as well as growth hacking tips to get your first 1000 users. 

###Lesson 4: Customer Acquisition
Learn about paid and free customer acquisition methods from AdWords, social marketing, email marketing and more. 

###Lesson 5: Measurement Fundamentals
Learn to use data to iterate and optimize your marketing plan.",,False,2,weeks,False
ud723,"Rapid Prototyping",https://www.udacity.com/course/rapid-prototyping--ud723?utm_medium=referral&utm_campaign=api,"Building Apps for Web and Mobile",intermediate,False,https://lh3.googleusercontent.com/XCike2QVT4WdczpGwDf0PC8BlEnbW6SO90FExI5bD243R6Djs7FeCsaFxpAPTAwdsJvjcHMXx8yEXm9U8ag=s0#w=1758&h=1080,https://lh3.googleusercontent.com/gE5GafC-4bW2zn8-vX2QJvcgkVE8S4tQvU2uUKyQwcKug8ZFhAIQBwVO4MdH9c1peMXFmoRXM10l5utK6A=s0#w=4680&h=968,,"Prototyping allows you to spend ten minutes -- instead of ten hours -- finding an amazing design for your product.  This course will guide you through the iterative process of prototyping an app and conducting user research. You will start by making a low fidelity paper prototype, conducting research with users, and using that research to inform your next iteration. Together with <a href=""http://www.invisionapp.com/"" target=""_blank"">InVision</a> we’ll guide you through creating interactive prototypes. This means you don’t have to code an app before putting it in front of users! Along the way, you’ll learn how and where prototyping fits into your app design process and how you can use prototyping to become a better entrepreneur.

This course is part of our Tech Entrepreneur Nanodegree Program, click [here to learn more](https://www.udacity.com/course/tech-entrepreneur-nanodegree--nd007).","Learning to prototype will save you time and money in the development process. You’ll create quality apps faster and have confidence in the viability of your products.","This course has no formal prerequisites, but you will get a lot more out of the instruction and exercises if you’ve got a product idea. If you’ve completed our <a href=""https://www.udacity.com/course/product-design--ud509"" target=""_blank"">Product Design</a> course, you can leverage your app mockups from that course to get a headstart in this one!","Prototyping is an art that exists to save you time and money in the app development process. It allows you to identify design flaws quickly so you waste as little time as possible building a phenomenal app. By learning this art, you’ll create quality apps faster and have confidence in the viability of your products. 

By the end of the course, you’ll be comfortable with the prototyping process, be able to get quality user feedback, and use the feedback to create great apps.",False,"You’ll learn basic paper prototyping, conducting user research, and understanding feedback on your app. You’ll also learn how to use InVision to create interactive medium-fidelity prototypes and conduct user research remotely. Finally, you will learn how to continue prototyping new features as you move further in the app development lifecycle and how to present your research to friends, investors, and anyone else who is interested in your work.


###Lesson 1: Low-Fidelity Prototypes & User Research
In this lesson, you’ll learn the fundamentals of prototyping, as well as the process of making paper prototypes and presenting them to users. 

###Lesson 2: Medium-Fidelity Prototypes with inVision
In this lesson, you’ll learn how to incorporate feedback, make interactive prototypes using InVision, and how to conduct further user research remotely.  

###Lesson 3: Lifelong Prototyping 
In this lesson, you’ll learn how to refine your prototypes further, how to involve prototyping and user research in new app features, and how to present your prototypes and research.",,False,3,weeks,False
ud730,"Deep Learning",https://www.udacity.com/course/deep-learning--ud730?utm_medium=referral&utm_campaign=api,"Take machine learning to the next level",advanced,False,https://lh3.googleusercontent.com/pfUiqEYS6oUORAgBnWqm2666udJRH4d1S9ZSdhMlRWEp2LkHvUX5TBbkKPcakRkKMnTmciXkZzJVX2ZsJg=s0#w=1200&h=738,https://lh3.googleusercontent.com/-wAssFJ46nfGPtxb0f6nI8Md1WnqV65-GStZyjpVbVmmhNgKP8PWvB8xFEfA-MoAwRXXKPuMIuzsJouZTlji=s0#w=2400&h=540,https://www.youtube.com/watch?v=Kl5TAFus4-Y,"**Machine learning** is one of the fastest-growing and most exciting fields out there, and **deep learning** represents its true bleeding edge. In this course, you’ll develop a clear understanding of the motivation for deep learning, and design intelligent systems that learn from complex and/or large-scale datasets. 

We’ll show you how to train and optimize basic neural networks, convolutional neural networks, and long short term memory networks. Complete learning systems in TensorFlow will be introduced via projects and assignments. You will learn to solve new classes of problems that were once thought prohibitively challenging, and come to better appreciate the complex nature of human intelligence as you solve these same problems effortlessly using deep learning methods. 

We have developed this course with Vincent Vanhoucke, Principal Scientist at Google, and technical lead in the Google Brain team.

***Note**: This is an intermediate to advanced level course offered as part of the [Machine Learning Engineer Nanodegree](https://www.udacity.com/course/machine-learning-engineer-nanodegree--nd009) program. It assumes you have taken a first course in machine learning, and that you are at least familiar with supervised learning methods.*","Learn how to apply deep learning to solve complex problems. Train and test your models in TensorFlow, including convolutional and recurrent neural networks.","This is an intermediate to advanced level course. Prior to taking this course, and in addition to the prerequisites and requirements outlined for the Machine Learning Engineer Nanodegree program, you should possess the following experience and skills:

- Minimum 2 years of programming experience (preferably in Python)
- Git and GitHub experience (assignment code is in a GitHub repo)
- Basic machine learning knowledge (especially supervised learning)
- Basic statistics knowledge (mean, variance, standard deviation, etc.)
- Linear algebra (vectors, matrices, etc.)
- Calculus (differentiation, integration, partial derivatives, etc.)","Deep learning methods are becoming exponentially more important due to their demonstrated success at tackling complex learning problems. At the same time, increasing access to high-performance computing resources and state-of-the-art open-source libraries are making it more and more feasible for enterprises, small firms, and individuals to use these methods. 

Mastering deep learning accordingly positions you at the very forefront of one of the most promising, innovative, and influential emergent technologies, and opens up tremendous new career opportunities. For Data Analysts, Data Scientists, Machine Learning Engineers, and students in a Machine Learning/Artificial Intelligence curriculum, this represents a rarefied opportunity to enhance your Machine Learning portfolio with an advanced, yet broadly applicable, collection of vital techniques.",True,"**Lesson 1: From Machine Learning to Deep Learning**

- Understand the historical context and motivation for Deep Learning.
- Set up a basic supervised classification task and train a black box classifier on it.
- Train a logistic classifier “by hand”Optimize a logistic classifier using gradient descent, SGD, Momentum and AdaGrad.

**Lesson 2: Deep Neural Networks**

- Train a simple deep network.
- Effectively regularize a simple deep network.
- Train a competitive deep network via model exploration and hyperparameter tuning.

**Lesson 3: Convolutional Neural Networks**

- Train a simple convolutional neural net.
- Explore the design space for convolutional nets.

**Lesson 4: Deep Models for Text and Sequences**

 - Train a text embedding model.
 - Train a LSTM model.",,False,3,months,False
ud774,"Xcode Debugging",https://www.udacity.com/course/xcode-debugging--ud774?utm_medium=referral&utm_campaign=api,"Print Statements, Breakpoints, and LLDB",advanced,False,https://lh3.googleusercontent.com/JvTxOEH2ZDx2R7nSdeehojPbLtOavHc4D2tj6b2UapwOZwdH0Wqv--LGYZ55G60G_qxpJyZdYF7oTBa1fw=s0#w=1758&h=1080,https://lh3.googleusercontent.com/bAB5JC-RW1q5_KNtIVfmBv8R2NmEpk8jal9_zw4awqkwCOedfat9DOm7rOiDyLmTQ_sD1-5A1rrwBdxgxGM=s0#w=4680&h=968,,"""If debugging is the process of removing bugs, then programming must be the process of putting them in.""<br> 
*Edsger W. Dijkstra*

Debugging is yin to programming's yang; you can't have one without the other. However, finding bugs in programs can be an incredibly frustrating and demotivating process for developers. This course will teach you a variety of techniques to help make debugging your code easier.","In this course, you'll learn standard methodologies for debugging software, and how to use Xcode's debugging tools to find and squash bugs.","This course assumes rudimentary iOS programming experience. You should be able to scan Swift code to identify methods and errors, and make minor changes to correct them.","Debugging is one of the most fundamental processes involved in writing software. Nobody writes perfect code, and job-ready developers should know how to find and fix programming errors.

In this course, you'll learn standard methodologies for debugging software—especially for iOS applications. Additionally, you'll learn how to use Xcode’s debugging tools (breakpoints, LLDB, etc.) to squash those bugs!",False,"###Lesson 1A: Debugging, Printing, Logging
In this lesson, you'll be introduced to the ""So Many Bugs"" app, which we'll use to solve coding mysteries throughout the course. You'll also learn about the debugging process, and how to use print statements to identify bugs.

###Lesson 1B: Stepping Through Code
In this lesson, you'll learn how to use breakpoints to examine application state at any point during execution.

###Lesson 2A: LLDB and Breakpoint Actions
In this lesson, you'll learn about LLDB (low-level debugger)—the debugging super tool. You'll be introduced to common LLDB commands, tips, and tricks.

###Lesson 2B: Breakpoints and Visual Tools
In this lesson, you'll learn about exception and symbolic breakpoints, and how to debug your code using Xcode's visual debugging tools.",,False,3,weeks,False
ud775,"How to Use Git and GitHub",https://www.udacity.com/course/how-to-use-git-and-github--ud775?utm_medium=referral&utm_campaign=api,"Version Control for Code",beginner,False,https://lh5.ggpht.com/y6QqOHLmFIoeSfv2eTSAkqKxFiWVXaWvpIfInxf9nhf_SPBFf5rXElThQTZbsUFram7UEb8eN2gAUe9fLE5H=s0#w=1725&h=1060,https://lh3.ggpht.com/6ATWYiVnh23EJmmyQSs-IkIIiWbIfBhnzEdkjNgXlwJsuQdcKJLgY5A4Mq9zhx0uFUoLuj0SCSUP5C4xMw0=s0#w=4680&h=968,,"Effective use of version control is an important and useful skill for any developer working on long-lived (or even medium-lived) projects, especially if more than one developer is involved. This course, *built with input from GitHub*, will introduce the basics of using version control by focusing on a particular version control system called Git and a collaboration platform called GitHub.

This course is part of the  <a href=""https://www.udacity.com/course/nd001"" target=""_blank"">Front End</a> and  <a href=""https://www.udacity.com/course/nd004"" target=""_blank"">Full Stack Nanodegrees</a>..","Learn to use version control, an important tool for any developer.  The course will focus on Git, a specific version control system, and GitHub, a collaboration platform.","While this course does not involve programming, students should have some experience with a programming or markup language.
Additionally, students should be familiar with navigating the command line. If unfamiliar or if you want a refresher, check out [these instructions](https://www.udacity.com/wiki/ud775/command-line-instructions) or [this introductory course](https://udacity.com/course/ud595).","Git is used by many tech companies, and a public GitHub profile serves as a great portfolio for any developer. But more than that, you’ll establish an efficient programming workflow that allows you to:

* Keep track of multiple versions of a file
* Track bugs by reverting to previous working versions of a file
* Seamlessly collaborate with other developers on a project

The use of tools like Git and GitHub is essential for collaborating with other developers in most professional environments.",True,"###Lesson 1: Navigating a Commit History
In this lesson, you’ll learn about a few different types of version control systems and discover what makes Git a great version control system for programmers.  You’ll also get practice using Git to view the history of an existing project.  You’ll learn to see all the versions that have been saved, checkout a previous version, and compare two different versions.
###Lesson 2: Creating and Modifying a Repository
In this lesson, you’ll learn how to create a repository and save versions of your project.  You’ll learn about the staging area, committing your code, branching, and merging, and how you can use these to make you more efficient and effective.
###Lesson 3: Using GitHub to Collaborate
In this lesson, you’ll get practice using GitHub or other remote repositories to share your changes with others and collaborate on multi-developer projects.  You’ll learn how to make and review a pull request on GitHub.  Finally, you’ll get practice by collaborating with other Udacity students to write a create-your-own-adventure story.

###Project: Contribute to a Live Project
Students will publish a repository containing their reflections from the course and submit a pull request to a collaborative Create-Your-Own-Adventure story.",,True,3,weeks,False
ud777,"Writing READMEs",https://www.udacity.com/course/writing-readmes--ud777?utm_medium=referral&utm_campaign=api,"Because Code is for Humans, Too",beginner,True,https://lh3.googleusercontent.com/FWszT_WPN9FvGPDZYkzltLh75AKFhEYzyhGkj6NA__nnI9eLOjVGphbgdmF1sXkpDqEhhi3b053E_T9ElA=s0#w=1920&h=1080,https://lh3.googleusercontent.com/L-UoUtMNFZeEYf7ArW1i1R3VxCBHmjtvB0nRaA236buiyefI0iAznteeLn6KT33x6te--YvvloSjKhJ9LLI=s0#w=4680&h=968,,"In this course, you’ll learn what documentation is and why it’s an important part of the development process. You'll learn how to build a well-structured README that you’ll be able to incorporate into your projects moving forward. By the end of this course, you will have written your very own README file using Markdown.","Documentation is an important part of the development process. Learn to write READMEs using Markdown so your code can be used by other humans!","This course is for anybody who writes code or works with others who do. The only prerequisites are:

- A basic understanding of HTML
- A basic understanding of git and GitHub (helpful, but not required!)","If you've ever written code or needed to examine somebody else's code, you know how challenging it can be to try to make sense of a new codebase without any context.

This course will show you how to make your code more approachable to the humans who will ultimately need to make meaning of your code.",False,"This course is split into three short stages:

1. What is documentation, and who is it for?
2. What makes a good README?
3. How can you write a README quickly using Markdown?",,False,3,days,True
ud788,"UIKit Fundamentals",https://www.udacity.com/course/uikit-fundamentals--ud788?utm_medium=referral&utm_campaign=api,"Learn the iOS User Interface Library",intermediate,False,https://lh6.ggpht.com/T2dxUrLhxblm60U1fevj1W2xk2KIyVlOwf495y2Ue_9bMJXzMV1Gdly4MH4Gxfc87_S5kTgSgulfGmFBXg=s0#w=1676&h=1030,https://lh6.ggpht.com/mwHQcENN3An3evgOfroMVm6Jv3rlAn2DdTIqmFBV7mEQiR5Ca265Yd1NRXZMz1ruD73xowKFGMfVTmyqPA=s0#w=4680&h=968,,"In this course, you will build a series of simple apps to become more comfortable with the UIKit framework and master its most widely used components. This framework constitutes the building blocks of the user interface for all iOS apps, and is crucial for any iOS Developer to be intimately familiar with.","Learn the iOS UIKit framework, which is the cornerstone of creating user interfaces in all iOS apps and crucial for any iOS Developer to be intimately familiar with.","**This course assumes prior iOS experience.** Specifically, it assumes that you have built at least one single-view app, and can use Xcode to modify swift files and storyboard scenes. You should know what a View Controller is, and know how to create outlets and actions. You should also have basic familiarity of the <a href=""https://www.udacity.com/course/learn-swift-programming-syntax--ud902"" target=""_blank"">Swift programming language</a>.

The course also assumes basic familiarity with Git. Specifically, you will need to be able to clone git repositories and checkout branches specific to each lesson.  

You will need access to a Mac computer running OS X 10.10 or later. However, you do not need an iPad or iPhone to complete the activities. All exercises can be completed using the iOS simulator built into Xcode.","<a href=""https://www.udacity.com/course/ud585"" target=""_blank"">You’ve built your first iOS app.</a> It was fun, but you might not be comfortable creating apps from scratch. After completing this course, you’ll have the skills you will need to create the UI elements for almost any app. During this course, you’ll learn everything you need to know about UIKit, from buttons to table views. To become fluent with UIKit requires practice, and this course will provide you with opportunities to create small working apps to build your skill set.",False,"###Lesson 1: Outlets and Actions
In this lesson, you’ll learn to connect outlets and actions using only code and graphically using storyboard. 

You’ll use the following UIKit classes in this lesson:

* UIButton
* UILabel
* UISwitch

###Lesson 2: View Presentations and Segues
In this lesson, you’ll learn how to present views modally. 

We will introduce you to the following UIKit classes:

* UIImagePickerController
* UIAlertController
* UIActivityViewController

###Lesson 3: The Delegate Pattern
Many of the most common UIKit components make use of the delegate pattern. In this lesson, you’ll learn how delegates make important connections between the model, view, and controller.

We will introduce you to the following UIKit classes:

* UITextField
* UITextFieldDelegate

###Lesson 4: Tables
Table views are one of the most commonly used views in iOS apps. In this lesson, you’ll learn how to implement tables in your own apps. 

We will introduce you to the following UIKit classes: 

* UITableView
* UITableViewDelegate
* UITableViewDataSource
* UITableViewCell

###Lesson 5: Navigation
In this lesson, you’ll learn how iOS uses navigation stacks to manage multiple views in an app. You’ll take UITableViews a step further and create the navigation structure that enables a user to tap a row of a table, view the details of an item, and return again. 

We will introduce you to the following UIKit classes:

* UINavigationController
* UIBarButtonItem

###Lesson 6: MemeMe Techniques
This lesson will guide you through the process of creating your own version of the meme generating app, MemeMe. You’ll learn about collection views, tab bar controllers, how to adjust the screen to accommodate the keyboard, and how to access the camera.

We will introduce you to the following UIKit classes:

* UICollectionView
* UICollectionViewDelegate
* UICollectionViewDatasource
* UITabBarController

We will also feature classes from the Foundation framework:

* NSNotification
* NSNotificationCenter",,False,2,months,False
ud802,"How to create <anything> in Android",https://www.udacity.com/course/how-to-create-anything-in-android--ud802?utm_medium=referral&utm_campaign=api,"Amazing tutorials; Amazing android apps",beginner,True,https://lh3.googleusercontent.com/PGI733_nxuUzl8HycyhqlJrbTHMKD8JQwbfUHHxxWdM8YG_BaKnNnMLFzfpmHM54znBVHeLHUuEtO7mAdWI=s0#w=1725&h=1060,https://lh3.googleusercontent.com/Gs_zHLKXEdpUO49CAcufw0nCGL-7gFD36B3BlrvQ-WhRmPBebgj9NjPM8PTEEwflaVvtt9-AH_pt29L5cQ=s0#w=4680&h=968,,"Here is one important question Android developers ask while making apps: <i>""How can I do &#95;&#95;&#95;&#95;&#95;&#95;&#95;&#95; in Android?""</i>

The following are versions of this question that we came across recently:

 - How can I add radio buttons to my app?
 -  How can I play a sound?
 - How can I navigate between multiple screens? 

This course is a collection of such questions and their answers. 

By the end of this course you will have mastered the ability to implement new Android features by reading a blog or article — this is a critical skill possessed by professional Android developers. As a result, you will also be able to use several User Interface components — like Toggle Buttons, Menus, Grid View and many more —  that are central to making functional and delightful Android apps.","Learn from a set of amazing, hand-picked Android tutorials and build an app that you will want to share with your friends and family.","You will need to know the very basics of Android programming (Java) to be successful in this course. If you are completely new to programming, you should take <a href=""https://www.udacity.com/course/android-development-for-beginners--ud837"" target=""_blank"">Android Development For Beginners</a> before enrolling in this course.

We will use Android Studio to build our apps, so you should have access to a computer that can run Android Studio in order to follow along (see Android Studio's <a href=""https://developer.android.com/sdk/index.html#Requirements"" target=""_blank"">System Requirements</a> for details). 

Access to an Android device is helpful, but not at all required.

Finally, the most important prerequisite is a willingness to learn new things, and belief that you can do this!","Android powers over 80 percent of the world’s smartphones, and represents an incredible opportunity for developers everywhere. The next billion people coming online will interact with the internet for the very first time on a mobile device. 

Building for Android gives you the best opportunity to reach these users and make an impact — both in your community, and on the world.",False,"###Lesson 1 - User Interface Components (about 16 hours)

In this lesson, we will highlight various important components of the Android User Interface (UI) — like Radio Buttons, Grid Views and several more — that will allow you to make highly functional mobile apps. We will focus on each UI component by trying to answer the question, ""How do I use &#95;&#95;&#95;&#95;&#95;&#95;&#95;&#95; in Android?""

For each question below, we will guide you to the best Internet tutorial that will offer step-by-step instructions on how to use the UI component in a new android app. Here is the full list of questions we will answer in this course:

**Interactive Controls (about 3 hours)**

 - How do I use a Toggle Button in Android?
 - How do I use a Radio Button in Android?
 - How do I use EditText in Android?
 - What are Arrays (or lists) in Java and how do I use them?
 - How do I show suggestions (or autocomplete) when typing into an EditText?
 - How do I use a Spinner (or drop down list) in Android?
 - How do I change the orientation of the emulator while using shortcuts?
 - How do I simulate a button click with code in Android?

**Menus (about 2 hours)**

 - How do I automatically add missing import statements in my code?
 - How do I create an Options Menu in Android?
 - How do I add a Popup Menu in Android?

**User Input Events (about 1 hour)**

 - How do I use onLongClick?
 - How do I drag and drop in Android?

**Navigation (about 2 hours)**

 - How do I use the swipe gesture in Android?
 - How do I work with multiple screens (or activities) in Android?
 - How do I add tabs to my app in Android?

**Layouts (about 4 hours)**

 - How do I use a basic ArrayAdapter?
 - How do I use the ListView in Android?
 - How do I use the GridView in Android?

**Best Practices (about 2 hours)**

 - How do I make my app more accessible?
 - What are the best practices for designing an Android app?
 - What color schemes should I use when making an Android app?

**Miscellaneous (about 2 hours)**

 - How do I play a sound in Android?
 - How do I display a map in my Android app?
 - How do I use the share button in my Android app?

###Lesson 2 - Final Project (about 10 hours)

Use the skills you have learned in this course to build an app that you will feel proud to share with your friends and family.",,False,4,weeks,False
ud804,"JavaScript Basics",https://www.udacity.com/course/javascript-basics--ud804?utm_medium=referral&utm_campaign=api,"The Programming Language of the Web",beginner,False,https://lh6.ggpht.com/TY7yDlB-w_lMOQHAtOBZjnn-hYAsggB_9TX8TcX1XeR1kTYF4HEggwsxGKd8Ri3rag1USR0gPQvcZvJN5cw=s0#w=788&h=484,https://lh4.ggpht.com/VklYwGjNp3Cmv8FbPSJGywEQGAwuOpBdIml1I2ZjgpfdJUKJ6pjPKAr1ZnkRnJlq5FXpxqoF68lOaOpiblSN=s0#w=4680&h=968,,"We're here to help you get you started with JavaScript!
In the twenty plus years since its inception, JavaScript has become the _lingua franca_ of the web, that's to say, it's become the main tool to create interactive content on the Internet.

In this course, you'll explore the JavaScript programming language by creating an interactive version of your résumé. You’ll learn the JavaScript programming fundamentals you need while building new elements and sections to enhance your résumé.

This course is also a part of our <a href=""https://www.udacity.com/course/nd001"">Front-End Web Developer</a> Nanodegree.","Learn JavaScript syntax and coding conventions that web developers use to create interactive and dynamic websites while you create an online résumé for your portfolio.","We expect that you have *some* experience programming in another language, such as Python, and can describe concepts like loops, functions and objects. Our 
<a href=""https://www.udacity.com/course/cs101"" target=""_blank"">Intro to Computer Science</a>
 and <a href=""https://www.udacity.com/course/ud036"" target=""_blank"">Programming Fundamentals with Python</a> courses are great places to get started.

While we do describe the underlying principles behind basic programming techniques, this course focuses on implementing the principles with JavaScript rather than the principles themselves.

HTML and CSS are not required, however, knowledge of CSS will help you customize your résumé project.","Today, front-end developers work with web designers to create the interactive experiences that make the web the addictive playground we know and love. As the size and influence of the web have expanded, so has the importance of ensuring a website offers users an unforgettable experience.

Perhaps your end goal is to create a HTML5 game, code the front-end for an app idea you have, or maybe you want to use one of the growing set of libraries that let you compile code written in another language or for another platform down to JavaScript. With JavaScript, you can do all these things and more.

###Project
You will create an interactive résumé that you can share to the world and show your growing skills at the time.

Having a good résumé is a key component of securing a better job. We'll give you the template styles and code to create a modern and mobile friendly résumé (also called a curriculum vitae/CV outside the United States) that you can modify and customize.",False,"### Lesson 1: Getting Up and Running

Learn about the tools we'll be using throughout the course and begin modifying web pages with a little bit of code.

- Introduction of résumé project
- Components of the résumé
- Introduction to browser developer tools
- Running commands on the console
- Appending elements to the page

### Lesson 2: Data Types

Dig deeper into JavaScript as we introduce you to the building blocks of the language as you write more complex code using variables and advanced data structures like JSON, Objects, and Arrays.

- Variables
- Strings
- Evaluating values
- Arrays
- Objects
- JSON
- Validating JSON

### Lesson 3: Flow Control

Finish the résumé while you learn how to make your code more modular and reusable by using conditional statements, loops, and functions.

- Conditional statements
- For and while loops
- Functions
- Encapsulation",,True,3,weeks,False
ud805,"Software Development Process",https://www.udacity.com/course/software-development-process--ud805?utm_medium=referral&utm_campaign=api,"From Idea to Product",intermediate,False,https://lh4.ggpht.com/ghBERRE992L2Ueec3QyDH5xPVoNztaQvTTZ9POSDbZRAmYXoFiGN2TROmzJnP8hWIB05NM219nDWQrnSVw=s0#w=1724&h=1060,https://lh4.ggpht.com/NjWk465Bc6rVVGeh2nLZLNxbYwrudFYKz5ayGRFrd0Rr1PwDP-ket4xjpnsRWQJeInYG2dOKQPryj6lgizk=s0#w=4680&h=968,,"<i>This class is offered as CS6300 at Georgia Tech where it is a part of the [Online Masters Degree (OMS)](http://www.omscs.gatech.edu/). Taking this course here will not earn credit towards the OMS degree.</i>

In SDP, you will learn how to select and implement the ideal software process for your development project. Through Professor Orso's engaging examples and interviews with industry insiders, you will learn both conceptual and practical aspects of software engineering. The course covers requirements engineering, architecture and design, testing and maintenance, and software quality in general. 

The goal of this class is to equip you with the skills necessary to define requirements, set up an integrated development environment (IDE), learn Git (and Github!) and use Unified Modeling Language (UML) to design and build an Android application. We will also examine several testing practices and refactoring techniques that are helpful before the launch of your software project. 

While everyone working with software should have these skills, they are particularly important for Software Engineers and Engineering Managers.","Software Development Processes explores requirements engineering, architecture and design, testing, and software quality in general.","A strong familiarity with Android development (perhaps through [Developing Android Apps](https://www.udacity.com/course/ud853)) is expected.","Software engineering isn’t just about programming. It isn’t just about building a technology stack.

This course introduces the idea of software engineering as an iterative, systematic process. You will learn to use Github and Eclipse as you get introduced to the development life cycle, design processes and software testing. 

Software Development Processes will show you the skills and processes needed to complement technical understanding of software products in order to make you a more effective developer in an engineering team.",False,"### Lesson 1: Introduction and Overview

- Importance of Software Engineering
- Discipline of Software Engineering
- The Software Crisis
- Software Phases

### Lesson 2: Life Cycle Models

- Introduction with Barry Bohem
- Requirements Engineering
- Design
- Maintenance 
- Software Process Model Introduction
- Waterfall Process
- Spiral Process
- Evolutionary Prototyping Process
- Rational Unified Process 
- Agile Process
- Choosing a Model
- Lifecycle Documents


### Lesson 3: Integrated Development Environment

- Eclipse Introduction
- IDE Overview
- Plug-Ins
- Eclipse Demo: Create Java Project
- Eclipse Demo: Create a Class
- Eclipse Demo: Run Configuration
- Eclipse Demo: Debugging


### Lesson 4: Version Control Systems

- Interview with John Britton
- Version Control System Introduction
- Two Main Types of VCS
- Introduction to Git
- Git Workflow
- Git Demo: Intro to Git
- Git Demo: Git + Eclipse
- Git Demo: Github
- Git Recap: Local Repositories
- Git Recap: Remote Repositories


### Lesson 5: Requirements Engineering

- Interview with Jane Cleland-Huang
- General RE Definition
- Software Intensive Systems
- Functional and Nonfunctional Requirements
- User and System Requirements
- Modeling Requirements
- Analyzing Requirements
- Requirements Prioritization
- Requirements Engineering Process


### Lesson 6: OO Software and UML

- Object Orientation Introduction
- UML Structural Diagrams: Class Diagrams
- Class Diagram: Creation Tips
- UML Structural Diagrams: Component Diagram
- UML Structural Diagram: Deployment Diagram
- UML Behavioral Diagram: Use Case
- Use Case Diagram: Creation Tips
- UML Behavioral Diagrams: Sequence
- UML Behavioral Diagrams: State Transition Diagram

### Lesson 7: Software Architecture

- Interview with Nenad Medvidovic 
- What is Software Architecture?
- Prescriptive vs. Descriptive Architecture 
- Architectural Evolution
- Architectural Degradation 
- Architectural Recovery
- Architectural Elements
- Components, Connectors, and Configuration
- Deployment Architectural Perspective

### Lesson 8: A Tale of Analysis and Design 

- Analyzing Requirements
- Refining Classes and Attributes
- Adding Attributes
- Identifying Operations
- Refining the Class Diagram

### Lesson 9: Design Patterns

- Patterns Catalogue
- Pattern Format
- Factory Method Pattern
- Strategy Pattern
- Choosing a Pattern
- Negative Design Patterns


### Lesson 10: Unified Software Process

- Use-Case Driven
- Inception Phase
- Elaboration Phase
- Construction Phase
- Transition Phase
- Phases and Iterations

### Lesson 11: General Concepts

- Failure, Fault and Error
- Verification Approaches
- Pros and Cons of Approaches
- Testing Introduction
- Testing Granularity Levels
- Alpha and Beta Testing
- Black and White Box Testing Introduction

### Lesson 12: Black-Box Testing

- Systematic Functional Testing Approach
- Test Data Selection
- Category Partition Method
- Produce and Evaluate Test Case Specifications
- Generate Test Cases from Test Case Specifications
- Model Based Testing
- Finite State Machines

### Lesson 13: White-Box Testing

- Coverage Criteria Intro
- Statement Coverage
- Control Flow Graphs
- Test Criteria Subsumption
- MC/DC Coverage

### Lesson 14: Agile Development Methods

- Cost of Change
- Agile Software Development
- Extreme Programming (XP)
- XP’s Values and Principles
- Test First Development
- Refactoring
- Pair Programming
- Continuous Integration
- Testing Strategy
- High Level Scrum Process

### Lesson 15: Software Refactoring

- Reasons to Refactor
- Refactoring Demo
- Refactoring Risks
- Cost of Refactoring
- When Not to Refactor",,True,3,months,False
ud806,"Get Your Startup Started",https://www.udacity.com/course/get-your-startup-started--ud806?utm_medium=referral&utm_campaign=api,"Assess, Hire, and Fund Your Company",intermediate,False,https://lh3.googleusercontent.com/TV7G5A2d0Z0BxVSjfqCAg2vvZ1ftjlehsaUFXNaMtMFeZUNZSyjaDWX-H_lSrvIlpNWTmr8F5m7mVWyTjY6U=s0#w=1902&h=1068,https://lh3.googleusercontent.com/LcyJ2_g33p_p0q2xAm7UJdWeMramwHQoIt8k3PVxg5Xs6U8XYHFrk4gktkTUMqC2DY4iugf03nsgfXWPqw=s0#w=4680&h=968,,"In this course, you’ll learn how to pitch your business and secure the funding you’ll need to launch your new company. We’ll show you how to write clear, compelling, and targeted mission and vision statements, set quarterly and annual goals, and find mentors, co-founders, and contractors to provide help along the way. This will help you establish a strong foundation for your business and confidently pursue viable funding models, including bootstrapping, crowdsourcing, accelerators, incubators, and more. As the culmination of all of your hard work, you'll complete the course by developing your own unique pitch deck that you can use to secure investment, and launch your business.

This course is part of our Tech Entrepreneur Nanodegree Program, click [here to learn more](https://www.udacity.com/course/tech-entrepreneur-nanodegree--nd007).","Acquire the know-how necessary to see your business grow towards its next milestone.","This course has no formal prerequisites, but you will get a lot more out of the instruction and exercises if you’ve completed the first four courses in our <a href=""https://www.udacity.com/course/tech-entrepreneur-nanodegree--nd007"" target=""_blank"">Tech Entrepreneur Nanodegree Program</a>: <a href=""https://www.udacity.com/course/product-design--ud509"" target=""_blank"">Product Design</a>, <a href=""https://www.udacity.com/course/app-monetization--ud518"" target=""_blank"">App Monetization</a>, <a href=""https://www.udacity.com/course/rapid-prototyping--ud723"" target=""_blank"">Rapid Prototyping</a>, and <a href=""https://www.udacity.com/course/app-marketing--ud719"" target=""_blank"">App Marketing</a>.","By taking this course, you'll master critical steps necessary for the ultimate success of your new business. You'll learn how to define your vision and how to build a team around that vision. You'll then learn how to transform your vision into an engaging story that will inspire investors to fund your business. 

You’ll do this by learning from some of the top voices in Silicon Valley, including Matt Kaufman, VP of Operations at Crunchbase, Gil Ben-Artzy, Co-Founder of UpWest Labs, and Gigi Levy-Weiss, Founding Partner of NFX Guild. Hear from successful entrepreneurs, including Noam Schwartz of SimilarWeb, Krispy Uccello of Google, and Art Gillespie of Udacity.",False,"###Lesson 1: Set Your Goals
Write your mission and vision statements, set your milestones, and decide on the steps you plan to take to reach these goals.

###Lesson 2: Define the Skills You Need
Prepare to start building your team by analyzing your goals, evaluating needs, and identifying skill gaps.

###Lesson 3: Build Your Team
Start building your team by finding co-founders, mentors, freelancers, and employees to fill the skills gaps you identified in the previous lesson.

###Lesson 4: Get Capital for Your Business
Choose between bootstrapping, angel investors, venture capitalists, incubators, and accelerators as options for financing your business.

###Lesson 5: Create Your Pitch Deck
Build your story and prepare a pitch deck you can use to gain customers or secure investment for your business.",,False,3,weeks,True
ud809,"Health Informatics in the Cloud",https://www.udacity.com/course/health-informatics-in-the-cloud--ud809?utm_medium=referral&utm_campaign=api,"Applications and Analysis",beginner,False,https://lh4.ggpht.com/7s3hjNWMv_mWstvK72kQn-L-5QxkIoIxNUIt6PoYLtn9F_Rtk5FFn2emBuwBqccNTgmSSc0M9vatJnYKx9gQ=s0#w=872&h=536,https://lh6.ggpht.com/K-elxed-Az5GGzJrKe_nkNDKNdA7VFpb4kGOf5RacCHXhYW3NxQIUUqhabBqis-MEyj6j1hROKu-fhDT4JI=s0#w=2340&h=484,,"<i>This class is offered as CS6440 at Georgia Tech where it is a part of the [Online Masters Degree (OMS)](http://www.omscs.gatech.edu/). Taking this course here will not earn credit towards the OMS degree.</i>

This is a survey course designed to provide a broad, forward-facing overview of contemporary health informatics, a specialized field of computing that seeks to improve the quality and efficiency of healthcare delivery. To understand health informatics (HIT) you also need to have at least a basic understanding of the complex and highly regulated US healthcare industry. The course is designed for students from diverse backgrounds and who have not been previously exposed to HIT. It is divided into three sections:

The US healthcare delivery and the key role of the federal government in promoting HIT adoption

The core technologies that drive all contemporary HIT systems and tools

The real world applications of HIT from electronic medical and personal health records to exploiting digital data aggregated from them for research and other purposes","This survey course provides a broad, forward-facing overview of contemporary health informatics within the context of the US healthcare delivery system.","The course is self-contained so there are no academic prerequisites. A knowledge of web programming (e.g. Java, Javascript, C++, C#) is required by at least some members of each team to do the team project.","Healthcare is the largest industry in the US.  Spurred by new federal programs and incentives, the adoption of health IT is growing very rapidly, leading to many new career and entrepreneurial opportunities. The increasing use of modern web, mobile and sensor technologies in health informatics is also growing rapidly and is leading to many new and innovative approaches.  Students who are trained and well-qualified in this field are in great demand.",False,"###Lesson 1: The US Healthcare System
This lesson will discuss unique and the complex nature of the US healthcare system: its key problems, the specific challenges presented by chronic disease, the major disconnect between the health system’s capabilities and the demands of chronic disease management, and the hope that a combination of new incentives, health IT adoption, and new models of care can bridge this disconnect leading to a more efficient, effective, safer and more patient-centered US system of care.
###Lesson 2: Federal Policies & Initiatives
This lesson will focus on the important details of the specific programs that the federal government has put into place to spur health IT adoption by eligible providers and hospitals as well as the role played by financial incentives that reward performance, rather than the quantity of procedures. 
###Lesson 3: Health Information Exchange
This lesson will focus on the rationale for and the major challenges of health information exchange (HIE). We will discuss the various ways of classifying HIE, how to differentiate the various HIE architectures, and the Indiana Health Information Exchange as a premier example including descriptions of its key services. We will discuss new approaches and technologies with a particular emphasis on Direct HIE, a new technology based on secure email and encrypted attachments.
###Lesson 4: Privacy, Security and Trust
This lesson focuses on the keys issues of privacy, security, and trust in a world of digital records and health information exchange. Students will understand the key role that patient engagement plays in chronic disease prevention and management and the concerns patients have about sharing their health data. They will also explore the various privacy consent models. Data segmentation will be discussed as a key challenge for obtaining patient consent under what may be the most acceptable model. The concept of public key infrastructure (PKI) including the roles of the public key, private key, registration authority and certificate authority will be covered.
###Lesson 5A: Data Standards
We divide the discussion of standards into those for health data and those for achieving its sharing by fostering interoperability. This lesson  focuses on data standards after reviewing the rationale for standards and the evolutions that have been taking place in their use, technology and structure. Students will be able to recognize the difference between a classification and an ontology.  They will be familiar with the key data standards (including ICD, CPT, LOINC and SNOMED). They will also gain an overview of the differences between standards based on EDI/X12 and XML.
###Lesson 5B: Interoperability Standards
This lesson builds on Lesson 5A on data standards to show how these data are transmitted within messages using HL7 and packaged into CCDA-based clinical documents for sharing via HIE. We’ll briefly introduce even more advanced standards with a particular emphasis on clinical decision support (CDS, an important technology for the future) and the key elements of and remaining challenges with standards to support CDS. We’ll also discuss more facile next generation approaches based on web technologies and approaches. 
###Lesson 6: Clinical Data Collection and Visualization Challenges
Students should understand the key roles that data plays in medical practice and the root causes of common data quality issues in general and the specific root causes of data quality issues with respect to electronic health records. They should understand the high level challenges of efficiently and accurately collecting high quality, comprehensive clinical data from physicians and of visualizing digital health data in a way that supports the provider’s mental model. They should understand the key roles that information technology plays in the future vision of healthcare.
###Lesson 7: Empowering the Patient
Students should understand the key role that support for patients can play so they can achieve behavior change, adhere to their prescribed treatments and generate data to help their providers more continuously manage their chronic diseases. They should understand patient interests. They should understand the key information technology tools now available to patients including patient health records, portals, social networking, in home technologies and mobile devices and sensors. They should have a detailed functional understanding of personal health records and their potential as app platforms. They should understand the potential role of social networking in patient education and care management. They should understand the various telemedicine modalities being developed and offered for use by patients at home.
###Lesson 8: Population Health Management
Students should understand the difference between individual patient management, population management and public health. They should understand the technologies for aggregating data, the kinds of data that are collected and the kinds of reports that are required for population and public health management.
###Lesson 9: Data Query in a Federated Environment
Students should understand the challenges of data query and aggregation in an environment where care providers are using disparate and non-interoperable EHRs. They should be familiar with and understand the differences among the distributed query technologies. They should be familiar with the distributed query standards and the various open source query frameworks reviewed in this lesson.
###Lesson 10: Big Data Meets Healthcare
Students should understand the concept of “big data”; the common technical approaches to modeling and simulation and the common applications of each. They should be familiar with the specific case studies of analytic applications to healthcare problems as diverse as improved clinical decision support, understanding clinical processes, modeling care spaces and providing optimal patient-specific treatments.",,False,5,weeks,False
ud810,"Introduction to Computer Vision",https://www.udacity.com/course/introduction-to-computer-vision--ud810?utm_medium=referral&utm_campaign=api,"Offered at Georgia Tech as CS 6476",intermediate,False,https://lh3.googleusercontent.com/uWE0231t3xM35vp8r30Nd2D3mXcX8fetc_5riLYaETXj0tC1f9OD5rF1ZMIZGsODc-yf6AdLgEZg97cgN0bA=s0#w=1440&h=885,https:https://lh3.googleusercontent.com/6O1QTIeMjkmTlyGgXtEskz69mdi8gkKjHrXpCIle2l2BBxsXPe0DX6Eq61HPbGNe-ddyN37CQ0ugiOa-hz8=s0#w=1170&h=242,,"This course provides an introduction to computer vision including fundamentals of image formation, camera imaging geometry, feature detection and matching, multiview geometry including stereo, motion estimation and tracking, and classification. We’ll develop basic methods for applications that include finding known models in images, depth recovery from stereo, camera calibration, image stabilization, automated alignment (e.g. panoramas), tracking, and action recognition.  We focus less on the machine learning aspect of CV as that is really classification theory best learned in an ML course.

The focus of the course is to develop the intuitions and mathematics of the methods in lecture, and then to learn about the difference between theory and practice in the problem sets. All algorithms work perfectly in the slides. But remember what [Yogi Berra](http://yogiberramuseum.org/just-for-fun/yogisms/) said: In theory there is no difference between theory and practice. In practice there is. (Einstein said something similar but who knows more about real life?) In this course you do not, for the most part, apply high-level library functions but use low to mid level algorithms to analyze images and extract structural information.","This course provides an introduction to computer vision including fundamentals, methods for application and machine learning classification.","- Data structures: You'll be writing code that builds representations of images, features, and geometric constructions.
- A good working knowledge of Matlab and/or Python with NumPy. The lecture videos use Matlab for occasional demonstration because the instructor is too old to change. Problem sets will be done in Matlab or Python. As mentioned in the resources note below, you can use either Matlab or the open source version Octave.
- This course has more math than many CS courses: Linear algebra, vector calculus, and linear algebra (that is not a typo).
- No prior knowledge of vision is assumed though any experience with Signal Processing is helpful.","Images have become ubiquitous in computing. Sometimes we forget that images often capture the light reflected from a physical scene. This course gives you both insight into the fundamentals of image formation and analysis, as well as the ability to extract information much above the pixel level. These skills are useful for anyone interested in operating on images in a context-aware manner or where images from multiple scenarios need to be combined or organized in an appropriate way.",False,"A brief outline of units is given below, grouped into 10 parts:

### 1	Introduction
- 1A	Introduction

### 2	Image Processing for Computer Vision
- 2A	Linear image processing
- 2B	Model fitting
- 2C	Frequency domain analysis

### 3	Camera Models and Views
- 3A	Camera models
- 3B	Stereo geometry
- 3C	Camera calibration
- 3D	Multiple views

### 4	Image Features
- 4A	Feature detection
- 4B	Feature descriptors
- 4C	Model fitting

### 5	Lighting
- 5A	Photometry
- 5B	Lightness
- 5C	Shape from shading

### 6	Image Motion
- 6A	Overview
- 6B	Optical flow

### 7	Tracking
- 7A	Introduction to tracking
- 7B	Parametric models
- 7C	Non-parametric models
- 7D	Tracking considerations

### 8	Classification and Recognition
- 8A	Introduction to recognition
- 8B	Classification: Generative models
- 8C	Classification: Discriminative models
- 8D	Action recognition

### 9	Useful Methods
- 9A	Color spaces and segmentation
- 9B	Binary morphology
- 9C	3D perception

### 10	Human Visual System
- 10A	The retina
- 10B	Vision in the brain

---
**GT OMSCS Students**

Note: Please refer to your course website/schedule for further details, assignments, etc.

**Spring 2015 resources** (old):

- [Schedule](https://docs.google.com/spreadsheets/d/1ecUGIyhYOfQPi3HPXb-7NndrLgpX_zgkwsqzfqHPaus/pubhtml): Suggested pace, assignments, deadlines, references.
- [Course website](http://www.cc.gatech.edu/~afb/classes/CS4495-Spring2015-OMS/): Course information, problem sets, academic policies, grading scheme.
- [Piazza forum](https://piazza.com/class/i4fze20e9lh1o9): Discussions, announcements, clarifications. 
- [T-Square site](https://t-square.gatech.edu/portal/site/gtc-4a26-e369-5db2-8cec-fb426ed49513): Problem set submissions.

Note: This course was previously offered as CS 4495.",,True,4,months,False
ud821,"Software Architecture & Design",https://www.udacity.com/course/software-architecture-design--ud821?utm_medium=referral&utm_campaign=api,"Offered at Georgia Tech as CS 6310",intermediate,False,https://lh3.ggpht.com/5ZaG0rk58jrfNdi0S89uZ4PfA-ae6dxhQYv1Zp3jktqqhiHf9XwSSaoVt6_0l-D0qrZwPOf52hGDIY40bMJP=s0#w=1725&h=1060,https://lh5.ggpht.com/rSvibDbIj3iw2npwUSF6aAO4b-k33h6jFRCxxmPzTP_RK40fC8Bd1JQ6jySzgutNMTVUaDo9fxzmJuQ2lQ=s0#w=2340&h=484,,"Software Architecture and Design teaches the principles and concepts involved in the analysis and design of large software systems. This course is split into four sections: (1) Introduction, (2) UML and Analysis, (3) Software Architecture, and (4) Software Design.","Software Architecture and Design teaches the principles and concepts involved in the analysis and design of large software systems.","Students are expected to have completed an undergraduate software engineering course or have industry experience in software development. Additionally all students must follow the policies listed on the [Course Wiki](https://www.udacity.com/wiki/saad).

For other requirements, see [Udacity's Technology Requirements](https://www.udacity.com/tech-requirements).","This course will equip students with the skills and knowledge necessary to accomplish the following objectives:

- Express the analysis and design of an application using UML
- Specify functional semantics of an application using OCL
- Specify and evaluate software architectures
- Select and use appropriate architectural styles
- Understand and apply object-oriented design techniques
- Select and use appropriate software design patterns
- Understand and perform a design review",False,"The [Course Wiki](https://www.udacity.com/wiki/saad) serves as the syllabus for Software Architecture and Design. But, for a high-level view of the course, we have listed the lessons:

### Part 1:  Introduction

- Lesson 1: Introduction
- Lesson 2: Text Browser Exercise (Analysis)
- Lesson 3: Design Concepts

### Part 2:  UML and Analysis

- Lesson 1: Review of UML
- Lesson 2: Object Oriented Analysis Exercise
- Lesson 3: UML Class Models
- Lesson 4: Design Studies
- Lesson 5: Library Exericse (UML)
- Lesson 6: Formal Specification
- Lesson 7: OCL
- Lesson 8: Library Exercise (OCL)
- Lesson 9: Behavior Modeling
- Lesson 10: Clock Radio Exercise

### Part 3: Software Architecture

- Lesson 1: KWIC Exercise
- Lesson 2: Overview of Software Architecture
- Lesson 3: Architectural Views
- Lesson 4: Text Browser Exercise (Architecture)
- Lesson 5: Non-Functional Requirements  and Architectural Styles
- Lesson 6: Connectors
- Lesson 7: Acme
- Lesson 8: Refinement
- Lesson 9: Middleware
- Lesson 10: Guest Interview: LayerBlox

### Part 4: Software Design

- Lesson 1: Components
- Lesson 2: Coffee Maker Exercise
- Lesson 3: Object Design
- Lesson 4: Design Patterns
- Lesson 5: Design Principles
- Lesson 6: Design Reviews
- Lesson 7: Design Review Exercise",,True,2,months,False
ud825,"Android Performance",https://www.udacity.com/course/android-performance--ud825?utm_medium=referral&utm_campaign=api,"Optimizing Apps for Speed and Usability",advanced,False,https://lh3.googleusercontent.com/aUGHKLzBnrpJaHbnGVSRShnAj6GqDXoNMRG13-RJfHjw0LJOyEpPSsxGLxOdjwBVji02tcATbfmn2l50rUg=s0#w=1724&h=1060,https://lh6.ggpht.com/8N0H7NoJNFO1PZ-0Onez0kjfUxajYwgVREb7ls21mhfT0eGY79PjgvVpS_hbkNfmdjJssoXWddp-Wl-ewA=s0#w=4680&h=968,,"If you’ve ever hit performance issues that affect your app’s usability, this course will teach you how to identify and diagnose your performance problems. By the end of this course, you’ll be able to perform exploratory tests, run profiling tools, use outputs to navigate to problematic code, and design a plan of attack to mitigate poor performance. You’ll also gain a higher level of understanding about how program code and the Android platform interact, which will help you optimize for performance in the future.","Performance matters to users, so it must matter to you. Learn how to identify and fix bottlenecks in your Android applications, and ensure a smooth user experience.","To get the most from this course, you should have experience developing apps in Java on Android devices, understand the basics of the Android life cycle, and know how to perform basic operations in a terminal.    

You also need access to an Android device, and working knowledge of Github, in order to follow along with the exercises. 

If you’ve never developed a working Android app, check out our <a href=""http://www.udacity.com/course/ud853"" target=""_blank"">Developing Android Apps</a> course before taking this one.

If you're unfamiliar with Github, check out our course on <a href=""http://www.udacity.com/course/ud775"" target=""_blank"">How to Use Git and Github</a>.","Users want apps that download and run fast and efficiently. If your app performs well on low-end devices and slower internet connections, your user base, and thus your impact and potential for monetization, can increase dramatically. The ability to make conscious coding decisions that focus on the user experience is a trait that separates mediocre Android programmers from the leaders of the industry.  

You may have the most exciting Android app in the world, but if it is slow and drains the battery, users will uninstall it, and leave you bad ratings because of it. Performance matters to users, so it must matter to you. 

By the end of this course, you will understand how common performance problems arise from your hardware, OS, and application code. Using profiling tools to gather data, you will be able to identify and fix performance bottlenecks, so users can have that smooth 60 FPS experience that will keep them coming back for more.",False,"### Lesson 0: Welcome!
An introduction to the course content and structure.
### Lesson 1: Render
How to identify and diagnose the key performance problems that come with drawing to the screen. 
### Lesson 2: Compute and Memory
Understand how code is executed in your program, and how to handle the performance problems associated with compute and memory. 
### Lesson 3: Battery
How to detect and diagnose battery problems, and why it matters to your users.",,False,4,weeks,False
ud827,"Intro to Descriptive Statistics",https://www.udacity.com/course/intro-to-descriptive-statistics--ud827?utm_medium=referral&utm_campaign=api,"Mathematics for Understanding Data",beginner,True,https://lh5.ggpht.com/nARp_CeSO3ILiHej7K63IJmbN2pzBNlz5A_btbgWiZTOMA9A03__DgsdO2ltcKk8ocEXjclUCmlI3aOkuBcu=s0#w=436&h=268,https://lh3.ggpht.com/Y0z3c78ak_cooz9fomEdLeFN83jGp-mOJk82p8PFVJTbkrCVGkEIdAeitEIEeeOXTmrdl9HCHgJLBSWIq_wX=s0#w=4680&h=968,,"Statistics is an important field of math that is used to analyze, interpret, and predict outcomes from data. Descriptive statistics will teach you the basic concepts used to describe data. This is a great beginner course for those interested in Data Science, Economics, Psychology, Machine Learning, Sports analytics and just about any other field.","Intro to Descriptive Statistics will teach you the basic concepts of statistics that can be used to extract information from data.","This course assumes understanding of basic algebra and arithmetic.","This course will teach you the basic terms and concepts in statistics as well as guide you through introductory probability. 
<br> <br>
You will learn how to....

- Use statistical research methods.
- Compute and interpret values like: Mean, Median, Mode, Sample, Population, and Standard Deviation.
- Compute simple probabilities. 
- Explore data through the use of bar graphs, histograms, box plots, and other common visualizations.
- Investigate distributions and understand a distributions properties.
- Manipulate distributions to make probabilistic predictions on data.",False,"### Lesson 1 : Intro to Research Methods
You will be introduced to several statistical study methods and learn the positives and negatives of each. 
### Lesson 2 : Visualizing Data
You will learn how to take your data and display it to the world. You will learn to create and interpret histograms, bar charts, and frequency plots.
### Lesson 3 : Central Tendency
In this lesson you will learn to compute and interpret the 3 measures of center for distributions: the mean, median, and mode.
### Lesson 4 : Variability
You will learn how to quantify the spread of data using the range and standard deviation. You will also learn how to identify outliers in data sets using the concept of the interquartile range. 
### Lesson 5 : Standardizing
You will learn how to convert distributions into the standard normal distribution using the Z-score. You will also learn how to compute proportions using standardized distributions. 
### Lesson 6 : Normal Distribution
You will learn how to use normalized distributions to compute probabilities. You will also learn how to use the Z-table to look up the proportions of observations above, below, or in between values.  
### Lesson 7 : Sampling Distributions
You will learn how to apply the concepts of probability and normalization to sample data sets.",,True,2,months,False
ud837,"Android Development for Beginners",https://www.udacity.com/course/android-development-for-beginners--ud837?utm_medium=referral&utm_campaign=api,"How to Make an Android App",beginner,True,https://lh3.googleusercontent.com/LzbzRqANeDH43wWQdi1Fp93S_q9Whw62QzmR1mo4Y7CxpF2WFy2KmNgjzqSiBgGMo96UzXBsstAvx6GIa7k=s0#w=1724&h=1060,https://lh3.googleusercontent.com/v55rgzsuQCwBHntjy4WzoWL_ZoNyj1nnfI4D34q4a9uGRDAN2IBopshcVpz46vi2IyMj0jpczcr6lSH8sZmY=s0#w=4680&h=968,,"To access the free version of this course, click the gray button that says <em>Preview Course.</em>

Learn the basics of Android and Java programming, and take the first step on your journey to becoming an Android developer! 

This course is designed for students who are new to programming, and want to learn how to build Android apps. You don’t need any programming experience to take this course. If you’ve been using a smartphone to surf the web and chat with friends, then you’re our perfect target student! 

Learning anything new can be tough. We will walk you through the process of making Android apps, but to get the most out of this course, you must bring your enthusiasm for learning, and budget time on your calendar to learn with us.

By the end of the course, you’ll build two simple (but powerful) apps that you can share with your friends. We also hope that you will learn enough through this course to decide how best to continue your journey as an Android app developer, if you're interesting in pursuing such a path.","Learn the basics of Android and Java programming, and take the first step on your journey to becoming an Android developer!","If you are new to programming and don’t know where to start, then this is the course for you! 

We will use Android Studio to build our apps, so you should have access to a computer that can run Android Studio in order to follow along (see Android Studio's <a href=""https://developer.android.com/sdk/index.html#Requirements"" target=""_blank"">System Requirements</a> for details). Don’t worry, **you do not need to install Android Studio in advance** -- we will provide detailed installation instructions as part of the course. 

Access to an Android device is helpful, but not at all required.

Now, in case you have some programming experience, parts of this course may be too slow for you — you should feel free to skip those sections.

Finally, the **most important prerequisite** is a willingness to learn new things, and belief that you can do this!","If you're a consumer of technology, this course will help you to become a *creator* of technology. You are only limited by your imagination! 

Android powers over 80 percent of the world’s smartphones, and represents an incredible opportunity for developers everywhere. The next billion people coming online will interact with the internet for the very first time on a mobile device. Building for Android gives you the best opportunity to reach these users and make an impact -- both in your community, and on the world.",False,"### Lesson 1: Building layouts
Take your hand drawn app designs and lay them out on the phone screen. In this lesson you’ll learn the XML markup language used to lay out Android applications. You’ll create views, the basic building block of Android layouts, that display text and images. Then you’ll position your text and images on these screens. This highly interactive lesson encourages experimentation through coding challenges in Udacity’s XML Visualizer.

### Practice Set 1
Create a birthday card application for your phone. You’ll start by installing Android Studio, a program used by professional developers to make Android applications. You’ll then transfer a simple application you create from your computer to your phone. Following that, you’ll take all the concepts you learned in Lesson 1 to build your birthday card app, and install it on your phone for your friends and family to see.

### Lesson 2: Making an App Interactive
Harness the power of Java to create an interactive coffee ordering app! You’ll start by writing simple statements in Java that add interactivity to your app. You’ll then incorporate buttons to trigger events. You’ll finally use a fundamental concept in programming, a variable, to keep track of all the coffee drinks ordered.

### Practice Set 2
Reinforce the skills learned in Lesson 2 by creating a basketball score tracker. The first part of the practice set will solidify how to write and use variables before creating your basketball score tracker app.

### Lesson 3: Work with the Android Framework and Control Flow
Take a deeper dive into the Android Framework to complete the Just Java coffee ordering app! You’ll see in more detail how Android works behind the scenes and take your first steps towards learning Object Oriented Programming. You’ll add the ability to add toppings to your coffee, and show a detailed order summary when the customer purchases a coffee.",,True,4,weeks,False
ud849,"UX Design for Mobile Developers",https://www.udacity.com/course/ux-design-for-mobile-developers--ud849?utm_medium=referral&utm_campaign=api,"Learn to Design a 5-Star Android App",beginner,True,https://lh3.googleusercontent.com/fjvDI57Yr-cJGSVWpLP2y9vYt_KmkI2wPYttsLfspVZBSB-y_0Jho2Q63v82FiiDgF8918gzwLt-8CJx5h8=s0#w=1724&h=1060,https://lh6.ggpht.com/BTyvQ0dWSZvWg2gikHDH8oFxx285J-iBSWvV0isCF1nQVC0OP_L9AEv7Yux0TOp0Ad0S_W6e96DUJYvnQg=s0#w=4680&h=968,https://www.youtube.com/watch?v=9gyvr2VET8M,"This course is optimized for the developer who is looking to efficiently learn the most important design techniques that will help them make better apps (with a focus on mobile/Android). 

This is a UX design course built for current (and aspiring) mobile developers. In this short course, you'll step back from your IDE and dive into the techniques that great designers use to plan and prototype amazing apps before any code is written.

####[Download Udacity's Android app](https://play.google.com/store/apps/details?id=com.udacity.android) to keep learning wherever you go!","This is a design course made for developers. You'll learn UX design skills which will help you make 5-star mobile apps that your users will love.","This course is optimized for the developer who is looking to efficiently learn the most important design techniques that will help them make better apps (with a focus on mobile/Android).

That said, programming experience is not required to benefit from the design principles and best practices we teach in this course.","UX (User Experience) is a big deal. Though the term is often confused with User Interface, UI is only only a tiny subset of UX (we’ll talk about the difference in Lesson 1).

You should take this course because well-designed apps are just as important as well-built apps.

The goal of this course is to help you understand the most important and immediately useful techniques and approaches used by great mobile UX designers. This course won’t turn you into a designer, but it will help you incorporate design elements into the products you build.",False,"### Overview
The goal of this course is to help you build better apps by helping you become a design-minded developer. In Lessons 1 and 2, you will learn widely applicable design principles and techniques like high-level UX planning and user-centered design.

In Lessons 3 and 4, you will focus on design ideas specific to mobile/Android development. Mobile platforms all come with a unique set of constraints and opportunities and this lesson will help you respect those constraints while taking advantage of the opportunities. 

### Lessons

#### Lesson 1: What is User Experience?
In this lesson you will think about User Experience from the highest level. You will break down complex apps into a small number of simple steps and think about their big picture flow (including ones that you have worked on in the past or are currently working on). 

*Topics covered:*

* What is UX?
* UI vs. UX
* High-level planning
* Low-fi wireframing and prototyping
* Two concrete app improvements to implement now

#### Lesson 2: User-Centered Design
In this lesson you will learn how to design apps that your users will love. You will learn the importance of user-centered design, what happens when you design for everyone/no one (spoiler alert: it’s generally bad), and how to effectively use tools like personas and use cases to ensure a baseline level of quality for anything you build. You will also learn a bit about how to use cheap and easy user research techniques to make well-informed design decisions. 

*Topics covered:*

* The perils of ignoring your user
* How to create effective personas and use cases
* Low cost user research
* How to use personas and use cases to inform feature lists

#### Lesson 3: Designing for Mobile Constraints

Mobile design and development come with constraints and opportunities. This lesson is about the constraints. You will learn what constraints are inherent to mobile development and how to use design tools and techniques to ensure your app actually respects those constraints. 

*Topics covered:*

* The 5 big constraints: limited data, finite battery, hand-held usage, divided user attention, and small screens.
* The implications of these constraints and what happens when you get them wrong.
* Advanced wireframing

#### Lesson 4: Designing for Android Delight

At this point, you will already know how to make a solid mobile app that users like. But like isn’t enough! In order to be really successful, your app needs to be *loved*. In this lesson, you’ll learn how to leverage the power of Android by using device sensors and Google APIs to understand your user’s context.

*Topics covered:*

* Android sensors
* The importance of contextual apps
* The “components” of context
* Android APIs (Google Play Services)

### Final Project
In your final project, you will create high/mid-level design specifications for your own incredible Android app. You'll begin work on this project in the Assignments for Lesson 2, and continue working on it until the end of the course. 

When it's finished, you will have the blueprint for an app that will:

* Be designed for a specific target user.
* Have an almost-perfect high level flow.
* Avoid all major mobile pitfalls.
* Use Android sensors and APIs to understand your user's context and deliver context-aware moments of amazement that they will love.",,True,6,weeks,False
ud853,"Developing Android Apps",https://www.udacity.com/course/developing-android-apps--ud853?utm_medium=referral&utm_campaign=api,"Android Fundamentals",intermediate,False,https://lh6.ggpht.com/57QPWoDnN4dSulg4tqC_pFHcN5pmUIzyrXyu3TiirP1JRCQ36fzz6IgEPl2HdMZ3GIrc80rRzAkRiPUyOXM=s0#w=1724&h=1060,https://lh3.ggpht.com/GSQMyYy0eEe9jJr1gJCrkPCNCrUKNbOQwxvn1ksFDRyVgfbPYKO0QcE49JBgfRanGeQ0arpV0rIwaJr6CV8=s0#w=4680&h=968,https://www.youtube.com/watch?v=LfVBFFoy9Y0,"As the first course in the <a href=""https://www.udacity.com/course/nd801"" target=""_blank"">Android Developer Nanodegree</a>,  Developing Android Apps is the foundation of our advanced Android curriculum. This course blends theory and practice to help you build great apps the right way. In this course, you'll work with instructors step-by-step to build a cloud-connected Android app, and learn best practices of mobile development, and Android development in particular.

####[Download Udacity's Android app](https://play.google.com/store/apps/details?id=com.udacity.android) to keep learning wherever you go!","Build a cloud-connected Android app, and learn the tools, principles, and best practices of mobile and Android development that you'll apply to your own projects.","**This course is intended for students with at least 1 year of programming experience in Java or another object-oriented programming language** (for example: C++, Objective C or Python). 

If you are new to programming, we recommend taking <a href=""http://www.udacity.com/course/ud837"" target=""_blank"">Android for Beginners</a>, which we created with Google for students just like you!

Also, Udacity's <a href=""http://www.udacity.com/course/cs046"" target=""_blank"">Intro to Java</a> is a helpful background if you're looking to refresh your Java skills.

You will be expected to download <a href=""http://developer.android.com/sdk/installing/studio.html"" target=""_blank"">Android Studio</a> in order to follow along with the instructors throughout the course. For guidance on the install process, take our <a href=""http://www.udacity.com/course/ud808"" target=""_blank"">How to Install Android Studio</a> mini-course.

In addition, you should be comfortable working with code on <a href=""http://www.github.com"" target=""_blank"">GitHub</a>. 

Access to an Android device is helpful -- but not required -- to complete the final project.","With over 1 billion Android devices already activated, Android represents an incredible opportunity for developers.

As Android continues to grow beyond smartphones, it will become the brains behind invisible, ubiquitous cloud-connected computing. The skills you learn in this course will help you build awesome apps for smartphones and tablets today, and propel you towards exciting opportunities in Android's future.

By the end of this course, you’ll build a cloud-connected Android app, and understand the tools, principles, and patterns that underlie all Android development. You’ll understand the challenges associated with developing for the mobile environment (and how to overcome them), learn how to build a great user experience for Android devices, and apply this knowledge to your own projects.",False,"### Lesson 1: Create Project Sunshine with a Simple UI (5-8 hrs) 
Starting by installing Android Studio, you’ll create your first project with a simple list-based user interface and built and deploy it to virtual and actual devices. You’ll also discover what makes mobile - and Android in particular - a unique environment for app development.

* Android Studio, Gradle, and debugging tools
* User Interface and Layout managers
* ListViews and Adapters

### Lesson 2: Connect Sunshine to the Cloud (8-10 hrs) 
Replace the mock data with real weather data by connecting Sunshine up to an Internet back-end courtesy of the Open Weather Map API. You’ll learn how to add permissions to your app, initiate network I/O, and how to move time consuming tasks like network data transfers  off the main UI thread.

* Threading and ASyncTask
* HTTP requests on web APIs
* Android Permission System

### Lesson 3: Create New Activities and Navigate Apps with Intents (8-10 hrs) 
Give your app structure and create more complex Activities. You’ll learn about Android’s Intent framework, and how to use Intents to navigate between Activities, both within your app and as a way to add 3rd party functionality.

* App navigation with Explicit Intents
* Implicit Intents to incorporate 3rd-party apps 
* Share Intent and the Android sharing framework
* Broadcast Intents and Broadcast Receivers

### Optional Project: Popular Movies, Stage 1 (5-10 hours)
Build an app to help users discover popular and recent movies. You will build a clean UI, sync to a server, and present information to the user.

### Lessons 4: Use Content Providers and Loaders to Persist and Recover Data (15-20 hrs) 
Learn how the Android framework manages the activity lifecycle, and how it differs from what you might expect, and dive head-first into the world of persistent storage. Learn how to create databases, use Android’s Content Providers to provide an abstraction layer between your data and your UI implementation, and use Loaders to efficiently load stored data.

* Activity lifecycle and background activity termination
* SQLite databases and JUnit tests
* Creating and using a Content Provider as an abstraction layer
* Using Loaders to asynchronously load data
* Creating Adapters to bind UI components to Content Providers

### Lesson 5: Implement Rich and Responsive Layouts (8-10 hrs) 
Create rich, responsive user interfaces that work across a variety of different hardware types and screen sizes. You’ll learn more details on using the Android Layout managers, Fragments, UI widgets, and Android design principles to add visual polish to your user interfaces, and how to create your own controls from scratch.

* Fundamental Android design principles
* Supporting localization and variable screen sizes 
* Optimizing tablet UIs using Fragments
* Accessibility Features
* Custom views

### Lesson 6: Use Services and Notifications to Run in the Background (5-8 hrs) 
Deliver a great user experience, even when your app isn’t visible. Learn how the Android framework manages background apps; and discover how to use Services and Notifications to make your app to be active when it’s not in the foreground. You’ll learn techniques for efficient data transfers using SyncAdapters and Google Cloud Messaging, so your app can stay up-to-date without draining the battery.

* Background services and alarms to schedule background tasks
* Efficient background data transfers with SyncAdapters 
* Rich notifications to interact with users

### Optional Project: Popular Movies, Stage 2 (4-6 hours)
Add to the app you built in Stage 1 by building on the detail view for each movie, allowing users to 'favorite' movies, and adding a tablet layout.

### Final Project (10-20 hours)
Build your own Android app incorporating the skills you've learned in this course.",,True,10,weeks,False
ud855,"Advanced Android App Development",https://www.udacity.com/course/advanced-android-app-development--ud855?utm_medium=referral&utm_campaign=api,"Productionize and Publish Your Apps",advanced,False,https://lh3.googleusercontent.com/-GpqtaqrSzJmmVv4n0NPiLBHv6VXv1ThyGeB4VFTd-S65c11SBzBdkAG9quCsv4zof62AjzlycEo0SR-CdA=s0#w=1724&h=1060,https://lh5.ggpht.com/ummA9NZSCk65Iruu0CqI2U6iParreo9K6oJZINdjH5K_QunRkl8yLEiNmlCPooeVXo4RdWpEzYlYPwwmVgc=s0#w=4680&h=968,https://www.youtube.com/watch?v=5pltH5NWYgw,"This course will guide you through the process of productionizing an app, using Sunshine, the weather app we built in <a href=""https://www.udacity.com/course/ud853"" target=""_blank"">Developing Android Apps</a>. Following Android's <a href=""http://developer.android.com/distribute/essentials/quality/core.html"" target=""_blank"">Core App Quality Guidelines</a>, we'll identify the production criteria that still needs to be implemented, then tackle each problem until Sunshine is ready to publish on the Google Play Store. In the process, we'll introduce you to a host of tools and concepts, including: material design approaches, image-handling, performance profiling, and more!","Make your app production-ready by applying advanced features like library integration, material design, widgets, receiving cloud messages, and more!","To get the most out of this course, you should have at least 1-2 years of Java experience, and prior experience developing Android apps. If you lack experience in Android development, please take this course's predecessor, <a href=""https://www.udacity.com/course/ud853"" target=""_blank"">Developing Android Apps</a> prior to enrolling in this one. 

Access to an Android device is helpful, but you may use an emulator if you prefer.

We will share code for this course on Github, so you must be familiar with using Github to complete the activities and final project. Take our course on <a href=""https://www.udacity.com/course/how-to-use-git-and-github--ud775"" target=""_blank"">Using Git and Github</a> if you lack this background.","As a professional <a href=""https://www.udacity.com/course/nd801"" target=""_blank"">Android developer</a>, you have to create production-ready apps for your users. This class will give you what it takes to ship polished apps as part of a development team at a company, an independent app developer, or just as a programmer using Android development best practices.

By the end of the course, you'll be able to identify critical areas for improvement in an app, and implement the necessary changes and refinements to ensure it meets Android's Core App Guidelines prior to shipping.",False,"### Lesson 1: Product Quality 
Overview of product quality standards, and an introduction to the goals and structure of this course. 

### Lesson 2: Integration Points and Error Cases
Identify and resolve integration points, including offline/server integration, and validate user input in the Sunshine app. 

### Lesson 3: Accessibility and Localization
Expand the audience for your app by making it accessible and easily localized. 

### Lesson 4: Libraries
Use libraries to handle images, and allow users to personalize their Sunshine experience with custom icons.

### Lesson 5: Google Cloud Messaging
Implement a message receiver, and learn how to send messages to Sunshine using the Google Cloud Messaging interface.  

### Lesson 6: Material Design
Apply material design principles to Sunshine's activity transitions, keylines and layouts. 

### Lesson 7: Building a Total Experience
Build and implement resizable widgets and immersive wallpaper images. 

### Lesson 8: Performance 
Use profiling tools in Android Studio to identify performance leaks.

### Final Project
You will productionize two apps, taking them from a functional state to a production-ready state.This will involve finding and handling error cases, adding accessibility features, and adding a library.",,False,6,weeks,False
ud858,"Developing Scalable Apps in Python",https://www.udacity.com/course/developing-scalable-apps-in-python--ud858?utm_medium=referral&utm_campaign=api,"with Google App Engine",advanced,False,https://lh3.googleusercontent.com/9fwXP0SWubtZ2oZ79VBM2ElC5HQ-Q9_9Wql_LUr7ZD_qoNVM70uZCmyu0sXtqk_J-aC5kxcfgN7-XvoljA=s0#w=1753&h=1077,https://lh3.googleusercontent.com/JHrwe1FipXiPTLj_IDWnhIIAyIo0qpldEm2OQbgM_5qsH1cl_MQo1mFzrkkmqKRSpS5lwVPDeEVf568smnn5=s0#w=4680&h=968,,"You will learn about challenges of building applications that can serve hundreds of thousands of users, and how you can prepare for them as a developer. And more importantly - you will learn how to harness the power of **App Engine** - Platform as a Service, run by Google, so you can focus on your application's features, not on managing infrastructure that runs your app. Let Google run and scale the infrastructure and do what you do best - write code! 

However, to use App Engine effectively, you have to learn how it works, and this is exactly what this course will teach! You will also learn the best practices of using <a href=""https://cloud.google.com/products/cloud-endpoints/"" target=""_blank"">Cloud Endpoints</a> that allow you to easily create API services and make them accessible to iOS, Android and Javascript clients. They allow you to automatically generate client libraries to make wiring up the frontend easy. And there are some nifty built-in features, like denial-of-service protection and OAuth 2.0 support.","You will learn about challenges of building applications that can serve hundreds of thousands of users, and how you can prepare for them as a developer.","You should be fairly comfortable programming in Python, preferably with some experience developing web applications and working with databases for at least a year. You will be developing the backend of a sample app, so you don’t have to worry about HTML or JavaScript.

You should have sufficient permissions to install new software on your computer, and comfortable configuring it, including setting up system variables.

We will be using Maven and Eclipse for this course, and we strongly suggest that you use them as well.","Cloud computing is one of the fastest growing fields right now. And no wonder - it provides an easy and affordable way to run your applications. However, the traditional way of hosting and scaling applications on Virtual Machines in the Cloud comes with a cost - even if the infrastructure is virtual, you still have to manage it - do load balancing, bring instances up and down, take care of patching your software and in general spend a lot of your time and resources on just the infrastructure. 

Google is one of the pioneers in the business of scaling, and now you can use their infrastructure, and let them do all the scaling work so that you can focus on the unique features your app provides.

Are you a Java developer? If so, maybe you'd like to check out our <a href=""https://www.udacity.com/course/developing-scalable-apps-in-java--ud859"" target=""_blank"">Developing Scalable Apps with Java</a> course.

Project
-------------
There will be an overarching project throughout the course, starting from Lesson 2. You will develop an application for organizing conferences, similar to sites like meetup.com or eventbrite.com. We have provided the frontend of the app, and all your effort will go into making the backend.

And because you will be using Cloud Endpoints, it’s really easy to hook up your backend with a native mobile app. We have created an Android app that uses the same backend as the web frontend. You will able to recompile it against your backend, if you so wish!

At the end of the course you will do a final project, where you will have to expand the functionality of the same app.",False,"###Overview
This course consists of 6 lessons. First one is an overview of cloud computing and the benefits of Platform as a Service. Lessons 2-5 will cover important theoretical concepts of Google App Engine and also plenty of hands-on exercises implementing what you have learned. Lesson 6 will be a short intro on an easy way to create native mobile apps that talk to your backend.

###Lesson 1: Scalability Basics
Do you know how and why server racks were invented years ago? Have you realized all of the problems that you have to solve if you will try to scale your app by yourself? Learn about a better way.

###Lesson 2: Getting Started
Set up your first App Engine project and learn how to define Cloud Endpoints. 

Start the course project app - Conference Central and add authentication and user profiles.

###Lesson 3: Storing and Retrieving Data
One of the most important things you want to do in your app is storing data. In this lesson you will learn what is Google App Engine Datastore, how is it different from RDBMS and how you can use it in your applications.

Add the ability to store and retrieve user profiles and conferences to the course project app.

###Lesson 4: Advanced Datastore Concepts
Learn more about how Datastore works, including queries, filters, indexes and transactions. 

Add different ways to query conferences.

###Lesson 5: Advanced App Engine Topics
There are a lot of things you might want your application to do in background, without making the user wait, or even initiate the process. Learn about task queues and cron jobs and how you can use them to add advanced functionality to your app. You will also learn about Memcache, and get an overview of topics like Edge Caching, AppStats and other methods of optimizing your apps performance.

Add a push queue, cron job and a customized Memcache entry to your app.",,False,6,weeks,False
ud859,"Developing Scalable Apps in Java",https://www.udacity.com/course/developing-scalable-apps-in-java--ud859?utm_medium=referral&utm_campaign=api,"with Google App Engine",advanced,False,https://lh4.ggpht.com/8Cb3zFphgqikhWUZKSUoKs9iRUmQ-BNGjGDNVjmDFwUZvyrNyqntiqS2T1I2iSQIKB05NKvJ4ZYp4Fa_hgk=s0#w=1724&h=1060,https://lh4.ggpht.com/Kb0P_aGrh1VkUYUAFqF_wUjsFOeMW52VHYYb7cg_wnDRhURTsKYizWZgWky4XByh9p5MisARsmusGdt8jDI=s0#w=4680&h=968,https://www.youtube.com/watch?v=zdHgI3hOsHo,"You will learn about challenges of building applications that can serve hundreds of thousands of users, and how you can prepare for them as a developer. And more importantly - you will learn how to harness the power of **App Engine** - Platform as a Service, run by Google, so you can focus on your application's features, not on managing infrastructure that runs your app. Let Google run and scale the infrastructure and do what you do best - write code! 

However, to use App Engine effectively, you have to learn how it works, and this is exactly what this course will teach! You will also learn the best practices of using <a href=""https://cloud.google.com/products/cloud-endpoints/"" target=""_blank"">Cloud Endpoints</a> that allow you to easily create RESTful services and make them accessible to iOS, Android and Javascript clients. They allow you to automatically generate client libraries to make wiring up the frontend easy. And there are some nifty built-in features, like denial-of-service protection and OAuth 2.0 support.","You will learn about challenges of building applications that can serve hundreds of thousands of users, and how you can prepare for them as a developer.","You should be fairly comfortable programming in Java, preferably with some experience developing web applications and working with databases for at least a year. You will be developing the backend of a sample app, so you don’t have to worry about HTML or JavaScript.

You should have sufficient permissions to install new software on your computer, and comfortable configuring it, including setting up system variables.

We will be using Maven and Eclipse for this course, and we strongly suggest that you use them as well.","Cloud computing is one of the fastest growing fields right now. And no wonder - it provides an easy and affordable way to run your applications. However, the traditional way of hosting and scaling applications on Virtual Machines in the Cloud comes with a cost - even if the infrastructure is virtual, you still have to manage it - do load balancing, bring instances up and down, take care of patching your software and in general spend a lot of your time and resources on just the infrastructure. 

Google is one of the pioneers in the business of scaling, and now you can use their infrastructure, and let them do all the scaling work so that you can focus on the unique features your app provides.

Are you a Python developer? If so, maybe you'd like to check out our <a href=""https://www.udacity.com/course/ud858"" target=""_blank"">Developing Scalable Apps in Python</a> course.

Project
-------------
There will be an overarching project throughout the course, starting from Lesson 2. You will develop an application for organizing conferences, similar to sites like meetup.com or eventbrite.com. We have provided the frontend of the app, and all your effort will go into making the backend.

And because you will be using Cloud Endpoints, it’s really easy to hook up your backend with a native mobile app. We have created an Android app that uses the same backend as the web frontend. You will able to recompile it against your backend, if you so wish!

At the end of the course you will do a final project, where you will have to expand the functionality of the same app.",False,"###Overview
This course consists of 6 lessons. First one is an overview of cloud computing and the benefits of Platform as a Service. Lessons 2-5 will cover important theoretical concepts of Google App Engine and also plenty of hands-on exercises implementing what you have learned. Lesson 6 will be a short intro on an easy way to create native mobile apps that talk to your backend.

###Lesson 1: Scalability Basics
Do you know how and why server racks were invented years ago? Have you realized all of the problems that you have to solve if you will try to scale your app by yourself? Learn about a better way.

###Lesson 2: Getting Started
Set up your first App Engine project and learn how to define Cloud Endpoints. 

Start the course project app - Conference Central and add authentication and user profiles.

###Lesson 3: Storing and Retrieving Data
One of the most important things you want to do in your app is storing data. In this lesson you will learn what is Google App Engine Datastore, how is it different from RDBMS and how you can use it in your applications.

Add the ability to store and retrieve user profiles and conferences to the course project app.

###Lesson 4: Advanced Datastore Concepts
Learn more about how Datastore works, including queries, filters, indexes and transactions. 

Add different ways to query conferences.

###Lesson 5: Advanced App Engine Topics
There are a lot of things you might want your application to do in background, without making the user wait, or even initiate the process. Learn about task queues and cron jobs and how you can use them to add advanced functionality to your app. You will also learn about Memcache, and get an overview of topics like Edge Caching, AppStats and other methods of optimising your apps performance.

Add a push queue, cron job and a customised Memcache entry to your app.

###Lesson 6: App Engine and Mobile Apps
You have been using Cloud Endpoints in the app, and now it’s time to see how you can use them in a mobile app. Learn how to generate native libraries for Android and iOS that can talk to your backend. You can even recompile the Android app we provide with our course, to work against your own project. How cool is that?

Generate mobile client libraries for your app.",,True,2,months,False
ud860,"Browser Rendering Optimization",https://www.udacity.com/course/browser-rendering-optimization--ud860?utm_medium=referral&utm_campaign=api,"Building 60 FPS Web Apps",advanced,False,https://lh3.googleusercontent.com/TCIotpqYq6buQavNxTkzCKsZyEe2oGA-7T3Zuj9WZ-grpwW_CYZanAqX9fa95fToe0soV7LzfrItKPtoBg=s0#w=2127&h=1307,https://lh3.googleusercontent.com/w8un-82kDAB2d0li3dVYZHJOYSB8eXwJqyNj4epSaSz4pZTNe_axn4qnV8TnUqRwkpMxUsk0akss0ZuhUVQ=s0#w=4680&h=968,https://www.youtube.com/watch?v=BdADrVUIN1U,"<a href=""https://twitter.com/hashtag/PERFMATTERS?src=hash"" target=""_blank"">Performance matters</a> to users. Web developers need to build apps that react quickly and render smoothly.

Google performance guru Paul Lewis is here to help you destroy <a href=""http://jankfree.org/"" target=""_blank"">jank</a> and create web apps that maintain 60 frames per second performance.

You'll leave this course with the tools you need to profile apps and identify the causes of jank. You'll explore the browser's rendering pipeline and uncover patterns that make it easy to build performant apps.","This course will demystify the browser's rendering pipeline and make it easy for you to build high performance web apps.","* You're a web developer who has written apps using HTML, CSS and JavaScript.
* You have used <a href=""https://developer.chrome.com/devtools"" target=""_blank"">Chrome DevTools</a>.
* (Recommended) Background knowledge about the critical rendering path from <a href=""https://www.udacity.com/course/ud884"" target=""_blank"">Website Performance Optimization</a> will be helpful.","Demystifying the browser's rendering pipeline will make it easy for you to build high performance web apps. By following a few simple principles, you'll be capable of drastically reducing the browser's workload and time needed to render each frame.

You'll start by getting introduce to the individual steps of the rendering pipeline, beginning with parsing HTML and ending with painting pixels on the screen. Then you'll quickly dive into tooling with ample opportunities to practice profiling and debugging apps with Chrome Developer Tools.

The final project uses the <a href=""https://github.com/HackerNews/API"" target=""_blank"">Hacker News API</a> and gives you an opportunity to show off everything you've learned as you turn an awful experience into a high performance web app!",False,"###Project

*The News Aggregator App* - Turn an unusable app into a high performance, 60 frame per second experience. You'll be given a news aggregator app that uses the <a href=""https://github.com/HackerNews/API"" target=""_blank"">Hacker News API</a> to display the day's top stories. The news aggregator has *lots* of performance issues. You'll demonstrate your understanding of performance by destroying all the jank and creating an experience that users will love.

###Lesson 1 - The Critical Rendering Path

* You'll play Jank Invaders to develop your eye for jank!
* You'll learn how the browser turns HTML into pixels on the page
* You'll learn how different CSS styles affect the rendering pipeline differently.

###Lesson 2 - App Lifecycles

* You'll learn how there are four distinct phases in an app's lifecycle: Response, Animation, Idle and Load (RAIL).
* You'll learn how your frame budget changes depending on where the user is in RAIL.
* You'll practice thinking through app workloads at different stages in RAIL.

###Lesson 3 - Weapons of Jank Destruction

* You'll learn how to make sense of the Timeline panel in Chrome DevTools.
* You'll practice profiling a few different apps to find the source of jank.

###Lesson 4 - JavaScript

* You'll optimize JavaScript to hit 60fps during animations.
* You'll move expensive JavaScript operations off the main thread and into Web Workers.
* You'll debug a janky copy of a production quality app - <a href=""https://qrsnapper.appspot.com/"" target=""_blank"">the QR Snapper</a>.

###Lesson 5 - Styles and Layout

* You'll learn how accessing the wrong CSS properties at inopportune moments can create loads of extra work for the browser.
* You'll debug multiple instances of one of the nastiest performance problems - Forced Synchronous Layout.

###Lesson 6 - Compositing and Painting

* You'll practice profiling layer and paint performance with the paint profiler tool in the DevTools Timeline.
* You'll manage and optimize layers to reduce the number of steps the browser needs to take to render each frame.
* You'll demonstrate everything you've learned about performance as you de-jankify the News Aggregator App!",,False,1,months,False
ud862,"Material Design for Android Developers",https://www.udacity.com/course/material-design-for-android-developers--ud862?utm_medium=referral&utm_campaign=api,"Make Your Android Apps Material",intermediate,False,https://lh3.googleusercontent.com/_nio_GWBSc0BCCk_aHyBn766-ddp1mrod05GJzQSAA_IkWQ7Uxfv33OFJfMJU5uULj3V01AfT3e6YgFGcg=s0#w=1724&h=1060,https://lh3.googleusercontent.com/JKVkrxyDfjPspicWCEKK7KoI2kW9f6AezDQKNEqmb03qc77-C2qgtSZzSeS8j28Sj2aUwtH2mC_fGvvMBA=s0#w=4680&h=968,https://www.youtube.com/watch?v=zjOmYM8kz4o,"In this course, you'll learn how to apply the material design principles that define Android's visual language to your apps. We'll start by walking you through Android design fundamentals, then we'll show you how to apply this knowledge to transform design elements of sample apps. By the end of the course, you'll understand how to create and use material design elements, surfaces, transitions and graphics in your app, across multiple form factors.","Learn and apply the material design principles that define Android's visual language to your apps.","To get the most out of this course, you should have prior experience developing Android apps. If you lack this experience, please take <a href=""https://www.udacity.com/course/ud853"" target=""_blank"">Developing Android Apps</a> prior to enrolling in this one. We also recommend taking <a href=""https://www.udacity.com/course/ud855"" target=""_blank"">Advanced Android App Development</a> if you are interested in publishing your app to the Google Play Store.

To follow along with course activities, you **must** have access to the latest release of <a href=""https://developer.android.com/sdk/index.html"" target=""_blank"">Android Studio</a>, and should have access to an Android device for running and testing your apps.  

We share code through Github, so you must be familiar with using Github to access code. Take our course on <a href=""https://www.udacity.com/course/how-to-use-git-and-github--ud775"" target=""_blank"">Using Git and Github</a> if you lack this background.","What makes an app intuitive or easy to use? What makes it hard or frustrating?  Learning the foundations of good design and platform-specific design patterns will help you create better apps for your users.",False,"### Lesson 1: Android Design Fundamentals
Understand and apply the fundamentals of Android design to your app, and experiment with app structures, common navigation patterns and themes. 

### Lesson 2: Surfaces
Understand how to use surfaces to structure the hierarchy and interaction of elements in an app.


### Lesson 3: Bold Graphic Design
Understand and apply branding guidelines -- including key lines, metrics, fonts, typographic scale, color palette and themes/styles.  

### Lesson 4: Meaningful Motion
Understand the use of motion in apps, how to use transitions to change app states and properly choreograph the motion in an app. 

### Lesson 5: Adaptive Design
Understand how to refine and test your designs on for use on multiple form factors.",,False,4,weeks,False
ud867,"Gradle for Android and Java",https://www.udacity.com/course/gradle-for-android-and-java--ud867?utm_medium=referral&utm_campaign=api,"Build Better Apps Through Automation",advanced,False,https://lh3.googleusercontent.com/jeVezk1wHnPay4E48RN4S-PMhIfZl-pVkY0j0xD_IrTSVJ5lvqn7erid1iZggX7jlI39UsB6hEDG6NgHk3c=s0#w=1682&h=1034,https://lh4.ggpht.com/dpGNxdo7YbT4ND6nlpQtspMZTM3tuM8Uk63iBMHYX0rLTdD2xe133YYGY5MZkHixf48wapjXEs_7b-82aw=s0#w=4680&h=968,,"This course explores how the Gradle build tool compiles and packages apps, and you'll learn to customize the build process. The first half of this course is for anyone interested in Gradle, build automation, and continuous delivery of software.

The latter half of the course reveals the magic that happens after you hit the ""Run"" button in Android Studio. You'll also explore advanced Android topics, learning to configure free vs paid app flavors, create and integrate Android libraries, test your app, and prepare your app for the Play Store.","Build bigger and better Android and Java apps using the Gradle build tool.","**This is an advanced course aimed at students with experience developing Android or Java apps.**

 If you lack this experience, please take <a href=""https://www.udacity.com/course/ud853"" target=""_blank"">Developing Android Apps</a> and <a href=""https://www.udacity.com/course/ud855"" target=""_blank"">Advanced Android App Development</a> prior to taking this course.

* To follow along with course activities, you **must** have access to the latest release of <a href=""https://developer.android.com/sdk/index.html"" target=""_blank"">Android Studio</a>
* You should have access to an Android device for running and testing your apps.  
* You should also be familiar with Github. Take our course on <a href=""https://www.udacity.com/course/how-to-use-git-and-github--ud775"" target=""_blank"">Using Git and Github</a> if you lack this background.","As your software projects get more ambitious, the process of building and deploying your apps will become more and more involved. However, modern software development requires rapid iterative releases, known as continuous delivery. Gradle is a next-generation build automation system that makes continuous delivery of complex projects a reality.

Gradle supports many languages and tools, and is tightly integrated with Android Studio. This course is useful for any developer seeking to understand Gradle, but focuses on Android builds. The default Android build settings are enough to put a simple debug app on your phone, but to build an app that's ready for the Google Play Store, you'll need to understand your build process and how to customize it.",False,"### Lesson 1: Gradle Fundamentals
Learn the syntax and semantics of Gradle build scripts, and understand the lifecycle of a Gradle build.

### Lesson 2: Gradle for Java
Understand the Gradle Java plugin, build and test Java projects, and manage dependencies.

### Lesson 3: Gradle for Android
Discover the Gradle integration with Android Studio, and build an app with multiple product flavors.

### Lesson 4: Advanced Android Builds
Create Android libraries, and use advanced features of the Android Gradle Plugin to configure signing, obfuscation, and testing.

### Final Project
Build and test a joke telling app with a free ad-supported version and a paid version. As a bonus, deploy a Google Cloud Messaging backend to supply the jokes.",,False,6,weeks,False
ud875A,"Android Wear Development",https://www.udacity.com/course/android-wear-development--ud875A?utm_medium=referral&utm_campaign=api,"Extend your Apps to Android Smartwatches",advanced,False,https://lh3.googleusercontent.com/n2A2iq0wCQDp4CNt34z3Yu9_4UsdDa_zTF-M4ZGojDjNGlAVfBFKd9YBJdofTpFM-sS8cXFUCJUVjtoM5pY=s0#w=1758&h=1080,https://lh3.googleusercontent.com/s1JVp17A3Zc6i7MAOWgmzckvFPSH7ls9v5A7iqxtzkAS98X2MOZFj19-iWVhkRkA7kGVgo4uxxAGw1VgOBEL=s0#w=4680&h=968,https://www.youtube.com/watch?v=Lnbo0YrFMfs,"Extending your app to Android Wear smart watches allows you to reach your users wherever and whenever they'd want or need your app. As you'll learn in this course, you can take your existing Android development experience and apply it to developing for Android Wear. This course will take you through getting started, application structure, and information sharing between the wearable and the companion phone or the cloud. We'll also give you the knowledge necessary for designing great user experiences for wearables including how to take advantage of the always-on display of Android Wear devices.

This course is part of the Ubiquitous Computing series. Designed as standalone short courses, you can take any course on its own, or take them all!

* **Android Wear Development** [this course]
* <a href=""https://www.udacity.com/course/android-tv-and-google-cast-development--ud875B"" target=""_blank"">Android TV and Google Cast Development</a>
* <a href=""https://www.udacity.com/course/android-auto-development--ud875C"" target=""_blank"">Android Auto Development</a>","Learn how to extend your app to Android Wear smartwatches, allowing you to reach users wherever and whenever they'd want or need your app.","To get the most out of this course, you should have prior experience developing Android apps. If you lack this experience, please take <a href=""https://www.udacity.com/course/ud853"" target=""_blank"">Developing Android Apps</a> prior to enrolling in this one.

To follow along with course activities, you **must** have access to the latest release of <a href=""https://developer.android.com/sdk/index.html"" target=""_blank"">Android Studio</a>.  

We share code through Github, so you must be familiar with using Github to access code. Take our course on <a href=""https://www.udacity.com/course/how-to-use-git-and-github--ud775"" target=""_blank"">Using Git and Github</a> if you lack this background.","If you're already an Android developer, you're only a few steps away from being able to use your existing development experience to reach your users wherever or whenever they want or need your app. Take this course to learn how easy it is to extend your existing app to Android Wear smart watches.",False,"### Introduction 
Overview of the course structure and goals, and introduction to the sample app. 

### Wearables 
#### Part 1: Notification Sync
#### Part 2: Watch App
#### Part 3: Watch Face 
How to design and extend wearable apps, and build a watch face for the Sunshine app. 
#### Wearables Project
Design and extend the Sunshine app for a wearable device.",,False,2,weeks,False
ud875B,"Android TV and Google Cast Development",https://www.udacity.com/course/android-tv-and-google-cast-development--ud875B?utm_medium=referral&utm_campaign=api,"Extend your Apps to the Big Screen",advanced,False,https://lh3.googleusercontent.com/mXwOuGIoiOQxP4eXAKk8qt449JzBrjfr7X_IcEpoCEzJazPgGnhFKUmeQWIOsPIUa_zjCGaMaQHF0UfsEQc=s0#w=1706&h=1049,https://lh3.googleusercontent.com/C-leW8Xvos8_kbre3szeu2YEA9l8lnCwzGO4cjtXWPGDmqMf1xoztNpa912ylBFQl9H2f6glViXJz-cQfQw=s0#w=4680&h=968,https://www.youtube.com/watch?v=ai4CdKUZ6KI,"Go where your users are: the living room! With Google Cast and Android TV, you can add a big screen and cinematic experience to your app. This course shows you how to extend your existing Android app to work on Android TV and Google Cast. You can take advantage of both technologies without having to rewrite your app.

This course is part of the Ubiquitous Computing series. Designed as standalone short courses, you can take any course on its own, or take them all!

* <a href=""https://www.udacity.com/course/android-wear-development--ud875A"" target=""_blank"">Android Wear Development</a>
* **Android TV and Google Cast Development** [this course]
* <a href=""https://www.udacity.com/course/android-auto-development--ud875C"" target=""_blank"">Android Auto Development</a>","Go where your users are: the living room! This course shows you how to extend your existing Android app to also work on Android TV, and/or with Google Cast.","To get the most out of this course, you should have prior experience developing Android apps. If you lack this experience, please take <a href=""https://www.udacity.com/course/ud853"" target=""_blank"">Developing Android Apps</a> prior to enrolling in this one.

To follow along with course activities, you **must** have access to the latest release of <a href=""https://developer.android.com/sdk/index.html"" target=""_blank"">Android Studio</a>.  

We share code through Github, so you must be familiar with using Github to access code. Take our course on <a href=""https://www.udacity.com/course/how-to-use-git-and-github--ud775"" target=""_blank"">Using Git and Github</a> if you lack this background.","By adding Google Cast functionality to your app, you can increase engagements and monetization. For example, Comedy Central found that Chromecast users watch 50 percent more videos and make 1.5 more visits to their app, than their average users. Likewise, Haystack TV found that Android TV users watched 80 minutes of video per week, vs. just 40 for mobile-only users. The best part for developers is that both Google Cast and Android TV come with extensive libraries that do most of the heavy lifting for you.",False,"### Introduction 
Overview of the course structure and goals, and introduction to the sample app. 

### Living Room 
#### Part 1: Google Cast for Chromecast and TV
#### Part 2: Going Deeper with Android TV 
#### Part 3: Gaming with Android TV 
Overview of Android TV platform, and Google Cast for Chromecast and TV.",,False,1,weeks,False
ud875C,"Android Auto Development",https://www.udacity.com/course/android-auto-development--ud875C?utm_medium=referral&utm_campaign=api,"Put your Apps in the Driver's Seat",advanced,False,https://lh3.googleusercontent.com/3lVfrfdzindeWt7gXkQrkDYtbYJuIMGuAo8Wrt3haxzNqxKOER3oK4hraiTJcNEHzJdnEEWsKbtqg-rguUs2=s0#w=1758&h=1080,https://lh3.googleusercontent.com/D01zk4LatEwAk8guNYUG-2F0xBpybE4FVdmA0R5LChJ7e-OVbYy1MojZXrz3F6oQ1CDRuA41mKxPm6QXIPY=s0#w=4680&h=968,https://www.youtube.com/watch?v=WITvSEavevI,"Reach your users while they're out and about by extending your Media or Messaging app to Android Auto! As you'll learn in this course, making your app available in the car is as easy as extending your existing code. This course explains how to get started and then covers Media and Messaging apps in detail.

This course is part of the Ubiquitous Computing series. Designed as standalone short courses, you can take any course on its own, or take them all!

* <a href=""https://www.udacity.com/course/android-wear-development--ud875A"" target=""_blank"">Android Wear Development</a>
* <a href=""https://www.udacity.com/course/android-tv-and-google-cast-development--ud875B"" target=""_blank"">Android TV and Google Cast Development</a>
* **Android Auto Development** [this course]","Reach your users while they're out and about by extending your Media or Messaging app to Android Auto!","To get the most out of this course, you should have prior experience developing Android apps. If you lack this experience, please take <a href=""https://www.udacity.com/course/ud853"" target=""_blank"">Developing Android Apps</a> prior to enrolling in this one. We also recommend taking <a href=""https://www.udacity.com/course/ud855"" target=""_blank"">Advanced Android App Development</a> and <a href=""https://www.udacity.com/course/ud876"" target=""_blank"">Google Play services</a>.

To follow along with course activities, you **must** have access to the latest release of <a href=""https://developer.android.com/sdk/index.html"" target=""_blank"">Android Studio</a>.  

We share code through Github, so you must be familiar with using Github to access code. Take our course on <a href=""https://www.udacity.com/course/how-to-use-git-and-github--ud775"" target=""_blank"">Using Git and Github</a> if you lack this background.","If you're already an Android developer, you're only a few extensions away from having your existing Media or Messaging app work on Android Auto as well. Take this course to learn how easy it is to bring your existing app to the car.",False,"### Introduction 
Overview of the course structure and goals, and introduction to the sample app. 

### Auto  
#### Part 1 - Messaging App
#### Part 2 - Media App
Extend and test your apps for Auto.",,False,1,weeks,False
ud876-1,"Google Location Services on Android",https://www.udacity.com/course/google-location-services-on-android--ud876-1?utm_medium=referral&utm_campaign=api,"Add Activity and Location Recognition",intermediate,False,https://lh3.googleusercontent.com/Du089YR8t4H5dgnPKvNL0qjwUUjxFVPkt6q6s3kLWbV1ezEDSMeH0HJ-JrLFUyFawcwi_q7ZU3wXArZDGsiq=s0#w=1440&h=811,https://lh3.googleusercontent.com/E3dI8OtBQli6MzMNmFxGf29evW3OJ12tYmSH7ea0ycWPLXfEUypZPzxX5oLEYxNy7D1UXILuWLpDWJBvNk-b=s0#w=4680&h=968,,"Vitally important for building the best possible mobile app, the Location and Context API allows your Android app behavior to change based on location. 

In this course, you’ll learn how to implement this with the Fused Location Provider, which gives you much more than simple GPS. You’ll also learn about Activity recognition, which allows you to tailor your app to what the user is doing. Finally, you’ll learn about Geofencing, and how location services work alongside geofences to allow you to build apps that could be used for augmented reality!

**This course is part of the Google Play Services series, which features a  variety of different Google APIs. Designed as standalone short courses, you can take any course on its own, or take them all!**

* **Google Location Services on Android** [this course] 
* <a href=""http://www.udacity.com/course/ud876-2"" target=""_blank"">Google Analytics for Android</a>
* <a href=""http://www.udacity.com/course/ud876-3"" target=""_blank"">App Monetization with Display Advertising</a> 
* <a href=""http://www.udacity.com/course/ud876-4"" target=""_blank"">Add Google Maps to your Android App</a>","Enhance your apps with Google's Fused Location Provider, Activity Recognition, and Geofencing API capabilities.","To get the most out of this course, you should have prior experience developing Android apps. If you lack this experience, please take <a href=""https://www.udacity.com/course/ud853"" target=""_blank"">Developing Android Apps</a> prior to enrolling in this one. We also recommend taking <a href=""https://www.udacity.com/course/ud855"" target=""_blank"">Advanced Android App Development</a> if you are interested in publishing your app to the Google Play Store.

To follow along with course activities, you **must** have access to the latest release of <a href=""https://developer.android.com/sdk/index.html"" target=""_blank"">Android Studio</a>, which includes an emulator that you can use for basic testing of your apps. For the best experience, you should use a recent Android device

We share code through GitHub, so you must be familiar with using GitHub to access code. Take our course on <a href=""https://www.udacity.com/course/how-to-use-git-and-github--ud775"" target=""_blank"">Using Git and GitHub</a> if you lack this background.","If you want to be a professional <a href=""https://www.udacity.com/course/nd801"" target=""_blank"">Android developer</a>, it's essential that you tailor your app to fit your user's location and context in order to built the best possible mobile experience. You will learn these skills in this course, using Google's Location and Context API.",False,"### Introduction
Overview of Google Play services and an introduction to the goals and structure of this series.

### Lesson 1 - Getting Started
Learn about Location Services and Fused Location Provider, then create an app to get the current location. 

### Lesson 2 - Going Deeper
Learn about continuous updates to your app, and then extend this to understand different user activities.

### Lesson 3 - Advanced Topics: Geofencing 
Learn about geofencing, how it works, and how to build and monitor them.

### Capstone Project (2 Stages) 

*This project assumes that you have completed <a href=""http://www.udacity.com/course/ud853"" target=""_blank"">Developing Android Apps</a>,  <a href=""http://www.udacity.com/course/ud855"" target=""_blank"">Advanced Android App Development</a> and  at least one other Google Play Services course, in addition to this course.*

Design, then build, your own Android app.",,False,2,weeks,False
ud876-2,"Google Analytics for Android",https://www.udacity.com/course/google-analytics-for-android--ud876-2?utm_medium=referral&utm_campaign=api,"Integrate Google Analytics & Tag Manager",intermediate,False,https://lh3.googleusercontent.com/4dVAU-fDZoNLh8H4XTmblZz5yFsOXxY9tWCmudPwyeB-XlY-Qr30tUUlD7QkBG9JWKfggmG53uGJQ_hKMWLd=s0#w=1724&h=1060,https://lh3.googleusercontent.com/Qj8UpcHbqaU-gLZMJ_FcHNah6clmkv6ZmulLZUkr1cB6cd8CtKd9xWjMA0wy7_sA4fkpoaB40AW952mU4Q=s0#w=4680&h=968,https://www.youtube.com/watch?v=mbwty7t7B0Y,"Where in the world are people using your app? Which activities do they use most? How do they navigate through your app? Take this course to learn how to add code to your mobile app to send usage data to Google Analytics, and get answers to questions like these.

This course also covers how to use Google Tag Manager to send updated information to your app without needing to redeploy the APK, and to manage all your Google Analytics tags.

**This course is part of the Google Play Services series, which features a  variety of different Google APIs. Designed as standalone short courses, you can take any course on its own, or take them all!**


* <a href=""http://www.udacity.com/course/ud876-1"" target=""_blank"">Google Location Services on Android</a> 
* **Google Analytics for Android** [this course]
* <a href=""http://www.udacity.com/course/ud876-3"" target=""_blank"">App Monetization with Display Advertising</a> 
* <a href=""http://www.udacity.com/course/ud876-4"" target=""_blank"">Add Google Maps to your Android App</a>","Where in the world are people using your app? And how are they using your app? Take this course to learn how to answer these questions!","To get the most out of this course, you should have prior experience developing Android apps. If you lack this experience, please take <a href=""https://www.udacity.com/course/ud853"" target=""_blank"">Developing Android Apps</a> prior to enrolling in this one. We also recommend taking <a href=""https://www.udacity.com/course/ud855"" target=""_blank"">Advanced Android App Development</a> if you are interested in publishing your app to the Google Play Store.

To follow along with course activities, you **must** have access to the latest release of <a href=""https://developer.android.com/sdk/index.html"" target=""_blank"">Android Studio</a>, which includes an emulator that you can use for basic testing of your apps. For the best experience, you should use a recent Android device

We share code through GitHub, so you must be familiar with using GitHub to access code. Take our course on <a href=""https://www.udacity.com/course/how-to-use-git-and-github--ud775"" target=""_blank"">Using Git and GitHub</a> if you lack this background.","If you want to be a professional <a href=""https://www.udacity.com/course/nd801"" target=""_blank"">Android developer</a>, it's critical to understand who your users are, where they are, and how they're using your app. To do this, you need to know how to access and manage your app's analytics. 

Take this course to learn how to use Google Analytics in your apps, and how to use Tag Manager to send updated information to your app and manage your Google Analytics tags.",False,"### Introduction
Overview of Google Play services and an introduction to the goals and structure of this series.

### Lesson 1 - Getting Started with Analytics
Get a Google Analytics account ID, and update your app to track all screen views. 

### Lesson 2 - Beyond Auto Activity Tracking
Send tracking data for events, and track how your users move through the shopping process.

### Lesson 3 - Intro to Tag Manager 
Use Tag Manager to update values in your app without having to redeploy any code. Cool, huh?

### Lesson 4 - Integrating Google Analytics and Tag Manager 
Use Tag Manager to organize the Analytics tags in your app.

### Capstone Project (2 Stages) 

*This project assumes that you have completed <a href=""http://www.udacity.com/course/ud853"" target=""_blank"">Developing Android Apps</a>,  <a href=""http://www.udacity.com/course/ud855"" target=""_blank"">Advanced Android App Development</a> and  <a href=""http://www.udacity.com/course/ud876-1"" target=""_blank"">Google Play Services: Location and Context</a>, in addition to this course.*

Design, then build, your own Android app.",,False,2,weeks,False
ud876-3,"Monetize Your Android App with Ads",https://www.udacity.com/course/monetize-your-android-app-with-ads--ud876-3?utm_medium=referral&utm_campaign=api,"Make Money with AdMob",intermediate,False,https://lh3.googleusercontent.com/SbN466LXIXxxFePWHPtcZIMJkhXvfGxMEvFTrqVnGtcATyFPvuwV5-UBWsnUF3cPxk9KBPyZQH45E1piPxfh=s0#w=1724&h=1060,https://lh3.googleusercontent.com/bXrrRos8r-NdRrXtiwEafBa_ELS9LPvXnt0YqNcTUDE3rb_9B0gR3xAT0EmH18NXO05kfIkzBMDWrTHOug=s0#w=4680&h=968,https://www.youtube.com/watch?v=ZxCvTzkwotI,"In this course, you will learn how to monetize apps using Google's AdMob to display banner and interstitial ads.

**This course is part of the Google Play Services series, which features a  variety of different Google APIs. Designed as standalone short courses, you can take any course on its own, or take them all!**

* <a href=""http://www.udacity.com/course/ud876-1"" target=""_blank"">Google Location Services on Android</a> 
* <a href=""http://www.udacity.com/course/ud876-2"" target=""_blank"">Google Analytics for Android</a> 
* **App Monetization with Display Advertising** [this course]
* <a href=""http://www.udacity.com/course/ud876-4"" target=""_blank"">Add Google Maps to your Android App</a>","Learn how to monetize apps using Google's AdMob to display banner and interstitial ads!","To get the most out of this course, you should have prior experience developing Android apps. If you lack this experience, please take <a href=""https://www.udacity.com/course/ud853"" target=""_blank"">Developing Android Apps</a> prior to enrolling in this one. We also recommend taking <a href=""https://www.udacity.com/course/ud855"" target=""_blank"">Advanced Android App Development</a> if you are interested in publishing your app to the Google Play Store.

To follow along with course activities, you **must** have access to the latest release of <a href=""https://developer.android.com/sdk/index.html"" target=""_blank"">Android Studio</a>, which includes an emulator that you can use for basic testing of your apps. For the best experience, you should use a recent Android device.","If you want to be a professional <a href=""https://www.udacity.com/course/nd801"" target=""_blank"">Android developer</a> and generate ad revenue from your apps, this is the course for you!",False,"### Introduction
Overview of Google Play services and an introduction to the goals and structure of this series.

### Learn AdMob

* Introduction to models to make money from an app and Google AdMob.
* Create code to display Banner and Interstitial ads in an app.
* How to go from a test app to an app that shows real ads.

### Capstone Project (2 Stages) 

*This project assumes that you have completed <a href=""http://www.udacity.com/course/ud853"" target=""_blank"">Developing Android Apps</a>,  <a href=""http://www.udacity.com/course/ud855"" target=""_blank"">Advanced Android App Development</a> and  <a href=""http://www.udacity.com/course/ud876-1"" target=""_blank"">Google Play Services: Location and Context</a>, in addition to this course.*

Design, then build, your own Android app.",,False,2,weeks,False
ud876-4,"Add Google Maps to your Android App",https://www.udacity.com/course/add-google-maps-to-your-android-app--ud876-4?utm_medium=referral&utm_campaign=api,"Integrate Maps, Cameras, and Street View",intermediate,False,https://lh3.googleusercontent.com/l8dRGuY5xlIMuGmjxX9DSYwn80BYsR3UwlTuNrAXuqMU__3SqO19cAnLwCZi5QEWsyTvhqFTOebVwgq0IbI=s0#w=1440&h=809,https://lh3.googleusercontent.com/oLpSa1mVN6zpyrIMyqJA5SL-racRlWtnDDxflXrcel3BLM8m1B5mK6YZj82YVLHLbRRgvByKAIAcMpiUwQ=s0#w=4680&h=968,,"In this course, you’ll learn everything from how to add maps to your Android app, to how to build a virtual hike down the Grand Canyon!

**This course is part of the Google Play Services series, which features a  variety of different Google APIs. Designed as standalone short courses, you can take any course on its own, or take them all!**

* <a href=""http://www.udacity.com/course/ud876-1"" target=""_blank"">Google Location Services on Android</a> 
* <a href=""http://www.udacity.com/course/ud876-2"" target=""_blank"">Google Analytics for Android</a>
* <a href=""http://www.udacity.com/course/ud876-3"" target=""_blank"">App Monetization with Display Advertising</a> 
* **Add Google Maps to your Android App** [this course]","Maps on mobile devices have changed the world for millions of users. Learn how to use the Google Maps API to extend this functionality to your apps.","To get the most out of this course, you should have prior experience developing Android apps. If you lack this experience, please take <a href=""https://www.udacity.com/course/ud853"" target=""_blank"">Developing Android Apps</a> prior to enrolling in this one. We also recommend taking <a href=""https://www.udacity.com/course/ud855"" target=""_blank"">Advanced Android App Development</a> if you are interested in publishing your app to the Google Play Store.

To follow along with course activities, you **must** have access to the latest release of <a href=""https://developer.android.com/sdk/index.html"" target=""_blank"">Android Studio</a>, which includes an emulator that you can use for basic testing of your apps. For the best experience, you should use a recent Android device

We share code through GitHub, so you must be familiar with using GitHub to access code. Take our course on <a href=""https://www.udacity.com/course/how-to-use-git-and-github--ud775"" target=""_blank"">Using Git and GitHub</a> if you lack this background.","Maps! Everybody uses maps, and many people love them. Maps on mobile devices have changed the world over the last few years. They not only provide a local map in your pocket, but also a map of the entire world, down to street level, and even a 3D flyaround of many major cities.

If you want to be a professional <a href=""https://www.udacity.com/course/nd801"" target=""_blank"">Android developer</a> and are planning to build or enhance apps that use Google's mapping functionality, this is the course for you.",False,"### Introduction
Overview of Google Play services and an introduction to the goals and structure of this series.

### Lesson 1 - Getting Started
Add maps to your app, understand the different map types, and learn how to use the Google Developers console to get an API key. Even create a map that flies around the world!

### Lesson 2 - Going Deeper 
Understand the Camera, and how it's used to project a map. Learn about zooming to different locations, and changing the camera tilt and direction. Learn about Markers, and how to place them on a map, as well as drawing shapes that are correctly geographically projected -- including lines, polylines and circles.

### Lesson 3 - Advanced Topics: Street View
Learn about StreetView and how you can look at various locations around the globe as if you were there. Build a virtual hike down the Grand Canyon, and learn how to modify this to make it perfect for your app.

### Capstone Project (2 Stages) 

*This project assumes that you have completed <a href=""http://www.udacity.com/course/ud853"" target=""_blank"">Developing Android Apps</a>,  <a href=""http://www.udacity.com/course/ud855"" target=""_blank"">Advanced Android App Development</a> and  <a href=""http://www.udacity.com/course/ud876-1"" target=""_blank"">Google Play Services: Location and Context</a>, in addition to this course.*

Design, then build, your own Android app.",,False,2,weeks,False
ud882,"Responsive Images",https://www.udacity.com/course/responsive-images--ud882?utm_medium=referral&utm_campaign=api,"Fewer Bytes, Faster Loads",intermediate,False,https://lh3.googleusercontent.com/0-8SA41CiD_MZ-yRZ3YX04wYYtV4IjKuVvuRHl-LB2h_2pCDw2UEkLFjUf86GcHGJO1rhRFTBoq9bULT1Qc=s0#w=1724&h=1060,https://lh6.ggpht.com/XXakJTthGX4SGDZq3hccjzxn2tSASDPg0zOynxPS2FmR837Ia-29I0F0-VOel9WWO0jUfcMao-DY8P0wtfpM=s0#w=4680&h=968,https://www.youtube.com/watch?v=1NiVmiMNp-U,"Did you know that images account for more than **60%** of the bytes on average needed to load a web page?

In this course you will learn how to work with images on the modern web, so that your images look great and load quickly on any device.

Along the way, you will pick up a range of skills and techniques to smoothly integrate responsive images into your development workflow. By the end of the course, you will be developing with images that adapt and respond to different viewport sizes and usage scenarios.","Go beyond image tags! Learn how to make images a part of your responsive design workflow.","You should be comfortable working with simple HTML, CSS and JavaScript. Experience with image creation and processing tools will also help.","Quick load times and responsive content leads to higher conversions. There's much more to images on the web than `<img>`. Attributes like `srcset`, markup techniques using CSS, fonts, and inline images, and the brand new `<picture>` element are now available to help you create the best possible experience for your users. This course will help you ensure that you deliver the highest quality images with the fewest possible bytes.",False,"### Lesson 1 - Getting up and Running

Before you start working with responsive images, you need to start debugging on your mobile devices. This lesson will help you get started with Developer Tools and mobile debugging.

###Lesson 2 - Units, Formats, Environments

You can't optimize what you can't measure. In this lesson, you will start with comparing different kinds of images on the web and getting familiar with different units you can use to scale them.

You will also get a chance to set up your development environment so that responsive images become a painless part of your workflow.

At the end of the lesson, you will start working on the responsive blog project, where you have a chance to apply responsive image principles in a real-world scenario!

<strong>Topics covered:</strong>

* Sizing Images
* File Types
* Automation Tools

### Lesson 3 - Images with Markup

Not all graphics need to be .JPGs or .PNGs. This lesson dives into using markup techniques like CSS and icon fonts to create responsive graphics. While markup techniques are awesome because they are natively responsive, they are often **extremely** lightweight, requiring a fraction of the bytes of traditional images!

At the end of the lesson, you will replace extraneous images with markup techniques and take advantage of font icons to add social media icons to the responsive blog project!

<strong>Topics covered:</strong>

* CSS Techniques
* Inlining Images
* Unicode
* Icon fonts

### Lesson 4 - Full Responsiveness

Here comes the full monty! In this lesson, you will make your images fully responsive using the new `<picture>` element! Along the way, you will use the `srcset` and `sizes` attributes. You will also learn the importance of `alt` attributes for your visually impaired users.

At the end of this lesson, you will make the blog project fully responsive, as you implement `<picture>` to display beautiful images across a range of device widths and pixel ratios.

<strong>Topics covered:</strong>

* `<picture>`
* `sizes` attribute
* `srcset` attribute
* `alt` attributes",,False,2,weeks,False
ud884,"Website Performance Optimization",https://www.udacity.com/course/website-performance-optimization--ud884?utm_medium=referral&utm_campaign=api,"The Critical Rendering Path",intermediate,False,https://lh6.ggpht.com/f_0W8h__3G99CWTjnMjD8BUKm7yp2-wJyApLtTwFoFtlal2ULf_JgHIsOQq2NiYfKOdMlXlMHDKNo5XVZLs=s0#w=1757&h=1080,https://lh4.ggpht.com/tLVuOAJWUxC6mLib6f7JTMkkopSrzIGp6JCrMmRX7ufuRgYLdbgQPnzEqqaPOmtZYxGYSe_TuCR8AZ-OI7E=s0#w=4680&h=968,https://www.youtube.com/watch?v=v5us0j3QmW4,"You will learn how to optimize any website for speed by diving into the details of how mobile and desktop browsers render pages.

In this short course, you’ll learn about the Critical Rendering Path, or the set of steps browsers must take to convert HTML, CSS and JavaScript into living, breathing websites. From there, you’ll start exploring and experimenting with tools to measure performance and simple strategies to deliver the first pixels to the screen as early as possible. You’ll learn how to dive into recommendations from [PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights/ ""PageSpeed Insights"") and the Timeline view of Google Chrome’s Developer Tools to find the data you need to achieve immediate performance boosts!

This course is also a part of our <a href=""https://www.udacity.com/course/nd001"">Front-End Web Developer</a> Nanodegree.","Learn how browsers convert HTML, CSS and JavaScript into websites while you experiment with Chrome Developer Tools to measure and optimize website speed!","This course is for any and all web developers, whether you started learning about HTML, CSS and JavaScript recently or have been building websites since the nineties!

Most importantly, you should be able to explain the overall purpose of HTML, CSS and JavaScript with respect to website structure. In addition, you should be comfortable reading and writing HTML documents and modifying JavaScript files.

This course is taught with <a href=""https://www.google.com/intl/en_us/chrome/browser/"" target=""_blank"">Google Chrome</a> and <a href=""http://www.google.com/intl/en/chrome/browser/canary.html"" target=""_blank"">Google Chrome Canary</a>.","From Ilya Grigorik's [High Performance Browser Networking](http://www.google.com/url?q=http%3A%2F%2Fchimera.labs.oreilly.com%2Fbooks%2F1230000000545%2Findex.html&sa=D&sntz=1&usg=AFQjCNGqIsrSJdHvrYxIgEbLW577cvRxSA ""High Performance Browser Networking""):

""The emergence and the fast growth of the web performance optimization (WPO) industry within the past few years is a telltale sign of the growing importance and demand for speed and faster user experiences by the users. And this is not simply a psychological need for speed in our ever accelerating and connected world, but a requirement driven by empirical results, as measured with respect to the bottom-line performance of the many online businesses:

* Faster sites lead to better user engagement.
* Faster sites lead to better user retention.
* Faster sites lead to higher conversions.

Simply put, speed is a feature.""

### Project
You will optimize an online portfolio for speed, which you can share with the world to showcase your skills!

Making a great first impression is absolutely key and an online portfolio can help you stand apart from the crowd. We’ll give you a template for a modern, mobile-friendly portfolio which you’ll be able to completely customize so that it shows off your work and your skills the way you want. But before you show it off to the world, you’ll practice your web performance skills by optimizing the portfolio to render as fast as possible.",False,"### Overview
Throughout the course, you’ll build a performance toolbox to help you build faster website experiences by taking advantage of PageSpeed Insights recommendations and measuring page performance on mobile and desktop with Chrome Developer Tools.

This class contains an introductory lesson, two primary lessons and a final project. Before diving into optimizations, you’ll build an understanding of how browsers convert HTML, CSS and JavaScript into websites. Along the way, you’ll practice measuring performance using the same tools Google engineers use.

Then comes the really fun part: optimization! You’ll learn about easy-to-implement performance gains and develop a simple and powerful model for uncovering optimization opportunities.

You’ll put your newfound performance skillset to the test with the final project, where you’ll be optimizing your own online portfolio website!

##Lessons
###Lesson 0 (20 minutes)
You can’t optimize what you can’t measure, so in this lesson you’ll learn how to open Chrome Developer Tools to measure the performance of mobile and desktop websites.

###Lesson 1 (60 minutes)
Optimizing any website’s performance requires a strong understanding of how browsers build websites from HTML, CSS and JavaScript. You’ll start by breaking down the **Critical Rendering Path** - the steps the browser has to take to render a page. You’ll get an understanding of how:

* **HTML** is converted to the **Document Object Model (DOM)**.
* **CSS** is converted to the **CSS Object Model (CSSOM)**.
* the browser runs **layout** to determine the position and size of elements before **painting** pixels on the screen.

Throughout the lesson, you’ll learn how to take advantage of the Timeline view in **Chrome Developer Tools** to measure each and every step’s performance on mobile and desktop.

###Lesson 2 (90 minutes)
You’ll explore easy HTML, CSS and JavaScript optimizations with significant performance implications, some of which are as simple as adding a single attribute to an HTML tag! Along the way, you’ll be developing the skills to help you diagnose opportunities for optimizations, including:

* building **quick and dirty** diagrams of the Critical Rendering Path.
* identifying **three key metrics** to triangulate potential performance bottlenecks.",,True,1,weeks,False
ud890,"Building High Conversion Web Forms",https://www.udacity.com/course/building-high-conversion-web-forms--ud890?utm_medium=referral&utm_campaign=api,"Forms Rock!",intermediate,False,https://lh3.googleusercontent.com/jgbmoHfGCQVbj1TezCcDoxlGjY8O8M945PEm8KoSdXEOUFEndKmDinmHbewXDSNbnGQKWbl0AWZYQq6rWBM=s0#w=1724&h=1060,https://lh3.googleusercontent.com/yDK0u2UV6duS3-Y2VRRs94CBRHnRkk2w5Os5jdF6tPQXxz5NGSm1Tyy9eUQdvZluagt1xpRMWXoZuj7v1w=s0#w=4680&h=968,,"Any meaningful experience on the web has a form. Whether it's a form made of text boxes, toggles, buttons, checkboxes, or touchable widgets, web developers need to be purposeful about forms to make users happy and increase [conversions](https://en.wikipedia.org/wiki/Conversion_marketing).

In this course, you'll learn best practices for modern forms as taught by Google's Ido Green and Udacity's Cameron Pittman. You'll practice your skills along the way with a few self-directed projects, including an e-commerce checkout and an event planner app!

As a special treat, you'll also watch a series of interviews with Luke Wroblewski, Google Product Director and author of [Web Form Design](http://www.lukew.com/resources/web_form_design.asp), to get his take on interactions for the modern web.","Increase conversions with best practices for fast, efficient forms! Learn how to design and build web forms for users on any device.","We expect that you have experience building websites front-ends from scratch and want to learn best practices for forms.

We expect that you are comfortable reading and writing HTML, CSS and JavaScript.

If you are unsure if you're ready, we recommend taking:

* [Intro to HTML and CSS](https://www.udacity.com/course/intro-to-html-and-css--ud304)
* [JavaScript Basics](https://www.udacity.com/course/javascript-basics--ud804)
* [Object-Oriented JavaScript](https://www.udacity.com/course/object-oriented-javascript--ud015)","The modern web is mobile and interactive. Thousands (maybe millions?) of websites include account creation forms and checkout forms. Websites ask you to tap buttons and fill out text boxes. They ask you for information and prompt you to take action. You fill out forms on big screens with physical keyboards and small screens with virtual keyboards.

There are millions of ways users interact with the modern web, and any website with interactions needs to do everything it can to influence the way users interact in order to ultimately increase conversions.

Building High Conversion Web Forms exists to help you, the web developer, think about forms and interactions for all of your users, no matter the form or the device. You'll practice handling user input to build forms that rock!",False,"### Efficient Inputs Part 1

* You'll be introduced to the principles of useful forms
* You'll research HTML5 input types
* You'll build a datalist input

### Efficient Inputs Part 2

* You'll exercise best practices for implementing input labels and types with many sample inputs
* You'll validate user input with HTML5 attributes and the [Constraint Validation API](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms_in_HTML#Constraint_Validation_API)

### Fast Forms

* You'll start exploring techniques for making forms faster and easier for users
* You'll practice empathy for your users in order to simplify and expedite forms
* You'll apply everything you've learned so far by designing and building an e-commerce checkout

### Touch Support

* You'll explore best practices for responding to and designing user interactions on mobile
* You'll use touch events to build a mobile-ready touch slider
* You'll be introduced to the final project - an event planner app!",,False,2,weeks,True
ud892,"Web Tooling & Automation",https://www.udacity.com/course/web-tooling-automation--ud892?utm_medium=referral&utm_campaign=api,"Gulp, Sass, and BabelJS, Oh My!",intermediate,False,https://lh3.googleusercontent.com/VR2ATeWEJs_XDcwWEbU5L-bOXICpbDCTzTrhxa415iRzQa0JX_rSmniKYPjsg8-q6Av3THk3a1DYsMcoazU=s0#w=1920&h=1080,https://lh3.googleusercontent.com/EGX62040jcQftKo19h-vsOTM4isbifmHDNxNYKX7C_hprBUSlqQ9NsgwI4OGy293hEuUXLYgsj8dXzYywSo=s0#w=4680&h=968,,"In this course, you’ll learn how to setup your development, get super productive during daily work and iteration, prevent yourself and your site from disasters and save a lot of time and effort with automatic optimization and automation. Finally, you’ll learn how to do all this while being confident your code runs on a multitude of devices in the real world.","In this course, you’ll learn how to setup your development environment and save a lot of time and effort with automatic optimization.","We expect that you have basic experience with JavaScript and a text editor, like Sublime Text or Atom.

If you need more experience with JavaScript, check out our [JavaScript Basics](https://www.udacity.com/course/javascript-basics--ud804) course.","Front-end developers need to work quickly and efficiently to be productive. Having a good set of tools and libraries is crucial. This course will introduce you to a opinionated set of tools and libraries to improve your workflow.",False,"###Introduction
Learn how to protect yourself from micro and over-optimization.

- Being pragmatic vs. idealistic when choosing tools
- Identify the real value of the tool (is it well maintained? Does it have a large community? Is it documented?)
* Keep things modular and replaceable
* Staying away from micro-optimizations

###Lesson 1: Productive Editing

Learn how to setup the very core of your development environment, namely your editor.

- From Notepad to IDE
- Set up your editor
- Install Sublime Text
- Install Plugins

### Lesson 2: Powerful Builds

Learn about build tools and why you should use them.

- Overview of build tools
- Getting started with Gulp
- Install gulp plugins
- Create gulp tasks

### Lesson 3: Expressive Live Editing

Learn how to reduce context switch with live editing.

- Why live edit?
- Approaches for live editing
- Browser Sync

### Lesson 4: How to Prevent Disasters

Learn how to use tools to automate a few alarms and safety nets that will make our lives much easier.

- Why rely on tools to prevent bad things from happening?
- Linting
- ESLint
- Unit Testing in Gulp

### Lesson 5: Awesome Optimizations

Learn how to polish your project for production

- CSS Concatenation
- JS Concatenation and Minification
- Writing Future Proof Code
- Sourcemaps
- Optmization",,False,3,weeks,True
ud893,"Responsive Web Design Fundamentals",https://www.udacity.com/course/responsive-web-design-fundamentals--ud893?utm_medium=referral&utm_campaign=api,"Great Experiences on Any Device",intermediate,False,https://lh6.ggpht.com/nKVxhzkzJcyDvw2QxIO1nH55uk5Y6e34XNGnnRUWS3No2wRZ8fyBfYzfILhJZslqnbvt6yHpbNlnor6S4vA=s0#w=2080&h=1279,https://lh5.ggpht.com/J8GsTGwitRUPaZjR8bKP2H5Q3vGt3QOrlMTqeHwAXpYoLZFZuA7IedgQjV84wlYoWqX42M4Xb3SH3eyd_Ec=s0#w=4680&h=968,https://www.youtube.com/watch?v=7DJLa4owtIU,"In this course you'll learn the fundamentals of responsive web design with Google's Pete LePage! You'll create your own responsive web page that works well on any device - phone, tablet, desktop or anything in between.

You’ll start by exploring what makes a site responsive and how some common responsive design patterns work across different devices.  From there, you’ll learn how to create your own responsive layout using the viewport tag and CSS media queries.  As you proceed, you’ll experiment with major and minor breakpoints, and optimizing text for reading.","Learn and practice strategies for developing websites that look great on every device! Made with Google's Pete LePage.","You should be comfortable reading and writing HTML and CSS. You should also be able to inspect and modify websites using browser developer tools (we use <a href=""http://www.google.com/chrome/"" target=""_blank"">Google Chrome</a>, but you should be able to accomplish all the tasks in this course with any browser's developer tools).


If you are unfamiliar with HTML and CSS, or if feel like you need to brush up on them, start with our <a href=""https://www.udacity.com/ud304"" target=""_blank"">Intro to HTML and CSS</a>.


You will not need to write JavaScript for this course.","The way people browse the web is changing quickly - fewer and fewer users access the web at a desk in front of a large monitor with a keyboard and mouse. The web is increasingly being enjoyed on phones, tablets, wearables, TVs and everything in between. By designing a site to be responsive, it will look good and work well no matter what device your users have in front of them.


Throughout this course, you'll work through a project creating a home town website that works well on phones, tablets and desktop displays.",False,"### Overview
This course consists of 5 lessons. The first one is an overview of responsive design and introduces the way you’ll need to shift your thinking as you go from desktop first design, to responsive design.  Lessons 2, 3, 4 and 5 will cover the important theoretical concepts of responsive design, and include plenty of hands-on exercises implementing what you’ve learned.  

### Lesson 1 - Why Responsive?
What is responsive web design and why is it important? What kinds of devices should we be targeting with our design? How can we best leverage the different capabilities of each device to provide great experiences to users? You’ll also make sure that your development environment is ready to go. 

<strong>Topics covered:</strong>

* What is responsive design?
* Why does responsive design work for any device?
* Remote debugging and emulation in the browser

### Lesson 2 - Starting Small
The best way to get started is to start small and build up. In this lesson, we’ll cover the key components that make a site great on a small screen, including setting the viewport, adding content and sizing the content to the viewport.  You’ll start the home town site project, by making sure that it looks good on a small screen.  

<strong>Topics covered:</strong>

* Why start small and build up?
* What is the viewport?
* Sizing the content to the viewport
  * avoiding static sized items
* Touch targets, and why they should be large

### Lesson 3 - Building Up
Once you’ve got a page optimized for small screens, it’s time to start thinking about how they’ll look on larger screens.  Learn how to use CSS media queries to add breakpoints that change the layout depending on the screen size or other device characteristics.

<strong>Topics covered:</strong>

* CSS media queries
* What is a breakpoint, and how to choose one
* Using the CSS flexbox to modify layout

### Lesson 4 - Common Responsive Patterns
Now that you’ve got the basics of responsive design down, you’ll learn about and practice some of the common layout design patterns used across sites. You'll also iterate on the home town site project, creating breakpoints for tablet and desktop layouts using the patterns from this lesson.

<strong>Topics covered:</strong>

* Mostly fluid pattern
* Column drop pattern
* Layout shifter pattern
* Off canvas pattern

### Lesson 5 - Optimizations
Learn strategies for minor breakpoints used to adjust the margins or padding on an element, or increase the font size to make it feel more natural in the layout. You’ll also learn about strategies for dealing with tables and optimal text readability. At the end of the lesson, you'll iterate for the last time on the home town site, adding minor breakpoints to really make the experience stand out.

<strong>Topics covered:</strong>

* Minor break points
* Optimizing text layout
  * font size
  * optimal line length
* Responsive tables, and strategies for dealing with them",,True,2,weeks,False
ud894,"Front End Frameworks",https://www.udacity.com/course/front-end-frameworks--ud894?utm_medium=referral&utm_campaign=api,"Backbone, Angular, Ember",advanced,False,https://lh3.googleusercontent.com/8pON7YYmLDJk7IymiYvvylNLGvLC2-fAGwcSKKli_tdwskej0z-ZIV8iM50hzh3yBJcEhjEkc7-CK6b4nMI=s0#w=1920&h=1080,,,"Learn how to build Single Page Applications in various Front End Frameworks! In this course, you'll learn how to create both an Angular application and an Ember app from scratch.

As you work through the course, you'll learn key architectural design techniques that make frameworks incredibly powerful.","Explore and build interactive, single-page applications with popular JavaScript frameworks!","Students should have experience building sites with HTML and CSS. JavaScript is heavily used in Front End Frameworks, so two years of programming experience in JavaScript is recommended. This course builds on:

* [JavaScript Design Patterns](https://www.udacity.com/courses/ud989)
* [Object-Oriented JavaScript](https://www.udacity.com/courses/ud015)
* [Web Tooling & Automation](https://www.udacity.com/courses/ud892)

Other course requirements:

* Ability to use GitHub to clone repos and checkout branches
* Comfort with command line tools
* Ability to use [Chrome DevTools](https://developers.google.com/web/tools/chrome-devtools/)","In this course, you’ll explore popular JavaScript frameworks that make building complex web applications a lot easier! Follow along as you build interactive, single-page applications that work seamlessly in the browser without ever reloading the page.

Filled with deep dives, code examples, and practical advice, you’ll uncover the magic behind JavaScript frameworks and what makes each of them unique.",False,"### Lesson 1 - Building a Single Page Application
* How did we get here?
* What makes a Single Page App
* Core Framework Components

### Lesson 2 - Examine A Framework's Source
* Constructor Functions
* Underscore's Template Function
* Events and Routing in Backbone

### Lesson 3 - Angular
* Build a food reservation app in Angular
* Learn Angular's Views, Controllers, Directives, and more!
* Use the community-built UI-Router routing module 

### Lesson 4 - Ember
* Build a food reservation app in Ember
* App generation and scaffolding with Ember-CLI
* Learn Ember's Templates, Services, Components, and more!",,False,8,weeks,True
ud898,"JavaScript Promises",https://www.udacity.com/course/javascript-promises--ud898?utm_medium=referral&utm_campaign=api,"Async Work Made Easy",advanced,False,https://lh3.googleusercontent.com/-ab4KcjljYYJCdQqZw6gYV59PEn7viNcZOf01TJUFupEaGXtag5tQRCdl_ZYPv4uM4fW7nJ2V5sAeIn3Rw=s0#w=1724&h=1060,https://lh3.googleusercontent.com/dwdUH3iUja8QE7k6s9g89j1hetRsW_tn_bZnQCU5Xo30JMyBJULkR5FuPhZPqIkuGDhRk3b2YUvkTiD7oDg2=s0#w=2400&h=540,,"Learn how to handle asynchronous work with ease! In this course, you'll use Native JavaScript Promises to write asynchronous code that is easy to read, easy to write and easy to debug.

Along the way, you'll be using Promises to make a webapp come to life!","Learn how to simplify asynchronous work with Native JavaScript Promises!","We expect that students have built web apps in the past and they are familiar with the pitfalls of callback-heavy code. There is no HTML or CSS in this class.

JavaScript Skills Required:

* Using functions to return objects and other functions
* Basic understanding of scope and closures
* Reading and writing named and anonymous callbacks
* Array methods like `.forEach` and `.map`

Other Requirements:

* Ability to use GitHub to clone repos and checkout branches
* Comfort with command line tools","Every web developer needs to be able to work with asynchronous code. Network requests, browser events, web workers and just about every else about the web happens asynchronously.

JavaScript developers normally rely on callbacks to execute async code, but Native JavaScript Promises offer a much easier solution. With Promises, error handling is streamlined and it becomes possible to flexibly chain lots of asynchronous work without creating a tangled mess of callbacks.",False,"### Lesson 1 - Creating Promises
* Why Promises?
* Promises syntax and scope
* Simplifying common, useful methods with Promises
* Basic error handling

### Lesson 2 - Chaining Promises
* Creating sequences of async work manually
* Advanced error handling
* Techniques for generating sequences of async work with array methods

### Project
Throughout the course (mostly in the second lesson), you'll be using Promises to load data into the Exoplanet Explorer app, which was designed to help people learn a little bit about planets around other stars.",,False,3,weeks,True
ud899,"Offline Web Applications",https://www.udacity.com/course/offline-web-applications--ud899?utm_medium=referral&utm_campaign=api,"Using IndexedDB & Service Worker",intermediate,False,https://lh3.googleusercontent.com/3M6dHe_SYENbgSp9ISAsPQ-EmqugX8WspngVZbb5vUcykQ_0zNZvhx6UCzr5SWwLPjT_uqEXaSZGMM7GaA=s0#w=771&h=430,,,"This course is focused squarely on user experience, and seeks to show developers how thinking offline-first is the best way to ensure that applications perform their best in all scenarios, not just ideal ones. You'll learn to recognize the differences between good, poor, intermittent, and missing connectivity for your users , and master  how to make applications that navigate these conditions with ease.

Using the skills you master in this course, you'll conclude by building an app that that works both online and offline, and loads in new data when it can. You'll be a master of the cache! Your web apps will interact with the network just like native apps do. This will lead to better user experiences even in traditionally challenging connection scenarios like being stuck in a train tunnel, having to rely on over-crowded conference Wi-Fi, or traveling through a cellular “dead zone!”","Learn how to develop offline-first web application using Service Workers and IndexedDB.","This course is for web developers with JavaScript experience, including:

* object-oriented JavaScript
* using native Promises
* running a Node web server from the terminal

Students should also be proficient in HTML and CSS, and have experience creating web apps.","User experience—as it is impacted by poor connectivity—is rarely taken into consideration to the extent it should be by developers. Developers build their applications using reliable internet and fast computers. They experience their own creations in an ideal environment, and they are almost always thinking online-first. But if you are truly focused on user experience, you need to understand how your applications perform in all scenarios. This is why it is critical to build applications that are offline-first.

In order to build applications that look and feel good ALL the time—not just in the best of cases—you need to do more than just learn new techniques and tools, you need to change your approach and way of thinking. This course will help you do just that.",False,"Lesson 1: The Benefits of Offline First

Lesson 2: Introducing the Service Worker

Lesson 3: IndexedDB and Caching",,False,3,weeks,True
ud902,"Learn Swift Programming Syntax",https://www.udacity.com/course/learn-swift-programming-syntax--ud902?utm_medium=referral&utm_campaign=api,"From Optionals to Closure Expressions",intermediate,False,https://lh3.googleusercontent.com/Qkrte2_RNAPEAA9J4OMk2495NXDMrCKclo1uEX6cJN-txFzgQ1BvMT4pog5GjpTU9QNaNEYcNv08b9uuVw=s0#w=1500&h=922,https://lh3.googleusercontent.com/wFaXM-aV4WG7Z99_fABRKnT3RMsRJcwlTrLHGElXUQm5BbXA7y3g4g-bR6FH9QoCAeOfQMHJeDsdn47AkQ=s0#w=4680&h=968,,"Swift is a language created by Apple specifically for iOS and OS X development. It’s fast, concise, and comes with tools  which make it easier than ever to visualize one's code. 

This course focuses on the syntax of the Swift programming language. By the end of the course, students should be able to apply Swift essentials to building iOS apps and employ Swift's more unique elements, like optional types and switch statements, with confidence.","This course focuses on the syntax of the Swift programming language. By the end of the course, you'll be able to apply Swift essentials to building iOS apps.","**This course assumes prior programming experience!** Specifically, you should be familiar with programming concepts like variables, if statements, and loops, as well as object-oriented concepts like methods and classes.

You will also need access to a Mac computer running OS X 10.10 or later.","- A quick and fun introduction to Swift basics. 
- Practice with Playground exercises
- Thorough explanations of Swift's less-intuitive features like Optionals and Closure Expressions.",True,"###Lesson 1: Swift Basics
In this lesson, you'll become familiar with Swift types and operators, and develop deftness in defining variables and constants. 
###Lesson 2: Optionals
Learn about your new Swift BFF: Optionals! In this lesson, you'll declare explicitly and implicitly unwrapped optionals, and unwrap optionals using both optional binding and optional chaining.
###Lesson 3: Collections
In this lesson, you'll learn about Dictionaries, Arrays, and Sets and perform basic operations including: append, count, insert, remove, update, find, and retrieve. 
###Lesson 4: Control Flow
In this lesson, you'll practice fast iteration with for-in loops by iterating through items in Arrays and Dictionaries. You'll also get experience with if-else statements and switch statements.  
###Lesson 5: Functions
In this lesson, you'll define and call functions, correctly use local and external parameters, and identify parameter types and return types. 
###Lesson 6: Classes, Properties, and Methods
In this lesson, you'll practice building custom classes with their own properties and methods. 
###Lesson 7: Enums and Structs
In this lesson, you'll learn the difference between value types and references types and practice choosing when to use enums, structs, and classes. 
###Lesson 8: Protocols and Extensions
In this lesson, you'll learn how protocols and extensions can help keep your code DRY.  Given a series of code snippets, you'll fix compiler errors by conforming to and implementing the appropriate protocols.  
###Lesson 9: Closure Expressions
In this lesson, you'll practice using Swift closures  with the functions, sorted() and filter(). You'll also learn shorthand to make your closure expressions super concise.",,False,3,weeks,True
ud915,"Educational Technology",https://www.udacity.com/course/educational-technology--ud915?utm_medium=referral&utm_campaign=api,"Offered at Georgia Tech as CS6460",beginner,False,https://lh3.googleusercontent.com/ghpGxX7Tl2qgIiGFWqbC9YUTgi0lZczirI5CRtbeFvFtCiilon6wuOvp45NE2vVZH4s9UOi9o4lfiIOBcG0=s0#w=1214&h=808,,,"<i>This class is offered as CS6460 at Georgia Tech where it is a part of the [Online Masters Degree (OMS)](http://www.omscs.gatech.edu/). Credit for taking this course is conferred only on those that enroll in the degree. The text in the following sections comes from the syllabus for CS6460, located [here](https://www.udacity.com/wiki/ud915).</i>

This class is simultaneously an introductory course about educational technology and an advanced, project-oriented class on designing or researching technology's intersection with education. As such, the course provides information about a large number of topics within educational technology, including pedagogical strategies, research methodologies, current tools, open problems, and broader issues. The scope of the material provided goes beyond what any one person could reasonably learn in a semester. Instead, you will select those areas that appeal to you or that support your ultimate project ideas. For example, if you're interested in research, you may focus on the applicable research methodologies to your chosen area of investigation, relevant pedagogical strategies or theories, and the current state-of-the-art within that community.  If you're interested in design, you may focus on the relevant pedagogical strategies or theories for your chosen domain, the current popular tools within that domain, and open problems that need to be addressed.","This class is an an introductory course about educational technology offered as CS6460 at Georgia Tech where it is a part of the Online Masters Degree (OMS).","In order to succeed in this class, you should be able to answer yes to the following questions:

 - Have you already fulfilled the foundational requirement for the program?
    Are you comfortable with writing several essays throughout the course of the class, including personal reflections, article responses, project proposals, and project reports?
 - Are you comfortable with a class that requires significant participation via forum interactions and peer-to-peer feedback opportunities?
 - Are you comfortable working in a group; or, alternatively, are you comfortable taking on a significantly-sized project on your own?
 - Are you passionate about education, and ideally, do you already have some preliminary ideas regarding what tools you might like to build or questions you might like to research as part of this class?
 - Are you comfortable with a class built on large, open-ended, student-driven projects rather than smaller, more narrowly-defined assignments and exams?

Note that prior experience with EdTech is not required beyond your prior OMS coursework. Note also that because they project is very open-ended, you'll be able to define a project that is realistic within your technical qualifications. So, no specific programming knowledge is required. If you choose more of a research-oriented track, you may not need to do any programming at all.","This class is built on a number of pedagogical strategies, including project-based learning, authenticity, and apprenticeship. The ultimate goal, supported by these strategies, is that through this class you will make an actual contribution to the field of educational research, and start a project that could be continued even after the semester is over through academic publications, ongoing research programmes, start-up businesses, or deployment within the OMSCS program.",False,"A learning goal is what you should know by the end of the class. The broad learning goal for this class is that, by the end of the class, you will have the requisite knowledge to make a real contribution to the Educational Technology field.

Even established experts in the field do not know everything, however, and neither will you. Instead, by the end of this class, you will have sufficient knowledge to contribute to the field in some way, though not every way. This means the learning goal of the class is determined in part by your own goals in taking this class:

 - Are you interested in understanding how technology can help education more theoretically? Then your learning goals would include knowledge of research methodologies, promising pedagogical strategies, and current theories in the community.
 - Are you interested in designing technologies that can help learners learn better? Then your learning goals would include knowledge of pedagogical strategies, current state-of-the-art tools, and the open problems in education and technology.
 - Are you interested in evaluating existing technologies? Then your learning goals would include knowledge of research methodologies in user testing, current state-of-the-art tools, and broader issues surrounding the impact of such tools.
 - Are you interested in contributing to the education enterprise more broadly, even if it isn't at the point of learning? Then your learning goals would include knowledge of the current problems in the field, broader issues surrounding the use of tools in supporting education, and the present tools that address those problems.

By achieving these learning goals, you will end the class with the knowledge necessary to contribute to the portion of educational technology in which you are most interested.",,False,16,weeks,False
ud919,"Model Building and Validation",https://www.udacity.com/course/model-building-and-validation--ud919?utm_medium=referral&utm_campaign=api,"Advanced Techniques for Analyzing Data",advanced,False,https://lh4.ggpht.com/kYr0sxkZKUC3-xlCQHRB1aH9Sr7BibEsBSNLPLJykneum-CnGeecsH-10yzsbbnLYMcM9-uIoGWacJ7HHw=s0#w=1071&h=659,https://lh3.ggpht.com/-YwZl4GyWW8MDUKHn-dY8HNPTDVzUpvJpwW8u8PKkC1ypMAoCt4SeBnbdQg3OaUEBIpSHetN1LqVuG2L8iVr=s0#w=4680&h=968,,"This course will teach you how to start from scratch in answering questions about the real world using data. Machine learning happens to be a small part of this process. The model building process involves setting up ways of collecting data, understanding and paying attention to what is important in the data to answer the questions you are asking, finding a statistical, mathematical or a simulation model to gain understanding and make predictions. 

All of these things are equally important and model building is a crucial skill to acquire in every field of science. The process stays true to the scientific method, making what you learn through your models useful for gaining an understanding of whatever you are investigating as well as make predictions that hold true to test. 

We will take you on a journey through building various models. This process involves asking questions, gathering and manipulating data, building models, and ultimately testing and evaluating them.","This course will teach you how to start from scratch in understanding and paying attention to what is important in the data and how to answer questions about data","This is an advanced course, and the ideal students for this class are prepared individuals who have:

1. Python programming knowledge, familiarity with python tools like Ipython Notebook and data analysis libraries like Scikit-learn, Scipy, and Pandas
2. Knowledge of descriptive, inferential, and predictive statistics
3. Knowledge of calculus, especially derivatives and integrals
4. Knowledge of basic matrix algebra - matrices, vectors, determinant, identity matrix, multiplication, inverse
5. Taken Intro to Machine learning and have understanding of common supervised learning and unsupervised learning algorithms, such as SVM and k-means clustering","Many of you may have already taken a course in machine learning or data science or are familiar with machine learning models.

In this course we will take a more general approach, walking through the questioning, modeling and validation steps of the model building process. 

The goal is to get you to practice thinking in depth about a problem and coming up with your own solutions. Many examples we will attempt may not have one correct answer but will require you to work through the problems applying the methods we hope to illustrate throughout this class.",False,"### Lesson 1 - Introduction to the QMV Process
Learn about the Question, Modeling, and Validation (QMV) process of data analysis. Understand the basics behind each step and apply the QMV process to analyze on how Udacity employees choose candies!

### Lesson 2 - Question Phase
We will drill in on the questioning phase of the QMV process. We’ll teach you how to turn a vague question into a statistical one that can be analyzed with statistics and machine learning. You will also analyze a Twitter dataset and try to predict when a person will tweet next! 

### Lesson 3 - Modeling Phase
Building upon lesson 2, you will learn how to build rigorous mathematical, statistical, and machine learning models so you can make accurate predictions. You look through the recently released U.S. medicare dataset for anomalous transactions.

### Lesson 4 - Validation Phase
So how do you tell if your model is doing well? In this lesson, we will teach you some of the fundamental and important metrics that you can use to grade the performance of the models that you’ve build. You will analyze the AT&T connected cars data set and see if you can tell which driver is which by analyzing their driving patterns.

### Final Project - Identify Hacking Attempts from Network Flow Logs

You will create a program that examines log data of net flow traffic, and produces a score, from 1 to 10, describing the degree to which the logs suggest a brute force attack is taking place on a server.",,True,8,weeks,False
ud923,"Introduction to Operating Systems",https://www.udacity.com/course/introduction-to-operating-systems--ud923?utm_medium=referral&utm_campaign=api,"Offered at Georgia Tech as CS 8803",intermediate,False,https://lh5.ggpht.com/wzdXuj_K5LRvUF3lRjFcOzNsDkqjSsFOw-hXO2jC4fS0cETu0FUmzNmaCqP1B295nEhOFTewBml-GX8RF68=s0#w=1728&h=1062,https://lh4.ggpht.com/Ptr9GbZsWt_lB39b4MpOQGfjVKwNVrCxN0hzqlU6wzTPY1DXgvCmWQ5zpS_wpKjiG0j0woALntNWjhCE7Q3Z=s0#w=2340&h=484,,"Introduction to Operating Systems is a graduate-level introductory course in operating systems. This course teaches the basic operating system abstractions, mechanisms, and their implementations. The core of the course contains concurrent programming (threads and synchronization), inter process communication, and an introduction to distributed operating systems. The course is split into four sections: (1) Introduction, (2) Process and Thread Management, (3) Resource Management and Communication, and (4) Distributed Systems.","Introduction to Operating Systems teaches the basic operating system abstractions, mechanisms, and their implementations.","To undertake this course, you should have taken an undergraduate level course on, or be otherwise familiar with, basic hardware and software aspects of computer systems organization. Prior programming experience with C is recommended, as C is required for the practical component of this course.

For other requirements, see [Udacity's Technology Requirements](https://www.udacity.com/tech-requirements).","The goals of this course are three-fold.

1. Students will understand the rationale behind the current design and implementation decisions in modern OS’s (like Linux) by considering the historic evolution of various OS constructs
2. Students will be exposed to theoretical knowledge regarding operating systems principles and implementation
3. Students will gain knowledge via experimenting and evaluating various OS aspects in a practical manner",False,"The [Course Wiki](https://www.udacity.com/wiki/ud923) serves as the syllabus for Introduction to Operating Systems. But, for a high-level view of the course, we have listed the lessons:

### Part 1: Introduction

- Lesson 1: Course Overview
- Lesson 2: Introduction to Operating Systems

### Part 2: Process and Thread Management

- Lesson 1: Processes and Process Management
- Lesson 2: Threads and Concurrency
- Lesson 3: Threads Case Study: PThreads
- Lesson 4: Thread Implementation Considerations
- Lesson 5: Thread Performance Considerations

### Part 3: Resource Management and Communication

- Lesson 1: Scheduling
- Lesson 2: Memory Management
- Lesson 3: Inter-Process Communication
- Lesson 4: Synchronization Constructs
- Lesson 5: I/O Management
- Lesson 6: Resource Virtualization

### Part 4: Distributed Systems

- Lesson 1: Remote Services
- Lesson 2: Distributed File Systems
- Lesson 3: Distributed Shared Memory
- Lesson 4: Data Center Technologies",,True,2,months,False
ud953,"Linear Algebra Refresher Course",https://www.udacity.com/course/linear-algebra-refresher-course--ud953?utm_medium=referral&utm_campaign=api,"A Brief Refresher (with Python!)",intermediate,False,,,,"This mini-course is intended for students who would like a refresher on the basics of linear algebra. The course attempts to provide the motivation for ""why"" linear algebra is important in addition to ""what"" linear algebra is.

Students will learn concepts in linear algebra by applying them in computer programs. At the end of the course, you will have coded your own personal library of linear algebra functions that you can use to solve real-world problems.","Learn linear algebra by doing: you will code your own library of linear algebra functions!","The course has no formal prerequisites except experience with some programming language. A familiarity with high-school algebra and trigonometry will also be useful.","You should take this course if:

 - You want a refresher on the basics of linear algebra or want to learn them for the first time
 - You want to see how linear algebra can be applied to real-world problems.
 - You want to learn linear algebra in the context of programming.",False,"### Lesson 1: Vectors
You will begin by learning about the basic operations on vectors (one of the fundamental objects of study in linear algebra). You will code a library of functions to perform operations on vectors that you will use in later lessons.

### Lesson 2: Intersections
You will learn the geometric and algebraic interpretation of intersections of ""flat"" objects such as lines and planes and how they are used to solve real-world problems. You will also write your own algorithm to find the intersections of sets of lines and planes.",,False,0,,False
ud955,"Computational Photography",https://www.udacity.com/course/computational-photography--ud955?utm_medium=referral&utm_campaign=api,"Offered at Georgia Tech as CS 6475",intermediate,False,https://lh3.ggpht.com/NPkAVmaCxDtgPa217cAkhz8ncvLs9zKQVbfqeYwIXJ9GBuICYSI74-41Wy6p867bmRsZDdzOwOEbm79V8TE=s0#w=1060&h=651,https://lh6.ggpht.com/MrvxuPHoayP0pl3y5SMc8rJj7PPJEEUkL0ee1vtG8CDRgJ2GIwLdqdCm14cZVUGb9kZx6IehK29CC1EhFWI3=s0#w=2340&h=484,,"This class explores how computation impacts the entire workflow of photography, which is traditionally aimed at capturing light from a 3D scene to form a 2D image. A detailed study of the perceptual, technical and computational aspects of forming pictures, and more precisely the capture and depiction of reality on a (mostly 2D) medium of images is undertaken over the entire term. The scientific, perceptual, and artistic principles behind image-making will be emphasized, especially as impacted and changed by computation.

Topics include the relationship between pictorial techniques and the human visual system; intrinsic limitations of 2D representations and their possible compensations; and technical issues involving capturing light to form images. Technical aspects of image capture and rendering, and exploration of how such a medium can be used to its maximum potential, will be examined. New forms of cameras and imaging paradigms will be introduced.","This class explores how computation impacts the entire workflow of photography, which is traditionally aimed at capturing light from a 3D scene to form a 2D image.","Students should be familiar with:

- College-level linear algebra and calculus: Knowledge of matrices, vectors, differentiation and integration, although the focus will be more on understanding and applying mathematical structures - not necessarily deriving your own;
- Physics: Vectors, optics;
- Probability theory: Distributions, density functions.

Programming assignments for this course can be completed either using Python-OpenCV (recommended platform) or Matlab/Octave. Working knowledge of either Python or Matlab would thus be required.","You will undertake a hands-on approach over the entire term using computational techniques, merged with digital imaging processes to produce photographic artifacts. In addition to understanding how various elements of the computational photography pipeline function together to produce novel - and sometimes stunning - results, you will be given ample opportunity to appreciate and critique artifacts produced/curated by your peers.",False,"Please refer to the [course schedule](https://docs.google.com/spreadsheet/pub?key=0AqyqgGWSjCbpdFFqWXJiZ01vNW15UXlwaUtTZE84MWc&output=html) for detailed syllabus set to a suggested timeline for Spring 2015, along with assignment due dates and additional materials.

Here is a brief outline of the topics covered:

### Module 1 - Introduction
- Introduction
- What is Computational Photography
- Dual Photography
- Panorama
- Why Study Computational Photography

### Module 2 - Digital Imaging
- What is a Digital Image
- Point Processes
- Smoothing
- Blending Modes
- Convolution and Cross-Correlation
- Gradients
- Edges

### Module 3 - Cameras
- Cameras
- Lenses
- Exposure
- Sensor

### Module 4 - Comp Vision to Comp Photo
- Fourier Transform
- Blending
- Pyramids
- Cuts
- Features

### Module 5 - Applications
- Panorama
- HDR
- Time Lapse
- Procam Systems
- Mosaics

### Module 6 - Light Field
- Lightfield
- Lightfield Camera

### Module 7 - Blur / De-Blur
- Lucy-Richardon Blur
- Flutter Shutter

### Module 8 - Video
- Video
- Video Textures
- Video Stabilization

### Module 9 - Closing Thoughts

---
Further resources:

- [Spring 2015 course website](https://www.udacity.com/admin/tools/content-editor#!/c-ud955): Course information, assignments, academic policies, grading scheme.
- [Piazza forum](https://piazza.com/class/i4fj9alolja61a): Discussions, announcements, clarifications.
- [T-Square site](https://t-square.gatech.edu/portal/site/gtc-cd36-2625-55b0-b0e6-d1c0d4eb36af): Assignment submissions.",,True,4,months,False
ud989,"JavaScript Design Patterns",https://www.udacity.com/course/javascript-design-patterns--ud989?utm_medium=referral&utm_campaign=api,"Organizing Code in a Disorganized World",advanced,False,https://lh5.ggpht.com/sezqV_yZkcFmfZDOsKwakrr0w7i8ixmaX3rRdCwWelR7tWRIlgNkDmS7wEZ6hB-0Tvwt_3KFWIxw-7mfxd4=s0#w=1757&h=1080,https://lh4.ggpht.com/PxWWjHCqFK6wsIXVgIu4j82q44N6maGXu2TqfhaZ5p5DdP9VaTQl9IfvHGMgzQOieIjKVWvHTOCmxeT17A=s0#w=4680&h=968,,"This course covers methods for organizing your code, both conceptually and literally. You’ll learn the importance of separating concerns when writing JavaScript, gaining hands-on experience along the way. Separating concerns can be done with or without an organizational library or framework. We’ll learn how to separate concerns without one, and then we’ll explore an organizational library together. You’ll also learn strategies for exploring other libraries and frameworks on your own.

By the end of this course, you’ll understand (from experience) the importance of code organization, and how to implement it with either vanilla JavaScript or an organizational library or framework. Your applications will start looking clean and professional—not just to your users, but also to anyone who looks at the code driving your applications.","Learn the importance of code organization and how to implement it with either vanilla JavaScript or an organizational library or framework.","This course is for intermediate web developers with some experience with JavaScript, and some prior experience with a JavaScript library, such as jQuery.

Students should also be proficient in HTML and CSS, and should have experience creating static pages.","Many developers dive right into projects without thinking of the organization or structure of the code they’re writing. It's easy to hack projects together, but the best developers spend the extra time to think about the organization of their application and adhere to sound organizational practices.

In order to write clean code that will get you your next job or promotion, you'll need to have a solid understanding of organizational techniques, and you'll need to implement those techniques in your projects. Software developers who write clean and organized code are surprisingly hard to find, so if you can master code organization you’ll be a step above the rest.",False,"###Lesson 1: Changing Expectations
We'll first start by building a project the way you already know how: without an overarching organizational paradigm. Specifically, we'll discuss pain points and difficulties that are easy to run into when you don't use an organizational model. Then, we'll discuss a paradigm that will help us in the future, and we’ll see some examples of that paradigm in action.

###Lesson 2: Refactoring
We'll spend some time discussing how our new paradigm applies to the project we worked on in Lesson 1. Then we'll rebuild the project with the new organizational paradigm.

###Lesson 3: Using an Organizational Library
We'll explore how to use KnockoutJS, an organizational library, to organize our code and to reduce the amount of boilerplate code we write. Our resulting application will be well-organized, easy to understand, and extendable.

###Lesson 4: Exploring Unfamiliar Code
In this final lesson, we'll spend some time talking about how to explore code that you didn't write, possibly even using a library or framework that you aren't familiar with. Exploration is one of the most important skills for a developer to foster. and this lesson will get you started on that journey.",,True,6,weeks,False
ud990,"Learn Backbone.js",https://www.udacity.com/course/learn-backbonejs--ud990?utm_medium=referral&utm_campaign=api,"Write Organized JavaScript Applications",advanced,False,https://lh3.googleusercontent.com/F3-J__TwE1s_bHhRSgu0pwgM-vWgU5OA9FxbyS9690d4Nj4lOHJfaAq5zsHmYf7uthwSyF9fGUG_camRsOc=s0#w=1920&h=1080,https://lh3.googleusercontent.com/GTFguzWW1gtPV1Yg7F7ZGdWa3wp2baIueILxhxSETzrXXOMXyYCoSDD4oS6yQFRbo5cmrvoOxE1SJeJnyzU=s0#w=4680&h=968,,"This course is a collection of resources designed to introduce you to Backbone, a common organizational library for front-end web applications.

By the end of this course, you’ll know how to write well organized web applications using the Backbone framework. You’ll also make use of the Local Storage API or a service like Firebase to support persistent data storage across user sessions.","This is a collection of curated resources to teach you how to write well organized web applications using the Backbone framework.","This course is intended to build on the knowledge and programming concepts taught in <a href=""https://www.udacity.com/course/javascript-design-patterns--ud989"" target=""_blank"">Javascript Design Patterns</a>, is for web developers with JavaScript experience, and some prior experience with a JavaScript library, such as jQuery.

Students should also be proficient in HTML and CSS, and should have experience creating static pages.","There are two reasons this course will help you. First, having experience with a popular organizational library or framework will significantly boost your skill set in the eyes of future employers.

Second, this course requires you to read external resources and practice learning on your own. Researching and learning new technologies is a critical skill for all Front-End Web Developers. This course will help you put those skills into practice.

These resources will also:

* provide a high-level view of Backbone, what it provides, and how to organize applications with it
* demonstrate how to build an app, (chunk by chunk) from simple to more complicated
* take you step-by-step through the creation of moderately complex sample apps",False,"This course is composed of blog posts, articles, and documentation pages we've curated to get you started with Backbone.

### Getting Started
Using this first resource you’ll get an overview of the Backbone framework and the various components that make it up.

### Building a Simple Backbone App
You’ll follow a short tutorial to build a simple Backbone application that dynamically calculates a shopping cart total.

### Hello Backbone
This resource will walk you through a number of Backbone examples that get progressively more difficult. Get these examples up and running within your own environment and then add functionality and experiment with them!

### Diving Deeper with Backbone
You’ll read through a portion of Addy Osmani’s book, <a href=""http://addyosmani.github.io/backbone-fundamentals/"" target=""_blank"">Backbone Fundamentals</a>, to gain a deeper understanding of how Backbone helps you create highly organize web applications.

### Building a Todo Application from Scratch
You’ll take everything you’ve learned thus far and put those skills into practice as you develop a todo list application.

### Real-time Data with Firebase
You’ll learn how to use Firebase within a Backbone application, providing real-time, persistent, data storage.",,False,2,weeks,False
