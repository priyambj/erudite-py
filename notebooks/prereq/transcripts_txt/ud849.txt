Welcome to the lesson one assignments. I'm Andy Brown and I'm a Udacity course designer. I've been working with [UNKNOWN] Isabelle to design these lessons, these end of lesson assignments and our intention was that they be taken in order. Lesson one, assignment, lesson two, assignment. But you don't have to do it that way. These assignments will take a little while. For this lesson, we expect maybe an hour and a half, if you're doing it thoroughly. And depending on why you're taking this class, you may not need to do that. If you're a designer who is just interested in seeing what's going on in the world of design, you probably don't need to do all of this. But if you are a developer and you do want to increase your design skills, the only way is through practice. So, before we jump into these questions, let's talk a bit about how to approach these assignments. Most of these questions won't have a correct answer. Rather than asking you to choose the correct definition of user experience we're actually going to ask you to do some design. We're also going to ask a lot of questions where the only output from you to us is your response to the question, did you do this? Now obviously, the purpose of a question like this is not to prevent plagiarism. The assumption here is you are in this course, you want to learn how to improve your design skills. And, anyways, if you are actually enrolled in the class, your final grade of pass or no pass will be based only on your final project. So, the purpose of a question like this is really to help you keep track of the questions you've answered and which ones you haven't. You get that nice little orange bubble filled in somewhere up here in the navigation when you've completed a question. And, another part of the reason why we ask these questions is for us, and for the continued improvement of this class. We want to know if the people taking this class are doing the assignments. We're also going to ask you to submit to the forum quite a bit. And let me actually talk about that a bit more. So working on this course with Nasman and Isabel has been awesome. Pretty early into the design of this class, we realized that the design process that. We at Udacity have sort of converged on over the last few years, is essentially identical to the design process that Nasman and Isabelle advocate for, in the world of software. One example of this, in less than four, you are going to learn how to take the things that Android can do really well and leverage those opportunities to make amazing experiences for your users. But, more generally what I think's going on here is, you should know as a designer, what you are uniquely positioned to do well. No matter what you're designing. And then you should do that thing well. In these massive classes that we've been making for a while now, we've realized that one thing we are uniquely positioned to do well is leverage this amazing, massive body of enthusiastic, diverse, intelligent students who are all thinking and doing projects about the same sort of stuff. And that's, that's a really huge learning opportunity. So when we ask you to write something down or share something in the forum. That's, that's why. We want you to not only learn from the writing experience itself, but to share that with other students and read what other students have to say. This, this sort of social learning is a really potentially important part of the online learning experience In this question, you're going to go to the Play Store and find an app you don't like, and then we're going to deconstruct why. Now, you may already have an app in mind, something you've used and don't like. You can use that. If you do go to the Play Store, you may have to look a bit. Sometimes Play Store will tend to feature the higher rated apps, of course, so you may have to dig a little deep. After you find an app you don't like so much, you should make two flows, in Prezi. In the first flow you will describe, or depict I should say, one flow through the app as it currently exists. I say one flow, because complex apps can have a complicated hierarchy of potential flows. After you do this, you're going to think at a high level. Now, what about this flow is making you unhappy? And then, you're going to fix it. Now, not every app that displeases you is wrong because of its high level flow. You may just not be the intended audience. But hopefully you can find one where this is the case, and focus on it. Once you've made your two flows, you're going to post to the forum. You can either find the thread in the instruction that's below, or in the discussion section off to the side. The goal of this whole question is to get your thinking and speaking like a designer, and making high level improvements to products. Now unless you're one of the first students to make it through this class there are probably a lot of, responses in that thread. And in this question you're really going to take advantage of the form. And the way your going to do that, well, let's write it as a flow. First your going to find somebody elses response to the previous question. But when you do this make sure that you don't read the review or anything but the name of the app to begin with. Because the second step is to form your own opinion about this app. What do you like about it? What do you dislike? What would you change? Once you figure these answers out for yourself, you can go on to step three, which is actually to take a look at the other students' prezi. You'll learn what they didn't like about this particular app and how they would fix it. Finally, you'll respond. Just in that same thread, you'll respond to the post that this other student has made. And this is the part where you have to make sure to be productive. Nobody's wrong in these situations, different people like different things. In fact, in the next lesson, we're going to learn that even though good or good can differ between users. We still have systems and techniques that we can use to insure the products we build will be good for our intended audience. So by now hopefully you've bought into this idea. That it makes sense to start a product by thinking at a high level and not delving into details too soon. Now you're going to apply that idea to something you've actually built before. And the way to do that, is first you'll identify a product. This doesn't necessarily have to be a mobile app, or even an app at all. It should just be some product that you've worked on in the past. Once you decide on that, you'll think about what the intended UX was. And I'm using this word intended, even though there's definitely a chance you may not have explicitly thought about user experience. You probably had some implicit understanding of what you wanted this app, or this product to feel like using. Next you'll make a Prezi Wireframe, to help you focus on the high level flow of this product. And then you'll find opportunities for high level improvements. This can be rearranging this steps, adding a step, or moving a step. Or hopefully by forcing yourself to write down the flow of the product at high level, kind of like this. You'll spot any opportunities for big picture improvements, good luck. Welcome to the assignments for lesson two. Now the assignments for this lesson are probably the most involved and time consuming of the entire class. They may take you three to four hours to complete if you do them thoroughly. So, if you do find yourself getting drained or bored or just running out of time, don't rush through them. You should do these well if you're going to do them at all. But, you should feel free to either skip ahead to lesson three, or if you're getting bored, just take a break. If you do decide to take a break, I would definitely, set a calendar invite for yourself to remind you to come back for the class. It's pretty easy to forget that. Good luck In this question, we're going to ask you to make a persona. Now, doing this can be one of the most difficult and intimidating thing that a designer has to do, but it's really useful. So to try and keep this very first persona as sort of simple and straightforward as possible, we're going to ask that you make it for yourself. And hopefully these two words are throwing up a huge warning for you. Because it almost, sounds like we're asking you to go down the path of designing for yourself, but we're not. Normally, you do not want to design yourself, and you won't be doing that here. So why are we asking you to do this? For one thing, we hope this is an easy introduction to creating a persona, because it really can be quite difficult. For another, what we want to do is seed the discussion form, with a bunch of authentic personas and use cases. In, in the next question you'll take the personas and use cases created by classmates for themselves, and build feature lists and flows for them. We've create a template in Prezzy, and there's a link to it below that might help you out. So you can probably guess what this question would be. You are going to find a persona created by one of your classmates in use case. And you are going to create a feature list and a flow for them. And once you've done that, you are going to respond to their post in the forum, and hopefully engage in the discussion. You can maximize your chances of engaging in a discussion if you choose a student who has posted recently. If you choose someone who posted six months ago, it might be hard. And hopefully the feature list info that you create for this student persona in use case will be really perfect for them. But it might not be. This stuff is not super trivial. And if it's not, that's good. Use this as an opportunity to see where you went wrong and how you can improve. This question is sort of a big deal, it's where the final project begins. And so work you do in this question may wind up contributing to what you submit for your final project submission at the end of the class. Since your final project is the design of an app, the first step is to answer the question, what app are you going to build? And at this point I should mention it's okay to not be thinking of personas and use cases and high level flows here. This is where you decide on the project that is going to excite you and keep you motivated, without that excitement probably won't even build anything at all. So it's really important that we start with what app do you want to build and here we're really just talking about maybe a two to three sentence explanation. Any more detail than that and you probably want to have an idea of who your users are and what this app is going to do at a high level. Keep in mind that though you are going to be coming back to this final project throughout the class you can always change your idea. So don't feel like whatever you do here you have to be too committed to. So you just answer the question of what app do you want to build for your final project? In this question, you're going to determine in more detail exactly who you're building this app for. And in the next question, you'll actually can start the high level flow for this use, but let's stay focused here. So the flow for what you'll do in this question itself. Is first, you'll find a potential user. This could be a friend, co-worker, family member. Somebody who you think could ever feasibly want to use the app you described here. Then you're actually going to do some very basic user-experience research. This will essentially be an interview with this person you know. We'll try and figure out the attributes about them as they pertain to the app you want to build. Now doing this is really hard, user research is not easy. And we've provided a privy template which includes some suggested questions and categories of questions to think about. Once you've done your user research, you'll actually create a persona in this case, for the person you interviewed. Again, the template's going to be really helpful for this step. Some really key points when you're thinking about user research. First, be quiet. And by that, I mean the other person should be doing most of the talking. Try not to interrupt and definitely don't ever tell them they're wrong. Second, is to ask open questions. And by this, I mean, let's say you were to make a music app for this person. You shouldn't ask a question like: how much do you enjoy listening to music in the car? Rather, ask when do you listen to music? So now, you know what you're going to build and who you're going to build it for. It's time to think about flow. In this question, you use the persona in use case you created here to generate a feature list and high level flow for your app. Welcome to the assignments for lesson three. The assignments in this lesson are going to have you thinking about respecting mobile constraints,. And we'll even add another level of detail. going to go deeper. Let some Inception kind of stuff into the app you've been working on. Let's get started. This first question requires a bit of explanation, so bare with me here. The goal of this question is to find an app on a Play Store that has low ratings. Then, we're going to estimate how much of that low rating came from violated constraints. So the way we're going to do this is by going to the Google Play store. And we're going to find an app with a relatively low review. Let's say below three and half stars. So I just clicked on this app. Looks like it has a review of about three and a half stars. And notice if I scroll down, I can see what the actual average rating is. But I can also see were that rating came from. 720 five star reviews, 310 one star, and so on. But beyond that I can also click into the individual reviews. >From this page I can look at reviews by Newest, Helpfulness or Rating, which will be especially helpful for this exercise. And then I can read individual reviews. Apparently this person's upset that this app requires camera and microphone permission. In this question you're actually going to read a lot of reviews with different star ratings of an app that has an overall pretty low rating. And as you read you're going to pay attention to how many of these reviews reference violated mobile constraints, as a reason for the low rating. As you read these reviews, you're going to be filling out this table. So the rows represent the number of stars, and this column is the total number of reviews with this star rating. This column is where you'll keep track of the total number of reviews you read with that star rating. So, let's say you had looked at five one star reviews and three those had violated mobile constraints. You're going to go through this table, fill out all of these fifteen boxes, and at the end when you hit submit, over on the right side here where you get your feed back the apps current rating will be calculated. You should already know that but his will be a sanity check. It's predicted rating, if no mobile constraints had been violated, will be calculated as well. Now this prediction is of course a prediction, it's an estimate, and it comes from the assumption that one, the reviews you read were somehow representative of people who gave one star reviews or two star reviews. But, also there are some assumptions baked in about, well, if you'd given it a one star review and said there was a violated constraint. You probably would of given it a three or four star review, had there been no constraint violated. You can read more about those assumptions in the instructor notes, and if you have any questions, I understand this is a bit of a confusing question, feel free to post them in the discussion forum. Hopefully that previous question wasn't too complicated. This one should be more straight forward. You're basically just going to take the low rated app that you identified in the previous question and improve it. Focusing your improvements on how to avoid violating those mobile constraints. And in this question, you're going to go back to the final project app you worked on in the previous lesson. And much like you saw in this lesson, you're going to add another level of detail to your high level flow. You should also add callouts in presi, to show how mobile constraints will be respected. There's a template, presi presentation, which you can find in the instruction notes, that will help you out. Welcome to the assignments for lesson four. First, congratulations on making it this far in the course. Hopefully you're really starting to see your identity as a designer change and improve. And in fact that's the first thing we'll do in these assignments is we'll come back to that question we asked in the very beginning of the course where we ask you to rate your identity as a designer and a developer on a scale of one to ten. After that, you're going to have a chance to give us some feedback. After all, you are users and we do want to know whether we delighted or disappointed and either way, we want to know how to do better next time. Finally and this is the most exciting part you will take the final project app that you have been working on. And add moments of delight by leveraging the power of Android. Now is your chance to give us feedback. If you look in the notes below. You'll find a link to a survey. And if you could fill that out it'd be really helpful. We want to know what we did well, and we want to know what we can improve on. Plus you're our users, and it's a good idea to talk to your users as often as you can. Thanks. And now we're back to the final project, and this is the fun part. So this is where you should go through your app, to find opportunities for contextual awesomeness, and then, keep searching for inspiration. This may mean researching Google Play services more or checking out the repository of awesomeness. But once you've figured out something out that you think you can do that you really add to your app, add call outs to your prezzy that will help other people understand what that awesomeness is. And of course, you must obey the two prime directives, which are to always be purposeful and respectful. Just because a feature exists doesn't mean you need to put it in. And of course, don't be creepy. Good luck. Congratulations, you finished the course. And hopefully you've gotten a lot out of it. If you want to learn how to actually build these amazing apps that you've been designing, you should take Udacity's Developing Androids Apps class. Good luck in your life as a design minded developer. Fact, there are a lot of apps in the Play store. I know and most of them are probably made by really awesome developers. But it's not enough anymore just to be an awesome developer. Unfortunately, a lot of these apps get really low ratings. And low ratings are almost always a sign of bad user experience design. With that in mind. Welcome to UX Design For Mobile Developers. This class will teach you, developers how to design amazing apps that get five stars. My name is Nazmul. I am a Developer Advocate at Google and I specialize in Android and User Experience Design. Hi and I'm Izabel, I'm an Android Interaction Designer and Prototyper. Awesome. So Izabel, why are we teaching this class? Well, currently today the world of design and development are largely siloed. And this is crazy because we all have the same goal which is to make amazing applications that our users love. And the goal of this course is to help bring these two worlds together and help you become a design minded developer. So you know, to make amazing apps you really have to know a little bit of both. As a developer you have to think a little bit like a designer. I actually consider myself to be a design minded developer. So if I were to place myself on a scale of design and development skills, I would say I'm a ten on develop and maybe like a seven on design. So Izabel, where do you see yourself on this scale? For designer, I would put myself at a ten. Cool. And for development, since I'm a prototyper I would put myself at a bout a four. Oh nice. So, where do you see yourself on this scale? I want you to really think about this because at the end of this class we will ask you to take this quiz again. And hopefully you'll have moved way higher on the design scale. So the purpose of this quiz was to get you thinking about where you fit on the scale of design versus develop. Yeah and we're going to use quizzes like this throughout the course. So these quizzes are really to help you start thinking differently, like a design minded developer. And to really practice the design skills. So we hope that you'll take some time and effort, and take these seriously, and really work hard on them. Yeah. The more effort you put into this, the more easily you will level up and become an awesome design minded developer that creates amazing apps that blows their users minds. So, how will this course help you become a design-minded developer? Well, we're going to go through four lessons. The first lesson is what is UX? We're going to learn about the difference between UI and UX, because there's a lot of misinformation out there. The second lesson is about how to create applications for specific users. And we're going to use tools called personas and use cases. The third lesson is about mobile design constraints. Because after all, this course is for mobile developers. And in lesson four, you're going to learn how to leverage the power of the Android platform to make applications that Android users really love. Yeah, in each lesson your going to be introduced to new concepts and ideas. That you will have an opportunity to put into practice at the end of every lesson, in the form of an assignment. And the assignments are going to be led by a Udacity course designer named Andy. Hello, Andy. Hey, Andy. So Nelsman, let's briefly talk about a few things that we're not going to cover in this course. So we're not going to teach you how to code. You're developers after all. In fact, we have an Android class made by Udacity. The link is in the notes below, if you want to take that class. And we're also not going to cover any Android specific UI elements. So now, let's dive into what you're going to learn in lesson lesson. First, we're going to define, what is user experience? Then, we're going to talk about the difference between UI and UX. Then we're going to give you two concrete examples of how you can improve your apps today. But before we get to all this, let's leave the world of software design. And I want to show you, a really awesome personal example of something that captures really amazing user experience design. [SOUND]. Whoa. That is the sound of great design. That sound was made possible by electrical engineers, mechanical engineers, and even audio engineers, that came together to engineer the perfect sound of speed. Nice. But that's not all. Whoa. want to take it for a spin? Yes. [SOUND] This is user experience. [SOUND] That was awesome. I know. The reason that we showed you guys, the example of a Porsche to illustrate use, good user experience design. Is because we want to explain that, good user experience should make your users happy, it should make you happy. That's kind of the whole point. And UX design is about all of these tons of different things coming together. So if every person that made the Porsche if anyone dropped the ball, the UX of the Porsche wouldn't be awesome. It's, it's all these things coming together that really makes user experience design, because design is everyone's responsibility. No, exactly, and I think one of the important things for, for us as developers to remember is that, all the things that made that Porsche amazing, can actually port it directly into the software world. Yeah. So let's bring it from the Porsche world, into the software world. Now, when we're in the software world, as developers, we think in terms of code. So, let's look at all the code that we write as something that goes in this box, and let's say that all the code, contributes to what's called the user experience, of a particular application. So now if you, take a little bit closer look at the chunks of code that we write. Let's say that you have code, that essentially puts pixels on a screen or interacts with the user in any way. This could be through audio input or audio output. Let's say that that is your UI code. Let's say the rest of the code that you write, stuff for your backend and so on, the non-visual code, that actually does not have an impact on the UI, but it does have a direct and strong impact on the UX. And that's something that, we should always keep in mind. So, this is basically the difference between UI and UX. They're not synonyms, but they get thrown around a lot so I think it's important to kind of, disambiguate these two terms. Yeah, exactly. The visual and non-visual code come together to deliver the user experience for your application, whereas the visual code almost exclusively delivers the user interface. But the most important thing is that he overall UX, should make your users feel happy. Yeah, so think about an applications that's made you happy. What has blown your mind by delivering an awesome user experience? Keep that app in mind, because we're going to be using that later on this lesson. So we just asked you what your favorite application is. So, Isabelle, let me ask you. What is yours? My favorite application would have to be Google Now. That's a good choice because I just so, it just so happens I have a screen shot of it right here. So what do you like about it? What is it? Well, I really love Google Now. It's basically an application that combines all these different data sources or signals about me and kind of anticipates the information that I might need. First of all, the visual design is really amazing. I think they really got that right. If you look at the agency meeting card they just took a lot of information, and put it in a nice, glanceable way. And it's just really clean and easy to see. Cool. I really like the engineering aspect of this. So they took so many data sources and put them into one card. And they, and the information is really accurate. Another thing that I really like is the interaction design. Really in two ways when I first started using Google Now I didn't have to fill out a lot of forms or tell a ton of information about myself to get it set up, it just started kind of learning from the way I used it. And also the calls to action or, or the contentional actions off the cars are really awesome. There's just a few of them and they're really useful. That's awesome, so how would this have gone wrong for you? Like, for example, in the user interface or engineering interaction, can, can you give me examples. Yeah. of what happens if you get UI wrong, for example? If you were to get the UI wrong, the cards would no longer be glanceable. Basically, you have to stop and really study and read them. They would no longer be easy to glance at and get information from. Oh, so if I'm on the go, which is the whole point of this app, that would pretty much make it useless for me. Yeah. Right. So what if they got the engineering wrong? If they got the engineering wrong, basically it would kind of erode your trust in the application. Like if it told me that my flight was at a certain time tomorrow, it really wasn't then, or if that wasn't even my terminal or gate number. You would kind of never trust the app, and probably stop using it. That's true. Or if it gave you walking directions to work, that would be really awful. Yeah, that'd be a very long walk. What about this interaction design thing you talked about? What if they got that wrong? I think it's really crucial how the setup of Google Now works. It just starts presenting cards based on your usage, and asking you whether or not that's useful information for you. So if it had asked me to fill out, you know, ten pages of forms, like, like when you're going to a new doctor's appointment and tell it everything about me I would have never set it up in the first place. That's true. So it sounds like design is everyone's responsibility. Yeah. And if everyone does their job, in UI engineering, interaction assignments, and so on, then the user ends up having an awesome experience with their app. Yup. So let me ask you this again. Like, whose responsibility is design? So to recap, we've learned what is UX and we've come up with some really good examples of user experience. And we've learned about the difference between UI and UX. And also we've learned that UX is everyone's responsibility. So now, as promised, we're going to give you two concrete examples of how you can improve user experience of your app today. So the first one is login. So let's look at this login or account creation form. So, an account creation form is usually the first thing your user sees right after they download your application. So take a minute and think about some things you might do to improve the UX of this form. So there are many ways you could improve this form. One of the ideas you might have had as to improve the visual design of the theme of the form, to make it look a little bit more Android-y. Another thing we could of done is maybe making the fonts a bit bigger, making the spacing a little bit wider, just to make the form kind of flow better. Another idea would be to validate the form, so the user knows what to type in if they got something wrong. Nazmul, do you have any thoughts on this? Yeah actually, if I were to answer this questions like six, seven, or even eight years ago when I had my start up, I actually would completely agree with everything you said. I probably, like you, created this really awesome sign in form. But the correct answer is actually not to have one. The most important thing to do in this situation is to remove this form in it's entirety. And replace it with Sign In with Google or Sign In with Facebook or Sign In with LinkedIn, who, or whoever your favorite social identity provider is. There's no reason to subject your user to having to fill out all these long forms when all they want to do is use your application. That's like the worst time to actually bring this up. Instead by removing this entire flow and having a single button that they can use to sign in, it makes their life easy. And it also makes your life easy, because you can now get out of the username and password business. And use social identity providers who provide the service for free, reducing the amount of work you have to do and also what your user has to do in order to use your application So we just finished talking about the sign in flow. Now, we're going to talk about a second concrete improvement of how to make the UX of your app better. And that is with the checkout form. So if you have an application that involves your users buying something from you, then this step is really important. Yeah, and this is actually a point where 70% of users on average on the Internet. Drop off meaning that there's 70% abandonment rate of shopping carts across the web. That's a huge number. That means like three out of ten people are actually making it through this form. When they see this form the first reaction that people have is they run away. So, so how do you actually make this form better since it's such a critical part of you actually getting paid. We need to make it easier for users. Yeah, exactly. So how would you improve this form? So, would you add more steps, for example? Instead of having a single page with all this information about building information, shipping information, credit card information. Would you break it out into multiple steps? Or would you improve the visual layout of this form. Would you add more spacing, bigger fonts, and make it so that people can more easily type information in this thing. Or, my favorite, would you actually add more text boxes to this form. because, you know, that's the one thing that people like to do is fill out more information on tiny, tiny mobile screens. Or would you rather just replace this form entirely with a pre-canned solution, like check out with Google, or with PayPal, or Amazon. And this was not a trick question. The correct answer is four. Which is simply replace this form with a pre-canned solution, like Google Checkout or PayPal Checkout. So we just gave you two concrete examples of how you can improve the UX of your app. Exactly. The Sign-In and Check Out buttons to replace forms are a really good idea. But, I know that I've actually ended up creating my own sign-in and check out forms. And I spent a lot of time optimizing them. Yeah, me too. I'm sure you've done the same. I, I've done the same thing. I've spent a lot of time trying to design the perfect sign-in form, and I've tested it with users and tried really hard to optimize it. Yeah. So the, the solution as we've presented them to you are actually just Band-Aids. There's an underlying cause actually there is an underlying problem which results in us. Coming up with these forms, and really focusing on the forms rather than focusing on the applications themselves. If your first instinct was to optimize locally, and not to just replace sign-in and check out with one of these solutions, what was your thought process? Were you thinking too detailed? Were you thinking too high level? Were you not thinking of the bigger picture? Were you trying to reuse existing code? Or is it something else? Or none of the above? Check all that apply. So there's no right answer for this quiz. But I find that a lot of developers and designers usually think too detailed. Yeah, I find myself as a developer, and along with many other developers, I think following the trap where we try to reuse existing code and also I think too detailed. Yep. So focusing on details first is a really common problem in design and in development because when you do this you can really only optimize locally. So what's a good solution for this problem? Well in design we have a technique it's called wireframing or low res wireframing. It helps us really focus on the UX first and the big picture. Without getting caught in the UI details too soon. I know in development, they do something very similar? Yeah, I know. In development there's a really easy trap to fall into, is when you start coding, you you just want to create functions. And you don't want to think about abstraction and you don't want to think about encapsulation. So as a Java developer maybe you make the static class and you have a lot of methods in it and you forget about interfaces and classes altogether. That's again an example of in development, where when you focus on the details kind of bad things happen. So it's kind of always a good idea in development and design to think about the big picture first. So the sign in and the check out example we just gave you, imagine that is part of an experience of a cookie buying application. So here's how you really get started, imagine there's a task that your user wants to complete. So for this example, it's I'm hungry for cookies I want to get some and eat the cookies, basically. So then you think about what steps does your user need to go through to complete this task? So this is an easy example cause we only have one task. So the steps would be, sign in decide which cookie you want, pay for your cookies and then eat the cookies. So when we write out each of these steps at a high level like this, each of these steps is kind of like a Java interface. Exactly when you think about a Java interface, it's something that doesn't have any implementation, so you're not really thinking about the low level details but you're thinking about the contract that interface has with other interfaces and classes. Which in this case if you look at the steps, it's how these steps connect with each other. So instead of focusing just on one step and nothing else, you're really thinking about the big picture. Exactly, so now that we're thinking about the sign in experience as part of our overall flow in order to buy cookies, how do you think we should start? Do we even need a sign in experience? You know actually, we might not actually need a Sign In experience. We could have an anonymous experience because what if I just want to install the app and just get cookies. And maybe after I've used the application or maybe even gotten some cookies for the first time, I might think, okay maybe I'll use this application again. That's a good point but actually the way I would use this application is that I actually do want to sign in because I want to see my order history any my payment history. And actually I want to place orders that I've already placed before. Okay. So for me, like for someone like me, if I was a user, I would actually want the sign in experience sooner rather than later. So we could actually give the user an option of just getting straight into the app and buying cookies and just skipping sign in. Right. Or for users that are more like you, we could let them sign in initially. Yeah that's true, so actually what we could do is, instead of having this sign in happen up front maybe we can actually. Allow them to flow through this application without signing in but when they actually need to then block them with the sign in. Just before check out. I like that, that would actually end up in a much nicer flow. Yeah. This is great I hadn't even thought about it but now that if we actually move the sign in to this step it actually ends up in a much better application. I agree, I think that using low res wire framing really helped us elevate the whole discussion. We could look at the sign in experience and really see how it made the most sense to put in the application over all. Exactly. Which again it results in a much better application for the end user. Yep. So, we haven't really changed anything. We've just thought about it at a high level and optimized how they link up just like good interfaces should and we can worry about the implementation later. I think, this deserves a fist bump. Low res framing wire for the win. Boom. So, let's recap lesson one. Our task, was to learn what is user experience? And the steps we followed were, we defined user experience and we gave you a super-awesome example and demonstrated how a need for speed and portions is a really great example of user-experience. That was my favorite step. Yes. And the second step was we disambiguated UI from UX. We talked a little bit about the difference between visual and non-visual code. We also gave you two really great examples of how to improve your apps user experience today, with the sign in and check out flow. And we also touched on Lowe's wire framing, which is a really great technique for starting at the high level and not focusing on the details to start with. So in Lesson two, you're going to learn how to make applications that people love to use, by focusing in on your end user. But before we get into lesson two, you're going to watch some interviews from some real users. Yeah, and as you're watching these videos of real users actually interact with applications, make a note of what makes them unhappy, and what makes them happy, in, in these applications. And also make a mental note of whether the things they mention are related to visual or non-visual code. So I think my favorite app would be Sound Hound. And basically your out at a party or a store. And the song comes on and you're like "oh, this song is awesome but I don't know what it is". And you pull out the Sound Hound and it listens to a little bit and it tells you it's Jay-Z and BeyoncÃ©, Bonnie and Clyde. I can't think of anything about it that really annoys me. If they could improve it there's songs that it doesn't recognize. Like they're building the library the whole time and I'm sure it, you know, they can make it faster but if say as they're building their library later on. And it recognizes one of the songs they didn't recognize earlier if it would just text me and it would be like that song that you were listening to eight months ago? This is what it was and then I, that would be amazing. I think my favorite app is C25K and the C stands for couch potato and it's basically where you. If you have no running experience, it gets you up to running 5k in eight weeks. Some of my favorite features in this app is that it allows you to play music while you're running and then whenever the app talks to you, it pauses the music. So I never have to worry about running over the time that it allotted for me or anything like that. It uses the playlists that are already in my phone, so if I create playlists, like, I love Justin Timberlake, so I have a running Justin Timberlake playlist and if I'm in the mood, then I put that o, or if I'm into like some nineties music, I have my nineties running playlist, so I love having that option. So one of my favorite apps is Pinterest, it's a service that allows you to collect digital images you like and put them into boards. So, there's various uses of it and personally I've been trying to come up with a visual theme for our website. And I use that board to collect different images on robots cause that's a theme were pursuing. And I just put them into a board and I can quickly see like patterns and like, things I like in one place so that's very powerful. And I can use that for inspiration, mobile and desktop across various different platforms. So, an app that I didn't like that I downloaded a while back. I think it was called SleepBot and basically, it uses an an accelerometer to track your movements as you sleep. And it figures out when, how deep of a sleep cycle you're in and wakes you up when you're not in such a deep sleep cycle. It wasn't very reliable the way it works is that you say you want to wake up, let's say at say 6:30 and it'll either wake you up up to 15 minutes before or up to 15 minutes after that didn't always happen. It could have been an hour, two hours or it would just never ring. It's not a good idea when you have a job. [LAUGH]. So last app I remember uninstalling I think was called Public Bike SF. It gave you biking routes through the city. So, San Francisco's a very hilly city and it tells you like you're going here to here. Take these streets so you don't have to you know, climb up this crazy hill and go back down it but I'm not using my phone while I'm on my bike. So, it was basically just useless and really slow. It was awesome, seeing all those users in those interviews because, as developers, when we write code, we just commit it to, some repository and we don't actually get to see end users actually use the products that we make. Yeah, it's interesting to hear them describe the things they like and don't like about applications in their own words. Yeah, exactly. I thought it was really cool that, although, those users were very different they seemed to have a lot of things in common. I know. We're going to have a lot of fun, talking about this in Lesson Two. Remember in the beginning of this lesson, we asked you to think about your favorite app? Mine was Google Now. So take a moment and play with that, your favorite application. And take into account all the stuff you learned in lesson one. And then go to the forum, and share with everyone why you love this application. So take the time to think about whether the things you love are visual or non-visual. Whether they're UI or UX related. So as developers, this is going to be an awesome opportunity for you to share your design opinions. And if you see someone else, bad mouthing an application that you're passionate about, take this as a opportunity to understand that there's many, many different types of users out there. And, and really get an understanding of how different people feel about applications, and we'll pick up on this in less than two. Welcome back. The goal of this course is to get you to level up from an already awesome developer to an even awesomer design minded developer. Exactly. So let's start by reviewing what you learned in Lesson 1. The first thing we learned in Lesson 1 was, we defined UX and disambiguated it from UI. Then we gave you an awesome visceral example of great user experience. I love that visceral example. And we also use two examples of a sign in form and a checkout form to illustrate why it's bad to start with detail first thinking. It basically causes you to only optimize locally. Yeah, exactly. You end up creating some really awesome forms, but the overall application might suffer, and if you zoom out you actually get an idea what the application should do. And then you might decide you don't even need those ones. Exactly and then we also learned a technique called LO RES wire framing, which helps you think about your application as a series of steps that your user needs to go through to accomplish a certain task. So now that we know that we're supposed to think in this way, where do we go from here? What do we do next? So in Lesson 1 we are really focusing on the smart phone. But now we're going to start focusing on the person. So we need to ask ourselves, who is our end user? Or who are we making this application for? So Isabel, how do we focus on the user? And that's a great question. And the answers all lie ahead in Lesson 2, where we're going to talk all about how to design for our end user. Before we get started, let's go over a quick overview of what you're going to learn in Lesson 2. We're going to discuss two things. The first is how to design applications for a specific type of user, or a persona, and their use cases. The second thing is, how to build a feature list that's tailored for your persona and your use case to make sure that your application will really delight your user. Sounds great, Isabelle. Let's get started We're going to start out with a really fun challenge. [CROSSTALK] Pizza. So your going to design the perfect pizza application on Android. So this app is not like Seamless, just imagine your ordering pizza from a single pizza parlor. [NOISE] So what are the top three features that you would like to see in the perfect pizza app for Android? Yeah, and really put some thought into this. I know we're asking you to do this exercise, without really telling you why, but it plays a critical role in you doing really well in this particular lesson. So please put some time in thinking about what makes a great pizza app for Android. So, Izabel, let's brainstorm and come up with the perfect pizza app for Android. What would your top three features be? My top three features would be seasonal recommendations. Because I think people like to order new things all the time and why not take advantage of seasonal ingredients. Second one? The second thing I would choose would be, a filtered ingredient list. Oh. because some people have food preferences. Like, they can't eat gluten or they're vegan. So, just remove stuff that they can't eat, completely off the menu. Just filter it for them. [CROSSTALK] And third would be Google Wallet because this is for Android and that's the primary way people pay for stuff on Android. Oh, it's fantastic. So, what about you, what would your, what do you think the top three features for this app should be? For me, they're actually a bit different. My number one feature would be one-click ordering. Cause I think that the user would really enjoy very quickly ordering a pizza for the first time and also coming back and making repeat orders. The second feature I would pick is, order history. This would allow someone to find out what they placed an order for before and see how much money they're spending on pizza. Okay. And finally, I think that the user would really appreciate real time status updates. Because I know that if they're hungry and they want their pizza delivered, they would want to know where it is and when it's going to get there. Perfect. So, looking at these features, it kind of seems like the three features you picked are classic you. Because you're a creature of habit, and you always order the same food every single time. That's true. So you can get back to coding. You think of food as fuel. I do think of food as fuel. Who doesn't? Yes, and order history, you're like super detailed with your finances so that kind of makes sense for you. That's true. Good point. And status updates. You're always checking like every five seconds when your packages don't arrive so, you know, I'm noticing a trend here. That these are, this kind of sounds like the Nazmul pizza app. It does. It's funny you mentioned that because your features reflect very much who you are. Like, you are a foodie. You're extremely picky about what you eat. Yes. And so the seasonal recommendations make sense, and also the menu filtering is a good option for you because you don't like gluten. Yep. And the Google Wallet makes sense, because you are super-fan Android user. Yeah, these features are kind of classic me. So what are your favorite features, and do they reflect on who you are? Are they classic you? So, it's clear that we let our personal biases and opinions and preferences really affect this feature list for the perfect Android pizza application. Yeah, this is a really common problem, and this is a very bad thing. But, this even happens to experienced Android designers and developers. So, what happens is when you try and design a feature list with no user in mind, really bad things happen. So, we have the same goal, which is to create an awesome pizza application on Android. And now we've ended up with three feature lists, yours, mine, and yours. So what is the best set of features to end up in this perfect app? So this is a really common problem that you as a developer have probably faced over and over again. You have all these really great ideas, so which ones are going to go into your feature list? I can totally see a lot of people wanting to order the same thing every time. And I can also see a lot people wanting to order fresh new things. So what are our two main options here? What are our solutions? Well, there's two things we could do. One is, we could actually combine all the features. And end up with an application that has nine features. So, maybe accommodating everyone's perspectives into account and or, or another thing we could do is we could just pick one. Yeah. So basically pick either your or mine or your feature list and go with that. So these are really both bad options because if you were to combine one or more of these feature lists, you're going to kind of have an application that doesn't really please anyone. When you try to please everyone, you end up pleasing no one. Yeah, exactly. And if you were to just pick one application that maybe would represent you or your how do you know how many people out there actually have those same attributes? You could be missing out on a lot of different things. So how do we solve this if both of these are not that good of an option? Well, this is where user-centric design comes in. We design a product with a specific user in mind. So, one of the keys to user-centric design is overcoming our own biases. So what we've experienced here is preference bias, that our own preferences are really being put directly into a feature list, and we're not designing for user, we're just designing for ourselves. So next we're going to learn about another bias that we really need to be aware of. The other type of bias that we have to be careful about is called the, we call it the approach bias and this bias often shows itself in the beginning of a project or the way we approach something. Yeah, we see this all the time when we've run UXD workshops at IO, and a variety of other venues before, and almost 9 times out of 10 every developer when, when asked to build a pizza ordering application. Thinks about a photo realistic pizza ordering widget that uses some really nifty graphics API said they want to go and build right now. Gosh and I was the one getting hungry. But why do you think developers approach it this way? Well, developers love to code. And when asked to design a pizza ordering application, the first thing to think about is what graphics API, APIs are available on Android. And what other pinch to zoom and 3D, 4D realistic things they can implement right now. And they want to get to it right now. And honestly, as a developer even when I'm designing things, in the back of my head. Yep. I'm always thinking, how do I build this thing? How would you approach it? Well, as a designer, the way I would approach it is this. I would try to imagine a user who's sitting there using their phone and they're hungry for pizza. And they pull up an application, and they want to go from being hungry to being satisfied. And I think about, what is the flow I could create in an application that would let them go from being hungry to satisfied as quickly as possible, with as little friction as possible, and make them happy. So that's kind of the pure designer approach. But the way that we really want to go about this is not exactly the developer approach or the designer approach. We want to do something that kind of meets in the middle. So, as a development minded designer, I think what you would want to do is design something really great, empathize with your user, but keep constraints in mind and keep the question of whether you can really build this in mind. You know, exactly. And another thing is you and I are very familiar with software. And the way we think about interaction design patterns and libraries are not the same as a user. Exactly. When we're building things, we have a certain bias, because we're so familiar with these tool kits and platforms that we end up having assumptions about how somebody will actually use a particular widget or a control. And that's not exactly how a [INAUDIBLE] user might do it. Now that we've discussed approach bias, think about the most recent project that you've worked on. Think about what you did on day one or how you first approached this project. Did any of your approaches actually bias the final product? So regardless of what your answers were in this quiz, at the end of this lesson you're going to think about the user first. And make killer apps that your users are going to love. So we talked to Rich Fulcher, a design-minded developer on the Android team at Google. So he's going to tell us a little bit about personas and use cases, and basically blow our minds. [LAUGH] Hi, I'm Rich Fulcher. I started my career with a Master's degree in Computer Science and was programming computer graphics for quite a while. But then I switched over and I became a designer. And now I'm a designer and manager as part of the Android team here at Google. I think there's a huge temptation at the start of a project to just kind of get going and do the thing you want to do the most. You know, when you're a designer, you want to start drawing. When you're a developer you want to start building out those APIs, or start coding, or kind of get to that first screen. But you want to temper that, you can do that and it's okay to engage with that kind of passion you have for what you do, but you also want to make sure that you're, you're building in the right direction, the only way you can do that is to be aware of the users. So you need to start thinking, you know, who is this audience that I'm building this thing for? It can't just be me, it's gotta be much bigger than that. So, how can I understand them, how can I make sure that the things I'm excited about, these use cases that I'm thinking about, really line up with what their goals, and what the needs of the user are? So, one way that you can think about users is through the use of a persona. You know, just trying to build out your model of how this person other than yourself, you know, one of your users just more information about them and kind of what their goals and what their contexts of use are. When you have those personas the next step is to really think about well, how do they act with your product? And one way you capture that, them completing a task, is through a use case. You know, what are the steps they go through to complete a specific sub-goal? So you have your personas, and you have your use cases. How do they influence the way you treat development? Well, something I do is I try to refer to those personas by name whenever I can. Or I try to talk to the specific use cases. And if I'm talking just about myself and my opinions, I'll make a distinction by just repeating the word I. I'll say, well, I, I, I think this. To make a clear kind of gulf between what I personally think, and what I as a designer representing these personas, think should be true. So Rich mentioned personas and use cases as a way to understand our users attributes and their behaviors. Yeah, and remember we asked you to come up with a, three features for pizza application for entry. And we have a situation where you came up with a feature list, and. Yeah. And we each came up with a different one,. And we had gone over two options, which is to combine the features or just pick one of our feature sets. But those are actually both not the right thing to do. The way we really should have started was, to start with personas and use cases. Because we could have debated and talked about features all day. Everybody had really great ideas of features, but if we had started with personas and use cases, we would have come up with very different feature lists. A persona is a proxy for a group of actual users of a product, for whom the UX is going to be optimized. A use case is the scenario of how, when, and where a persona will use your product to accomplish a task. So now we're going to look at a persona that we can use for our pizza app, and we're going to call her Dorm Room Debbie. So this is going to be an, a good example so you can learn how to use personas in the apps that you design in the future. So let's look at Dorm Room Debbie's attributes. She's a college student. She doesn't have a lot of money. She lives in a dorm. And Debbie doesn't have a car. This looks like a really good persona. Because it seems to be representative of college students. Most of them don't have a lot of money, and probably don't have cars, and live in dorms, so. Yep. Exactly. It looks like a very accurate attribute for that type of user. And it's really important to mention that you shouldn't denature attributes. And what that means is try and put in an incompatible attribute, within Debbie's list. So, if we put something in there that really wouldn't make sense with the rest of them it makes the persona really imprecise and it doesn't make a good product. Let's take a look at three additional attributes and see which one doesn't fit with the rest. So all of these answers look pretty good, but the second one is the least compatible with Debbie's persona. If she cares about locally grown ingredients or organic ingredients, these will probably cost more, and we see here that Debbie doesn't have a lot of money. So she's probably going to be pretty price conscious. So this is kind of a hard one. But in real life, there's oftentimes pretty difficult choices to make. So I think B would be the most incompatible. I agree. Just like we want compatible attributes for a persona, we also want use cases that make sense with our persona. So let's go over two use cases for Dorm Room Debbie. So remember, a use case is the how, when and where, Debbie would use our pizza application to order pizza. So one example might be, she's going to order pizza at 4 am. Right. Another example would be, that she might order a big group order with her friends. So these two use cases are consistent with Dorm Room Debbie's persona. Can you come up with another use case that would make sense for Dorm Room Debbie? So it could be that Debbie, because she likes group ordering with friends, maybe she has a lot of parties. Yeah, she would probably want to place a big order in advance. So that might be a really good additional use case for Debbie. So now we understand our persona for our pizza app, Dorm Room Debbie. We know all about her attributes and we understand her use cases. So in a minute we're going to talk about how we can build feature lists that are perfect for Debbie. Yeah but before we do that though let's address the elephant in the room. We actually didn't have an elephant so we got this thing instead. The Abominable Snowman? Yeah. So where did these persona attributes and use cases come from? How to we validate that they're representative of actual users in the real world? Well, the way we do that is there's an entire field called UX research which does just that. There are folks that go out in the world and they use a variety of tools like interviewing people, observing their behavior. They have things hypnography and they figure what people do, what tasks want to perform with technology in their daily lives and what they expect from this technology. Exactly, so they give us all the data to help us build the really informed personas in news cases so we know that our designs are going to be really accurate. Yeah and we're going to see a video just now from Rich that talks about UX Research and why it's important and how it's done. So, user research is the umbrella name for a wide array of techniques you can use to just understand who your users are with the goal being to learn to design and develop better products. It can run from, in lab testing, where you have head-mounted tracking equipment and all kinds of sensors to going to field studies where you hop on airplanes and go to all the corners of the globe. To watching your logs, where you're getting data from millions of users. And kind of trying to understand what they're doing and how you can do it better. Or you can do it much more cheaply, much more quickly. And because every little bit that you do, to kind of better understand your users is going to be tremendously valuable to you. So you can do things like just talking to a handful of people. But taking printouts or drawings of what you think you're going to build and putting it in front of people and getting their responses to it. Like lots of little things can help you tease away little bits of information about who your users are and how you can better work for them. We all think we know ourselves pretty well, so naturally if you just kind of base on what you know about yourself and what you want, you'll build a product that hopefully satisfies at least you. But you also cover so many experiences, so many preconceptions, so many assumptions, about what this project should be, how it should work, built on everything you've gone through with other products before in your life. You don't share that with all of your users and you may not even share the same goals for this product with your users. If you want to build something that's really successful, you need to understand them, where they're coming from, where they're trying to go. And then you can build a product that completes that story for them. Even if time is short and you just have to make a decision right now and you can't take the time to go out and talk to other people, just by thinking about that persona, inventing it. Takes you out of your own head and starts you thinking about somebody else. So it's better to kind of build for that other, even if it's not based on hard data than to just bias towards your own needs. This was awhile back but I was working on a product for, kind of, bloggers who weren't bloggers yet. Kind of non-expert bloggers to create posts and start sharing things and I wasn't interested in blogging as a product at all. So it was very much that I had to kind of think about users who strongly weren't me. And I remember in particular there was this desire from users that surprised me that they just wanted to record audio for their blogs. They didn't even want to sit down and write it, they want to kind of compose these things, they want to be able to be out and to go and just. You speak into their phone and [SOUND] pop up comes the entry. It's a kind of thing that I would of never thought about if I had only referred like what I would of expected out of that product. I would of assumed, oh, I want to spend time crafting this and typing this thing. But its turned out to be one of the most satisfying parts of that product for users and something that was also a differentiator between other that and other products that were on the market. Now that we've talked about UX research and why it's important, let's get back to what we were talking about, which is how do you, we,how do we use personas and use cases to drive feature lists? Exactly so we're going to hear from an actual user and she's going to tell us a little bit about her attributes and she's going to tell you about her favorite application. So when you listen to her talk see if you can guess what her favorite feature will be. Hi, my name is Jenny Kim. I'm a project manager here at Udacity. And my job is basically to, basically to keep, a whole bunch of different people and processes and resources organized so that the courses are delivered on time. Including this course. So, I'm going to tell you a little about my phone. It's a new phone. I got it a couple weeks ago. It's a, it's a a Nexus 5. The screen is awesome. It's really pretty. It's really fun to touch and to use. The one thing is I haven't actually made it a phone yet because I don't have the little SIM card. I haven't had time to go get that done, so I just use it on wi-fi networks for the time being. So far my favorite app is Gmail. So my, my two favorite features in Gmail is first, I really like that it's so easy to see my conversations, and access you know, the last, the last messages that I have and who I'm talking to. I also like when you refresh your messages, this really fun little color bar up here is to show that it's updating, and, that's just cute. Things I wish it would do better is, I wish that it was more easy to reply all and forward. Right now it's kind of hidden behind a menu. And, I also would like to know what I can do with this app offline since I'm not always actually in this building connected to a Wi-Fi source. So, it was great to hear from a real user and to hear her describe her attributes, use cases, and see how that really played into the feature that she loved the most. Yeah and let's look at dorm room Debbie again. We have her attributes and use cases here. What features do you think she would like, in her perfect pizza ordering application? Do you think she would like to split the bill? Do you think she'd like delivery? Or pick-up? Would she be into coupons? Or would she want to know the name of the farmer that made the dough? [LAUGH]. Or would she want multiple payment options? Or perhaps hi-res photos of the ingredients? So check all that apply that would make the perfect feature list for Debbie. So let's look at these features to see what would be the perfect feature list for Debbie. Bill splitting. That would definitely be one of them, because Debbie is very money conscious, so she'd want to split the bill. delivery, definitely, because Debbie doesn't have a car. So definitely not pickup, because she doesn't have a car, so there's no way she could go pick up a pizza. Coupons definitely, because she is very value conscious. I don't think name of the farmer, or photos of ingredients would be very useful for her, that might be too extra, to much extra for her. And also multiple payment options would be consistent with the bill splitting, because different people might have different payment options. So I think this would be a really good feature list that would make Debbie feel like we made a pizza app that's just for her. So now we know how to start with personas and use cases to always keep our end user in mind. Yeah, it's really important to keep our persona and use cases in mind, as designers and developers when we're prioritizing feature lists, figuring what to build, how to build it and when to build it. Because if we don't do that we fall into the trap of creating applications either for no one or everyone, or just for ourselves, both of which are really bad options. I think we can really consider ourselves divine, dev, design-minded developers at this point. Yeah, exactly. So what's next in the process now that we've talked about personas in each cases and prioritizing feature lists? Well what we want to next is focus on next is low res wireframing. We talked a little bit about that in lesson one, and we're going to go into it more in lesson three. And lesson three is going to be all about the mobile user, because after all, we are building Android apps and we need to start thinking mobile first. Awesome. Welcome back. So, Nosmo, what happened to your neck? Oh, I hurt it. I actually have slightly limited range of motion and so I can only move this way, kind of like a robot. Oh, no. Kind of like an alive Android. Sounds like you have a constraint. I know, it, it is a constraint, but instead of fighting against it, I'm going to totally embrace it and work with it. Well actually this lesson is all about how to work within constraints and deliver great user experiences. So you're actually right at home. I know. That's awesome. Let's get started. So in lesson two we taught you some tools called personas in use cases that allow you to better prioritize your future lists and make really good applications. And you also learned a little bit about UX research. And in lesson one, we taught you about hi, low-res wire framing. Which helps you think about the big picture first, before you go into things like flows and details and UI elements. So, Nosmo, lets talk about what you're going to learn in lesson three. Okay. In this lesson you'll learn how to design for the Mobile user. And how this is different from designing for a web or a desktop user. You'll also learn about four mobile constraints that you'll need to keep in mind for any mobile apps that you'll build. Then you'll learn more about wire framing and picking up from where we left off in lesson one. We're going to go deeper into how to design a flow of screens to support each step inside your application. So we mentioned that a mobile user persona is different than a web or desktop user persona. So I think that a lot you might have started out in web or desktop, so maybe we should start there. Yeah, what are the attributes of this web or desktop persona? Well the first thing is that there always going to be plugged into power. Yeah. They generally have a constant internet connection that's usually fast. And generally they have a pretty big screen. And they have some sort of physical keyboard and a mouse or touch pen. And they're seated with their full attention usually on their laptop or their desktop. Yeah, and this is so different then a mobile user because unlike mobile for web and desktop applications. Let's say, you're writing a document or you're working on a presentation, chances are. You're fully immersed in the content that you're creating on your machine. And another difference, actually, between web, and desktop apps, and mobile apps. Is that when you close a desktop app, they tend to go away. Like you close a tab on your browser, but mobile apps tend to run in the background quite a bit. They're sensing your location, they've all kinds of sensors that are providing input. And applications are doing something within the background So we tell you that persona is really important in designing applications. So let's now talk about the mobile persona. Now, when you think about your applications persona, no matter how different they are. No matter what they are exactly they have to inherit from this superclass which is the mobile user persona. So that means that you need to take the attributes of the mobile user persona into account as well as the attributes of your apps persona. So Izabel, what are the attributes of this mobile user persona? Well, the first attribute would be that they have a finite data plan and finite amount of battery they also have divided attention. Yeah, exactly when I'm using my phone I'm always doing like five or six things at the same time. There's also something called handedness, which has to do with how the user holds the phone in their hands. And then, of course the mobile user has a very small screen. And also, because the user's moving around, they usually have very sketchy network access. Yeah. This is a really important one and we will dive into this much more deeply in lesson four. I think it's really interesting that with these mobile persona attributes that some of them are actually a result of the form factor of the phone, like having a small screen. Yeah. Yeah, others are actually a result of human form factors our hands only move in certain ways. Our brains actually work in certain ways which is why we have divided attention when were moving around doing six things at once. And also some of them have to do with what it means to be mobile like when your interacting within a physical environment. You have things like your network can be sketchy because if you go inside of a building or inside of an elevator and things like that. Yeah, exactly. So, I think that these attributes are so important and they're so concrete that they're- we think of them more as constraints and not just attributes, meaning you can't violate them at all or your users is going to have a really bad time. Yeah that's true and don't think that because we're using the word "constraint" that you're limited in some way. Innovation is spurred as a result of constraints. So it's our challenge to actually leverage these constraints and create really compelling experiences given that this users going to have finite data and battery divided attention and all those other limitations. And we should also, since we're in the subject of constraints let's not forget about the power that you have on mobile. You can create amazing real-time location based experiences that are simply not possible on web and desktop. So remember Dorm Room Debbie from lesson two? She was a college student, she didn't have much money, she lived in a dorm, and she didn't have a car. Yeah, if we were designing a mobile app for Dorm Room Debbie, what attributes would you need to keep in mind? Just these, or just these, or both, or none? So the answer is both. Because we're designing a mobile app for Dorm Room Debbie we keep her unique attributes as well as the mobile persona attributes in mind when we build a mobile app for her. So now that we know that we have four mobile constraints, that we can't violate when we're building and designing mobile applications our users are going to have a really bad time. Let's deep dive into these four. Yeah, we'll talk about what happens when you actually do get them wrong, and what the implications are to your user in your app. So let's get started with a quiz. So we have an application here on the screen. And as you can see a user is using this media player application to actually play a video. So you can see a couple of things, it's on a three g network. The power is about half, it's 3:20 pm I guess, the application is in landscape mode. And they've played about halfway through the video. We can also see that the app has defaulted to 1080p resolution to play this video. So there is a ux fail happening here. I want you to think about which one of these elements that I've highlighted are contributing to this fail, and select it on the screen. So what went wrong in this application? It was this right here, the 3G data connection. What ended up happening is this application is currently violating data and battery constrains of mobile. So what the application should have done is by default download the video at 480p or the lowest resolution, because the user's on 3G. Yeah, and what ends up happening is if you're trying to download this humongous video over this really slow network connection, it'll take forever to download the video, which will drain your cellular, because it's cellular radio. It's going to drain your battery. Two, it will take forever to download the video, so the playback is going to be really janky anyway. And so just avoid it. Just downgrade to a lower resolution or queue it for playback later. So we just covered the first constraint, which is find that data and battery life. Now as developers, it's, I mean it's, it's easy for us to know that these constraints are very important not to violate. Yeah. But once you actually talk to a user that's feeling the pain. From when these constraints have been violated, that really sheds a light on how truly important this is. We cannot overstate this fact. So we talked to an actual Android user about her experiences with her phone. Let's hear what she says. I'm Brenna. I am Udacity's Community Manager. So I work with our students to tell everyone about our classes, and support everyone and celebrate our successes. I have an Android. It's pretty [SOUND] janky. It's old, [SOUND] and it loses power almost immediately if you turn the Internet on. So, I'm offline most of the time. [INAUDIBLE] And so if I'm lost, I will turn on the internet and I will go on to Google Maps and if I really want to check my e-mail I'll turn it on by you know, it's a, it's a big decision. Probably my favorite app is 2048. We recently had a class called make your own 2048 and I along with pretty much everyone in the office got addicted to playing 2048. So I'll probably spend like hours and hours playing 2048 on my phone. [LAUGH] That was definitely worth losing battery. The last app I uninstalled was Twitter because when I turn the Internet on with my phone Twitter is a total energy hog and will not let any other app do anything until it's updated like all 80 million tweets that Udacity's gotten in the meantime, and so it literally kills my phone. So I had to take it off. I install it every now and then if I need to tweet from my phone, but in general, I can tweet from other devices. So let's talk about divided attention. You know, I'm going to tell you a little story about dorm room Debbie from lesson two. And we're going to talk about how we create a great experience to not violate the constraint of our users having a divided attention. So imagine we have dorm room Debbie, she's late for class. With a latte in one hand, her smart phone in the other hand, and carrying a lot of books. On her way to class she has to cross several busy streets, so her attention is very split between all these things. Then she gets a notification on her Android smart phone. It's from her library app, telling her she has a book overdue. So imagine you made this library app for Debbie. How would you notify her that her library books are overdue? So the correct answer is the third one. So you might have been tempted to chose the first one here, because it's the shortest. Because you're trying to respect the fact that Debbie is on the go, and she's busy, and doesn't have a lot of time to engage with your application. But actually she'll have to spend more time if you use a notification like this. She actually has to press the notification, and go into the app to see what book is overdue and for how long. It actually doesn't really tell her anything. So in the end this is actually a really bad choice. The second one might look tempting because it does give her some more information. But she still has to either launch a navigation app, if she doesn't know where the library is. She might be really far away. Or if she wants to extend the books, let's say that your application allows her to do that, she still has to go into the app. And that's not really respecting her limited time and her split attention in with the real world. So the best one, is the third option. Because in one glanceable notification, she can completely engage with your application, and not actually have to enter it. And she has these nice contextual actions where she can extend the book or navigate there with just one button press. That was awesome. I did notice one thing, Debbie is holding her phone with a single hand. yes, that brings us into our next mobile constraint, which is handedness. Mobile phones, are they really mobile? Let's conduct a quick experiment to determine that. [BLANK_AUDIO] I's not doing anything. It's not going anywhere. Really? Oh, correct. Well, it turns out mobile phones aren't mobile. What is mobile are people that use these phones. And the reason we love our smart phones so much is because it fits naturally in our mobile lifestyle and it fits naturally into our hands. Which brings us to our next mobile constraint called handedness. So let's jump right to a quiz. So you have four screens here. Each one has two actions that you can perform on it. Which one of these screens best serves the user using this application with a single hand? So the answer, is the third one. Now, we're going to talk about why. So, let's dig a little deeper into handedness. So, let's review the answers on the quiz. The one here that's correct, I really like this because the touch targets are nice and big and they're in a place that's really easy to touch if you're using a phone with one hand. This one here, on the right the touch targets are really tiny so they're going to really hard to press. Yeah, on phones you should try and have a 48dp minimum touch target and lots of padding. Yeah, when users are on the go, it's even harder for them to touch precise little areas like that. Yeah and these other two are not so good because if you look at the placement of these buttons, they're actually in an area of the screen which is not very easy to touch. Just if you don't believe me, just pull out your phone and try and touch those areas, it's not easy. So, that brings us to something called the ow zone. So here's some interesting statistics, fifty percent of smartphone usage occurs with a single hand. So this diagram is really important to keep in mind when you're building applications for people to use. These red areas are the ones that you should avoid they're called the ow zones. What you really want to reach for is this green area, which is the temp zone. If you put actions and buttons or any kind of interaction in that area. It'll make your application much easier to use with a single hand. So take out your smart phone and see if you can identify where the natural zones are and where the owl zones are for you. This varies depending on what phone you have and how big your hand is. Yeah, exactly. And one hand use is not the only way to hold your phone, there's also two handed use. That's kind of like when I'm sending an IM or a text to somebody, right? Yeah, exactly. And there's also what's called cradling, which is hold with one hand and point with the other. Yeah, I commonly do that when I'm like when browsing the web. Yeah, so handedness and other ogle constraints are all part of thinking about the user. And making your application fit in their lives in a way that they're comfortable performing tasks and using your applications to achieve those tasks. So, when you're building an application keep the user in mind and make sure to make the appropriate decisions, whether it's handedness or respecting other constraints to deliver a compelling experience. So the final mobile constraint is the small screen. This might seem like the obvious mobile constraint and it basically means that we can't fit as much on a really small smartphone screen, but there's two really awesome techniques that we can use that will help us optimize for our small UI. Yeah, they're called combination and reflow. And we're going to talk to an Android designer developer called Mick Butchard, he's on the Android team, about how to make this work in your applications. So Andriod is not a one-size-fits-all OS. It comes in many different sizes and shapes. From small phones to large tablets, TVs and beyond. The great news is that Android has been built from the ground up to embrace this variety and give you tools in order to deal with it. So, from the very beginnings, Android has allowed you to scale your user interface up and down between different devices. The problem is that scaling approaches will only get you so far. so, I'm going to take you through some of the common pitfalls we see with this relying on scaling approaches, and then I'm going to go through some alternative ways of dealing with this. So the first problem we see commonly is one of having excessive line lengths. So in this application, the text and images are running the full width of the device's screen. On a smaller, phone-size device, this might be fine. But as you get beyond a certain size this becomes uncomfortable. When you, especially when you're looking at line lengths of text, you want to be aiming for between 45 and 75 characters of text in order to maintain a comfortable reading experience. The user can easily scan across it. And in this application we can see that this is clearly exceeding that. The next problem we commonly see is one of unbalanced content. So, in this example, we can see there's a lot of content clustered up in the top left of the screen, and then leaving huge amounts of white space across the rest of the screen. This leads to a very kind of unbalanced feeling, which makes your application feel completely unoptimized for this device. And the last problem we commonly see is more of a missed opportunity almost, of not making the best use of the real estate available to you. So in this example we might have an application which shows many photos. As we can, see they're these tiny little thumbnails all grouped over to one side. It really is a shame not to make use of these beautiful big screens, when, all this extra real estate, when it is available to you. So you want to be avoiding this. So these are some of the common pitfalls we see in relying on scaling approaches, and the answer to dealing with these problems really is to adopt a responsive mobile design to respond to the device's characteristics. So here are three techniques you can use in order to do this. So the first technique is simply one of combination. This is if you have extra room, combining things from different screens onto a single screen in order to make up, to fill up the space. So in this example, we've got a typical master detail view which on a phone would be on two separate screens. So clicking through from a list item for example might show subsequent details. On a larger device with sufficient width, we might show both of these things at once. This will avoid the problem of having those excessive line lengths and make better use of the screen real estate. The second technique is one that we call macro reflow. So this is taking the major building blocks of your application and reflowing them or rearranging them on the screen in order to make better use of the space. So in this example, we simply move something like a large header image and body text instead of being vertically stacked above each other to be horizontally stacked next to each other. So also gives the image more space to kind of to show off on the, the larger amounts of screen real estate, as well as avoiding those excessive line lengths when it's in a landscape device. So this is not only useful for different sized devices, you can also use this kind of trick when changing on the same device between different orientations. And the last technique I want to go through is something we call micro reflow. So this technique really focuses on the individual blocks within your design and it delegates responsibility to those individual blocks to optimize themselves given a certain amount of space. So, a couple of examples of doing that. On the left here, we have a list type application which, given sufficient space, might lead to those excessive line lengths or very unbalanced views. So instead of that, each individual list item knows that, given a certain amount of space, how to draw itself. So once it gets over a certain size, a certain amount of width available to the device it'll change its representation. Instead of being a list item, it might change to say, a grid, grid representation. So this will allow you to have a, you know, fill the space better. The second example, is if you can't, if there's simply no way to introduce more content you can introduce a margin point instead. So in this form-type application on the right when we go for beyond the phone, past a certain size, when there just isn't anymore content we can show on screen, we simply introduce a margin point so it doesn't end up being excessively long or excessively unbalanced. So Nick just talked to us about some really awesome UI techniques for small screens. But the small screen affects a lot more than just the UI. It actually really affects the UX of your M. Yeah, simply taking a web or desktop app and shrinking it down so that it fits into a sm, small screen is probably not the way to go. Yeah, you really need to think mobile first and optimize your flow for the smartphone. So how do we do this? Wireframing. Wireframing. So, these are the four steps that will help us complete the task of Dorm Room Debbie going from being hungry, to being satisfied with pizza. It's important that we start with these high level steps, before we start thinking about any of the details. As part of the wire framing process, we need to remind ourself of our persona and their Use Cases. So her Use Cases are, she's up late, and she wants pizza right away. Or, it's been a long week, and she wants to try something new and fun. Now this is a mobile app so, regardless of who the user is, we cannot the violate the following mobile user constraints, such as limited data and battery life, handedness, divided attention, and so on. And the next step is our Feature List. The feature list is driven by Dorm-Room Debbie's attributes and her use cases. Let's not focus too much on how we're going to put these features in our application just yet. But let's just look at them in a list. Look below in the instructor notes and you'll find a link to this prezi. Open it up in the web browser and follow along for the rest of lesson. And now we're going to dig a little bit deeper into the flow of our app. So, we showed you the four high level steps, that we need to go through to complete the task of Debbie going from hungry, to being satisfied. Now let's jump into the flow for each of these steps. So, here's step one. This is the screen that a user sees when they first enter the application. And honestly, there's only one of three things they could do. They can build a brand new pizza, if they've never used the application before. Or they can re-order a previous pizza, if they've used this app before. And if they have a pizza that's already in order, they can check its order status. So in order to begin we will pick the first option, which is they're going to build a new pizza. Step two is where the user is going to configure their pizza, and make sure that it's exactly what they want by choosing the size, the crust, the toppings side orders and so on. Now, if they don't want to actually build the pizza, they can view the daily specials and pick one of those. And the third step is where they checkout and pay. If the user hasn't already signed in, they'll do so here. If they've already saved their payment and delivery information, they can easily just skip through those steps or they can enter it in. Then they place their order. So if you've used this application before, step three will be really fast. All you have to do is click, Place your Order. Once Debbie's placed her order, she'll see the order status. And if she has a question about her order, she can contact her driver. So let's say that Debbie has placed an order for a pizza already, that was a couple of days ago. She like the pizza. She likes the app. She came back in. And now she wants to re-order the same thing again. This is where she would select option two, which is re-order a previous pizza. This flow was actually really, really simple. She's probably signed in already. If she hasn't, then she will be asked to sign in. This might seem a little bit strange, but consider the possibility that Debbie has more than one phone, or more than Android device. She can have a tablet, multiple phones and so on. Anyway, so if she signed in, then she'll be able to see all the order history for previous orders. And then select one, and place an order for you. Now we're back to step three, which is check out pay. Because she's already signed in, all she'll have to press is Place order. And step four will be the same. I love Prezi. It's an awesome tool that let's me think high level, as well as drill down into the details of each one of the steps we showed you. And the next level of detail would be to go over to the actual UI elements, within each of those flows. But unfortunately, we're not going to cover that in this course. Yeah, and that's where mobile constraints come in, when we think about the implementation. So let's talk about the mobile user constraints. You want to think about handedness and decide whether or not your user experience is one-handed or two-handed, and keep that in mind even though we're not going to go into the UI elements right now. Yeah. Another thing you want to keep in mind is limited data and battery life and sketchy network. So when you think about the menu and the order history and all that information that has to be downloaded for this application to work, think about synching that intelligently so you're not draining battery, and so that it works in non-fly mode. So for divided attention and small screen, you have to make sure that the user interface is built in such a way that it doesn't overwhelm the user with too much information because again, they're, Debbie is out and about doing things. Also make intelligent use of notifications, and that's a great way to give Debbie information when she needs it, relevant to your application. For example, in the order status update and that way they don't have to open your application and spend any more effort than they absolutely need to to get what they need from your app. That's all we've got for Lesson Three. So Nasmal, what's in store for Lesson Four? I can't wait. So why Lesson Three has been all about constraints and things that are limiting, Lesson Four is going to be all about the power of Android. We're going to show you amazing things that will blow your user's minds when you use them to build amazing experience. Welcome back. We have good news and bad news. The bad news first is that this is the last lesson in the course. The good news though this is going to be the most awesome lesson in the course. So to recap what we've learned so far. In lesson one we talked about what is UX and the difference between UI and UX. In lesson two we talked the user centered design process and got into personas and use cases. In lesson three, we talked about the mobile user and talked about different mobile user constraints. Yeah and lesson four we are going to talk about not about constraints but about the capabilities that are unlocked by mobile and the amazing things that you can do on Android to blow your users minds and create amazing five star applications. So Nazmul, everybody wants to know. How do we get closer to making five star apps. That's a good question. First, we're going to understand the amazing capabilities that Android platform has to offer. Then, we're going to imagine how to use these capabilities to create some really kick ass features for your apps and through all this we're going to learn that context is what helps us deliver five star applications to our users. So, Nazmul what do you mean by context? So context is all about a user and what they're doing in a physical environment when they're interacting with your application. Now, before we get to the details of what context is made up of. You're probably a web and desktop developer, so let's talk about the difference between the Android platform and web and desktop. There's some fundamental similarities between web/desktop and mobile machines. I mean after all, they actually collect data from input sources they process that information and they produce output. So what are some of the inputs do you think that are similar between web/desk and Android? Well they both have keyboards and you can enter information that way. And they also both have pointing devices. And they both have a network connection. Yeah they're a lot of similarity of input sources but the power of Android truly lies in the input sources or sensors that are available in Android that are simply not available on web and desktop. Exactly. One simple example is GPS. So can you name all the other input sources that are available on Android that are not available on web and desktop? [BLANK_AUDIO] So Isabelle, what input sources did you come up with? Well the first one would be the light sensor. Got it. The accelerometer, the gyroscope the compass, and the fingerprint reader. That's a great list. Some Android devices have more sensors, some have fewer sensors. But the important thing to note is that, these sensors are not available, typically, on web and desktop. Exactly. Which is what makes Android such an amazing platform to create really amazing experiences on. And in the rest of the lesson, we're going to tell you how to use these sensors and create really awesome maps. So we're going to define what is context and tell you how to get it just right. But first, we're going to hear from a user that we visited back in lesson one and he's going to tell us how he feels when we get context wrong. An app I really like is ESPN Scorecenter but what, there's a feature about it that I really don't like. Well, I do like, but not at all times. It, it will send you updates of things that are happening in the sports world. I don't care about everything that's happening in the sports world. I don't want it to text me at 2 a.m and wake me up to tell me that you know somebody caught the world's biggest fish or whatever. That, that doesn't, I don't care about it. So it seems like Clark experienced a UX fail. I know, it's really sad, but it could have been avoided. Which one of these sensors would you use to make sure that Clark doesn't get woken up in the middle of the night with information he doesn't want? I think the light sensor would be the best answer. Cause then you would know that it's dark and your users asleep. But also the accelerometer and the gyroscope, would tell you that your user hasn't moved so their sleeping. Yeah, and you would think that this is an isolated problem, but it's not. In fact it's such a huge issue for users, that there exists entire category application. Agent being one of them. Which actually is a stand alone app, which silences your phone. So that other applications won't disturb you in the middle of the night, with information you don't really want. Apps like Trigger take into account these triggers like light and accelerometer. And they know that if you're sleeping or you're not moving, they'll silence your whole phone. But if you're building an application that provides sports updates. You should take advantage of these sensors within the application, and deliver the notification when you know the user's awake. So Nelsmah, let's talk about what context is. When we say context, we mean the context of the user, who's using your application on their Android smart phone. Yeah let's break it down into four things. The first aspect of context is, what is your user doing? Are they walking, running? Are they sleeping? Are they sitting? So the second part of context is, where is the user? This can be derived from GPS and you can get their latitude and longitude and there is information about the environmental conditions of where they're at that has an impact on this as well. So the third aspect of context is who or what is your user near? These are things like places that are near by. They're in a shopping mall, the stores they can visit. Or it's also people that they're nearby. So you can get this information from their circles and so on. The last and most obvious part of context is, who is your user? We can get this information if your user signed into Google+. We can get their name, their profile photo, when they were born, all kinds of things that they put in their profile. And we can also get who their friends are from their circles. So taking a lot of these aspects of user context into account. What application have you used that got one of these or multiple of these really right and it totally blew your mind? So my favorite context aware application is Netflix. So, I use the smartphone application to scroll through content and find what I want to watch. Then I Chromecast it to my TV. The application understands that context switch. So my smartphone application then becomes my remote control, as I'm focused on watching the content on my TV. It's really cool how it switches between a media player, and a remote control depending on Yeah. What you're doing with it. And my favorite context aware app is, Agent. We mentioned this earlier. It's a fantastic application that takes advantage of, really processing those signals that are generated by a whole bunch of sensors. And making sense of them, so that I don't get disturbed when I'm sleeping, when I'm in meetings and, and on and on. Not only that, but it uses location sensors and it even tells me where I might have parked my car. Which is really cool. Yeah. And the, and the, and the coolest thing is, I don't even have to interact with this application, for it to work for me. Which is another thing I love about it. So we've asked a lot of you in this course. We asked you to think about who the end user is and their use cases. We asked you to take into consideration the mobile user and their constraints and now we're asking you to build context aware applications. You might be thinking that sounds really difficult. I would really love to make an application that senses whether my user is asleep or awake, but how would I even go about doing that? Are there APIs for that? Well, yes there is, and those APIs are called Google Play services. They're an awesome set of APIs that you can use today to make your applications context aware by, for example, sensing of the users walking, sleeping, running, and so on. Remember that Chromecast example from Netflix? You can even cast two Chromecast using this API. So there's a whole host of things you can do that can make your applications really awesome on Android. So, let's bring it back to Dorm Room Debbie. Go to Google Play Services documentation and research it. Explore around a little bit. See if you can find a really awesome API, that you could use to plus 1, Dorm Room Debbie's Pizza application. Come up with a really great idea, and post it to the Forum. So we came up with our ideas of how we would plus one dorm room Debbie's pizza application, and we shared them on the forum. You can see our ideas by following the link in the instructor notes. Yeah, I can't wait to see, the ideas you've had and post to the forum. Yeah me too. So, we're nearing the end of the course, and we've had a great time building this content for you, and we hope that you've gotten a lot of value out of this. So, we've run tons of meetups and workshops about Dorm Room Debbie and building pizza applications. And, one thing that's always true is that the developers at these events come up with the most amazing ideas for features and applications that are context aware. Stuff that I can never even think of. Yeah, and we're trying to put all of this together into a Repository of Awesomeness. I mean, you know, we get a couple hundred, folks come through the workshops. Yep. . But, through this class, we have the potential to reach thousands of people. So, imagine all of you posting your amazing ideas that, we haven't thought about, that others have not thought about, in this one Repository of Awesome that can serve as a source of inspiration for you months from now after you've taken this class. So, let's get creative. Take the most amazing ideas you can think of, whether or not they can be implemented or not, and go to the forum and post them under the Repository of Awesomeness. The Android platform is incredibly powerful. It unlocks so many capabilities for you to exploit in using your applications to deliver amazing delight to your users. Now, with that incredible power comes great responsibility, and there's two things that you can't violate. These are two really, really important and prime directive light constraints. The first one is, you must be purposeful. What does that mean? Just because an API exists in Google Play services or because there's a thing that you can do, there's a sensor that exists, doesn't mean that you should use it just for that reason. Be purposeful means that, understand how you're going to delivery delight or some use to your user. Why does that feature or sensor need to be in your application? And if it doesn't, don't put it in there. Actually, be restrained in how you're creative. And the second one is, To be respectful. You need to be respectful of your user because your application might know a lot about your user and it's really important that you use that information to deliver delight to your user. A Contextware application can go from being amazing to being kind of creepy pretty fast. Thanks so much for taking our course. We really hope you learned a lot. So now, take everything you've learned and go design something amazing. And then, build something amazing. And make the Android proud by making your users happy.