jQuery is an extremely popular JavaScript library meant to make a number of common JavaScript tasks simpler, via a consistent API across all browsers. In other words, jQuery makes your life easier. As of 2014, almost 62% of the top 100,000 websites all use jQuery, which is pretty incredible. Performing AJAX requests that work properly in every browser is, well it's a big pain in the butt. Luckily we can use jQuery's AJAX methods and leave some of the drudgery of supporting old browsers to jQuery. It's important to know that it's extremely common for developers to use libraries to write AJAX calls. There's no problem with using libraries to simplify the code you have to write, especially with something like AJAX. In order to use jQuery we need to use jQuery objects, and to do that we'll be using syntax like you see here within script.js. We're creating a few variables over here each of which has a dollar sign in front of em. Now this dollar sign doesn't mean anything, it's just a character that we're going to to use to identify the fact that this object is a jQuery object. To select an object with jQuery, we'll start off with this dollar sign. Which is a pointer to a jQuery object. And then, within the parentheses, we'll pass in a string of the element that we want, where this pound sign represents an ID. So in this case, if we want the Wikipedia element we simply use the dollar sign to represent the jQuery object and then pass in a string starting with this pound sign or hashtag or whatever you want to call it, representing the ID of wikipedia-links. Now wiki element represents a jQuery object of the Wikipedia links element on the page. We'll be using two different methods for AJAX requests, the .ajax method and the .getJSON method. Both methods take in a URL and then some optional parameters. Check out the links in the instructor notes for more details on jQuery's different AJAX methods. For our first asynchronous request, let's get the Google Maps Street View of the location. Remember, we want the background of our app to be an image of the location where we're thinking about moving. So, in this case, we've got the White House in the background. Now, what you're about to perform isn't technically an Ajax request because here we're requesting an image asset instead of asking for data like a JSON object. But, it's important and fun to use services like Street View because they make the background more entertaining. It's actually pretty nice that we're starting with Street View because we won't even need to use jQuery to get it to work correctly. Our page will be requesting an image from Google and, based on the various parts of the URL. Google will know what image to serve us. Essentially, every Street View image has it's own URL endpoint. And, the URL can contain a string of the street address at that location. We can see here that the location is set to 1600 Pennsylvania Avenue, Washington D.C.. And, it's pretty obvious that the image we've got is the White House. Notice how there is a comma between the street address and the city. Inside script.js, we can see this function setup called, loadData. If we scroll down all the way to the bottom of the page, we can see this jQuery selector for the form entry at the top of the page, which when somebody hits submit, will run the loadData function. For this quiz, I want you to us jQuery to collect the street address and city that users type in here. Use the address in the city to fill in the end of the URL string here, that is being used to collect the image. Now, pin the resulting image to the page inside an image tag, with the class bg image, and set the source to the string, similar to the one you see here. Where the street address and city were collected from the form up at the top. When you're done, you should be able to type in an address and city and see a cool street-view image show up in the background. Inside the documentation for the Street View API, we can figure out the way these images work. We see that the street-view image comes from a url with this beginning. We see maps.googleapis, dot yada, yada, yada. And then, at the end of it we've got some parameters. The parameters must have a location, or it must be an id to a specific panorama. But, you can also set the size of your image. In this example, they set the size to 600 by 300 pixels and set the location to a latitude and longitude for the location of this image. In our example, we're not using latitude and longitude. We're just using street address and city. So to start off, I decided to grab the values of the street and city. And to do so I opened up Dev tools and saw that street has an ID of street, and the city input has an ID of city. Back inside the script I created a new variable called streetStr, and I set it equal the value of the text inside the element with the ID of street. I did the same thing for city. And then I created a full address with a comma in between by concatenating them together. I, of course, made our fun little heading that says, so you want to live at the White House, or 1600 Pennsylvania Avenue, Washington DC. And then I created a URL. This streetViewUrl is simply a string that starts off with what we saw before in the API. I decided to hard code the size as 600 by 400 pixels. And then we set the location to the address that we just created up here. Then it's a simple matter of appending the right image to the page with the right class and the right URL. To test our code, let's use a different address. I've entered in the address to AT&T Park in San Francisco, and let's hit Submit. Okay. This looks good but let's double check. I'll go ahead and get rid of New York Times and Wikipedia real quick. And check it out, we've got AT&T Park in the background. Now that we've got the background image of our new location let's go ahead and get some more information about the new city. For that let's start by pulling up some New York Times articles about it. The New York Times provides an article search API that pulls articles from 1851 to today. This request will be a bit more complicated than simply creating a URL string for an image tag. To start, we'll need an API key. Many APIs want you to use a special name called an API key to identify yourself when you access their data. There are a lot of reasons for this. For instance, they might want to limit the rate of your request so they don't get overwhelmed. As long as you aren't issuing thousands of GET requests per day to this app, you probably won't need to worry about a rate limit. But all of your requests still need to have your key attached to them. The New York Times uses their own API key, so you'll need to sign up for a free account in order to complete the project. Another thing you'll sometimes run into is authentication. Services like Facebook and Twitter use OAuth to authenticate users. They only people with accounts to be able to get data since that data is often not publicly accessible. You won't have to worry about authentication for this course, but if you want to build more involved applications with services like Facebook that's something you'll have to figure out. Luckily, most services that require authentication also provide getting started guides with example code and detailed explanations. For now, head over to the link in the instructor notes for requesting a New York Times API key and follow the instructions here. After you got your key, check this box right here to let us know you're ready to keep going. At this point, you should have your API key for the New York Times. You're ready to start grabbing some headlines and the opening paragraphs to articles. Your code is going to be going inside the same loadData function as before. You'll use using the jQuery $.getJSON method to make this AJAX request. It's your job to write the code that makes the AJAX request. Once the data has been returned from the AJAX request, you'll need to parse it, and then figure out how to present it on the page. The link in the instructor notes will take you to the getJSON documentation on the jQuery website. I recommend checking out this first example to get an idea for what your code should do. Let's open up Dev tools and inspect this page so you can get an idea of what your HTML should look like. Opening up the first article, we see that it contains an a tag to a link for the article, and it also contains a p tag with the text of the first paragraph inside. In the example, we're passing in a URL string of ajax/test.json. This could be any URL. And, we also pass in an anonymous function. This anonymous function, pass to getJSON, will be run when the response returns from the server. Each article is in a list tag and they all fall within an unsigned list with the ID of nytimes-articles. I recommend starting off by console.logging the data that gets returned from this JSON request. You'll need to break it apart before you can start building articles. So, can you make an AJAX request to the NY Times API and get some articles about the city? You'll need to fire off the AJAX request, iterate through the response and then present articles on the page inside the ul with an id of nytimes-articles. Check this box when you're done. I started by creating this URL for the New York Times. Inside the URL I append the city string that we created earlier, and I also make sure that I've got my API key at the end of it, which is obviously not xxxxxxxxxx. Probably a couple of more x's. Anyways. Moving on so we pass into $.getJSON, the URL that we just created here, and then an anonymous function. This anonymous function will get run as soon as we get the response back from the New York Times. I start off by setting the text of the header element to New York Times Articles About. Insert city here. And then I iterate through this data object, which is the actual response. Let's take a look at that. Inside the network tab in DevTools, I've gone ahead and looked at all of the requests sent out. And we see article search, so let's click on that. Looking at the preview tab, we can get a good idea of what our object looks like. Let's open up response, which is the highest level property within the JSON that's returned. We see that it contains docs and meta. And docs looks like an array. Let's open that up. And check this out. We have each of the articles that got returned. Let's open up the first. The first one has the URL under the property web URL, and we've got the headline right here. The headline has a property of main, and then we can see a string of the headline of this article. So inside our code we're going to go ahead and create this article's object which is from the data response and then that high level response property and the docs inside of it. Scrolling down. We also find this snippet, which is a string of a snippet or the first part of the article. Within each article, we're looking for a web URL to use for the a tag. And we're also looking for a snippet to put inside the p tag. This is a pretty simple for loop. We'll just go through all of the articles that get returned and then append each one in turn. And now we've got all the articles showing up on the page, that's pretty cool. Let me show you one more trick. So if you're curious what will come from this URL before you run through this whole thing, you can actually just go ahead and paste this into your browser to see the result. I've gone ahead and pasted in up here and I'll press Enter and we get this massive string back. But look! This massive string is just a JSON. It's the exact same JSON we were looking at. This is a quick and easy way of seeing what will return from your AJAX request without actually putting one into your app. Unfortunately, sometimes requests fail. [NOISE] There are many reasons this could happen. And it's important that your app take into account errors so that it doesn't completely break if an AJAX request doesn't work. jQuery gives us the .error method, which we can change to the AJAX request we made earlier. This .error method goes into effect if the AJAX request fails for whatever reason. For this quiz, set up error handling for the New York Times request. Your app should display New York Times articles could not be loaded, if the request fails. To test error handling, there are a few different ways you can do it. For one, you could simply load the website and then disconnect your internet. That will definitely fail. Or you could always purposely mess up the URL. In which case it's definitely going fail because nyasdftimes.com is definitely not the website we're looking for. If all goes well, or rather should I say if all goes wrong, you should see this message appear on the page. Check the link in the instructor notes for more on the .error method. Try chaining the jQuery.error method to the end of your AJAX request and that should take care of any failing request. Check here when you're done. So, I've gone ahead and added the .error method to the end of the getJSON method. Chaining in this case refers to just simply attaching another method to the end of one method. So, we'll run .error if something goes wrong with anything that happens here. In which case, .error runs an anonymous function that takes in e, the error itself. But in this case we don't do anything with e. We simply change the text of the New York Times header element to New York Times Articles Could Not Be Loaded. And let's go ahead and see if this worked. To test this, I went ahead and messed up the URL, so let's go ahead and hit Submit. And, we can see that despite the fact that we got Rockefeller Center in the background, the New York Times articles could not be loaded. This is a good way to make sure that even if the page doesn't work the way you think it should, it doesn't completely ruin your user's experiences. We've got two out of our three asynchronous requests working. Let's get some Wikipedia articles about the page to show up. We're on the MediaWiki API page, because Wikipedia is run by MediaWiki, and looking through this page, you'll actually find you don't need an API key. However, making normal JSON requests to Wikipedia would result in a cross origin or a cross-site error, because Wikipedia servers forbid cross origin requests. There are several ways we can make this request to Wikipedia. One would be to set the origin and content type headers on the request and then Wikipedia would allow it. Or, we can just use JSONP. In our example, we'll be using JSONP. A JSONP request is a somewhat convoluted trick that involves a server wrapping the response inside a function to get injected when it actually gets back to the client. But luckily, if this sounds confusing, don't worry. jQuery actually makes it pretty easy. To make a JSONP request, we'll use the more robust .ajax method. In fact, the .get JSON method we were using before was actually just an abstraction of the .ajax method. Which is, incidentally, also an abstraction of an asynchronous JavaScript request. For this quiz, use the .ajax method to collect data from a Wikipedia endpoint. Let's take a look at the structure of the finished page. We start off with a Wikipedia container that has all the links and then inside of it we have this on sign list with an ID of Wikipedia links. Going through the on sign list, we see just a couple list elements, and then within each list element, we simply have an a tag with a link to Wikipedia. Each A-tag of course contains the title of the Wikipedia article within it. And like, you did before, for this quiz you'll need to properly append the Wikipedia article to the page. You'll need to include a few parameters within your Ajax request. There will of course be a URL. You'll need to include a dataType. Notice, too, in the signature we don't have an optional success function parameter. Instead, you'll have to set it as a property. Make sure your success parameter is set to a function that you want to run when the request is returned successfully. To start off, you'll fire off a JSON-P request using $.ajax, and then into $.ajax. You'll pass a settings object that will include a parameter for data type and a parameter for success. Once you get the response, iterate through it, and then present articles on the page. And, they should end up inside the unsigned list with the id of wikipedia-links. When you're done, check this box. Let's go ahead and start with the endpoint. It's simply a Wikipedia URL with a search string put inside. So far so good. Then we come to the AJAX request object. We start off by creating a URL parameter and setting it equal to the wikiUrl that we just created. If we didn't want to pass the URL in as a parameter of this object, it could actually just be a string by itself that comes before this settings object inside this method call. In other words, we could've passed the URL in here as a string before the settings object instead of making it a parameter of the settings object, but either way works. Then we set the data type to jsonp, indicating that this a JSONP request, and then we have a success function. I've got a line commented out here for JSONP as a parameter, setting JSONP to callback. Some APIs want to use a different name for the callback function. By default, using JSONP as a data type will set the callback function name to callback. So this line here's actually redundant. But if we needed to change it in other words if we needed to change this callback right here. In that case we would use a different string here on the JSONP property. Check the instructor notes for more on JSONP. Inside the success parameter we've got this anonymous function which is run when we get the response. Let's take a look at this response in the browser. Inside the network tab we can see this request for Wikipedia, let's click on it, and it looks like we've got a JavaScript object. Like we said before, this JavaScript object is going to be wrapped within a function. So, we can see this long string here as the function. It looks like we've got a few sections, including main which has some information. Inside we finally come to this parameter 1 which has an array of different articles about San Fransisco. Now you'll notice here how there are spaces between the words in the response, but that's okay. We can actually just use this inside our URLs. You'll notice that if right-click on one of these and click copy link address and then paste it into my browser, we see that the spaces are replaced with %20. When we press Enter, we see that Wikipedia's smart enough to redirect us to San Francisco's URL. So we create this article list variable that we set equal to the array of articles, remember that parameter one from the object that got returned from Wikipedia, which is the response. And then we simply iterate through it. Each article gets appended to the page inside a list element using an a tag, and we simply set the URL to the URL that we create here, and it's article string, which is the name of the article which we saw in the response. And with that we've got a pretty awesome page. You may be asking yourself, or at least, I hope you're asking yourself, hey, but what about error handling? I didn't see a .error method on the end of that call. And you're right. Because unfortunately, error handling isn't actually built into JSONP. This is a technical limitation because of what's happening behind the scenes. But there are workarounds, like what we're doing here. We can use setTimeout to stop the request if it runs for too long. Before we run this AJAX request, we'll create this setTimeout function. When we bind wikiRequestTimeout to this setTimeout function, we automatically start a timer that will end 8000 milliseconds later, which is eight seconds. When eight seconds are up, we'll go ahead and change the text of the wiki element on the page to failed to get Wikipedia resources. This is a nice fall back. This says that if after eight seconds have gone by, change the text on the page to this. But of course there's a problem. If this is all we did we would no matter what overwrite the text inside the Wikipedia element with failed to get Wikipedia resources after eight seconds. In other words, even if this AJAX request came back successful, this timeout would still occur. These eight seconds would still pass by, and the text of the wiki element would change to failed to get Wikipedia resources. So, we have to add this line here, called clearTimeout, and then pass it the variable of the timeout we created up here, which is wikiRequestTimeout. This clear timeout will clear or stop this timeout from happening. So inside our success method we go ahead and pinned all the articles to the page and then say hey, stop that timeout. We don't need that timeout anymore. And then, it's all good. There are a few different ways we can handle errors with JSONP requests, but I thought this is a pretty easy way of doing it. You know sometimes things just don't work right. A request might fail for a number of reasons. Maybe this server is down, maybe the networking is having issues. Or maybe your request was just simply written poorly. You know what? Let's think about that last case an incorrectly written AJAX request. Head into your script.js file and mess up the Wikipedia string here. I'll do it by simply typing ASDF over and over until we don't have a website anymore. Load up your website and search for you know, an address. But keep this messed up Wikipedia string here. Then open up devtools and start poking around. So for this quiz go ahead and ruin the URL string for the Wikipedia endpoint. Open up devtools and figure out what related error messages you're seeing. Specifically, I want to know what is showing up in all caps. Type your answer in here. Opening up DevTools we very quickly find this error for fail to load resource. Error name not resolved, yeah, that's how you're supposed to say it. Clearly this is not a real URL so we see the name not resolved error. Inside the Network tab we see that this GET request is in red, indicating that it failed. Well the other one here for New York times showed up with a code of 200 indicating that it's a-okay. If something doesn't look right on your page, going to dev tools and opening up the network tab is a great place to get started. We can also see that error handling worked because we failed to get Wikipedia resources. This is once again a nice way of letting the users know that, hey, something didn't quite go right without breaking the entire page. As we touched on earlier in this class, rendering pages quickly is super important. Let's think about this for a moment. Because if you can request data asynchronously you open up a new range of ways for making fast page loads. Let's think about this Facebook for food app over here. Where I've got my favorite cereal, favorite pasta, favorite meal, and how I like my eggs. It's displaying custom content based on me being the user. Take a look at some possible steps for rendering this app. In what order could we run these steps to get the first pixels on the screen over here as fast as possible? Just to be clear, generic refers to HTML that would be the same for all users. That would be the HTML for let's say favorite cereal, favorite pasta, it can also even be CSS for, you know, how to style this image and how to style all this text. Unique HTML refers to things like the strings for my name, the strings for all my favorite foods. Because this is unique to me specifically. So, first things first to get the page we need the generic HTML, so let's start with that. That'll give us a nice shell of the page. Then, as we're getting that generic HTML, we can fire off requests for unique HTML. We can start to load the page with that generic HTML. And then finally finish it up with some unique HTML. The point being here that you can actually separate this generic from unique HTML and you can start rendering the page. You know, rendering favorite cereal, favorite pasta. Maybe putting up some space for an image. Even before you start getting the unique HTML for things that are specific to me. This is a really useful technique for quickly rendering a page when custom content is involved. There's almost always going to be some type of generic HTML that the browser's going to need. So, if we return it as fast as possible and render it as fast as possible, it'll make our app feel really, really fast. We can always fire off the request for unique HTML down the road and then just fill in that data once it arrives. You'll notice with your Facebook news feed when it first loads you'll see some empty stories. That's Facebook following the technique you see right here. And the same thing is true for Google searches. When you search for something, you'll see the header come back before the search results start filling in, because this is a really great trick for getting content on the screen as fast as possible. Great job. I hope you realized just how awesome the skills you've unlocked are. Reflect for a moment about what you just learned here. I recommend heading out to the web and trying to find examples of your favorite websites using AJAX requests. And now take it easy, [FOREIGN], and I cannot wait to see what you make using AJAX requests. Hi, I'm Cameron Pitman, and welcome to the class on AJAX requests. Let's imagine that you want to visit a website. When you type in the name of the website into your browser and press Enter, what do you expect to happen? The exact answer, of course, depends on the website. But it's safe to say that you expect to see, well, something, some website, to show up very quickly. And have you noticed how the next page button has mostly disappeared from the Internet? Modern websites can load content without reloading. Developers have solved the challenge of loading information quickly and after the first page render in many ways. And one flexible and popular implementation relies on AJAX requests, which allow for data to be received asynchronously. Data that loads asynchronously can be requested late in the load process and the website should load acceptably with or without it. As part of this class, you'll be building a move planner app. You know what? Let's take a look at it. The move planner app that you'll be building will require three different asynchronous requests. It will require data from Google street-view, The New York Times, and Wikipedia. When the user types in an address, the street-view of their new potential home will become the background, and they'll see related New York Times and Wikipedia articles below. But, before we start building, we really need to break down the components of asynchronous requests. Let's start with what a request is. It's actually pretty useful to imagine the internet as a bunch of people who are just simply sending messages back and forth. For this example, I'll be the client, which means that I'm actually a browser like Chrome or Firefox. Jessica represents the internet. She is the middleman and will be passing information back and forth. And Ben here is the server, which means that he's computer dedicated to providing content to browsers like me. If I want something from Ben, I'll send a get request to him. A get request is a message that tells him who I am and what I want. So, got my message, Jessica takes it and passes it to Ben. Ben, the server, looks at my message and then sends back what I requested. This is called a response. I can open the response and then do something with it. In order for a website to open, it performs many requests for data, like Ben and I are doing right now. Most of the time, the response is critical for the page to load. For instance, I must have Ben's HTML to load the page and the CSS to lay it out. Thank you very much. When your browser makes a request synchronously, or without AJAX, it has to wait for responses before proceeding with the load. AJAX is special because it allows these types of requests asynchronously, which means that they can happen in the background without blocking the rest of the page load. Let's take this analogy just a little bit further. Let's imagine I send off a get request to Ben, but I've got some plans in mind for what I want to do with it when the response gets back. So, when I send off the request, I will take the instructions and set them aside for myself. And they'll patiently wait right here. And now, I'm free to go off and work on other tasks. When Ben's response eventually gets back, I'll open up the response, take a look at my instructions, and then do something with them. These instructions that I set aside are called a callback, in that I call them when I get a response back. Ajax stands for asynchronous JavaScript and XML request, we can ignore the XML part of the acronym. For now, let's just think of it as an asynchronous JavaScript request. Ajax requests allow for content retrieval and display without reloading the webpage. Asynchronous in Ajax, refers to the fact that the request doesn't block other events from happening. Instead, the page keeps on doing its thing, and then only acts on the data when it gets returned by the server. AJAX requests occur in a number of different ways and with varying levels of difficulty. Some require an API key, others use O-off, and some don't use any authentication at all. And, the data returned by a different AJAX request differs too. X in AJAX stands for XML which used to be the dominant hierarchical data format. But today, JSON is much more popular, in fact most AJAX requests nowadays are actually a JEDGE request standing for. Asynchronous JavaScript and Json request, but it doesn't sound as nice so we still just call them Ajax. Embedded within Ajax responses, it's pretty common to see HTML, which websites can use to fill in part part of page. As part of the project for this course, you'll have to try three different asynchronous request techniques. You'll have to work with the Google Street View, Wikipedia, and New York Times APIs, all three of which work very differently. So, I'm on the Udacity Facebook page. It's got some interesting stories, looking down there's Sebastian, there's Jessica. Oh, there's me. But what happens when I scroll down even further? We can see that I've got some room to go, and I can keep scrolling down, scrolling down, scrolling down. And, we can tell that this page isn't infinitely long. But, what happens if I go all the way down to the bottom? All of a sudden, look, the scroll bar jumps up, and there's stories where there weren't any before. Let's do it again. Oh, and there we go. We see that stories keep appearing even though this page isn't reloading. Facebook accomplishes this through the use of Ajax requests. Let's go ahead and open up dev tools to see what's going on behind the scenes. We're going to open up the Network tab in DevTools to start off. The Network tab gives us a list of all the requests and responses fired off by the browser in loading and rendering a Web page. If we're recording as the Web page loads, we'll see all sorts of resources that the website needs. We see images, we see JavaScript files, and we even see some CSS. In a moment, I'm going to stop and then start recording to get a fresh slate. When we scroll down as far as we can, we'll hit a quick pause and then all the sudden, new content will appear. In Network, we're going to see that request show up. Let's go ahead and try it. I will stop and start recording And scroll down. There we go. We could see it right there. All right, let's see what we have in here. We can see a request happen right here. Let's click on it. This request is called PagePostSectionPagelet. And look, it's even got the word ajax inside the u, request URL. At this point, I'm going to switch to some written instructions so you can follow along with me. I recommend opening up two browser windows side by side. That way, you can follow along in Facebook in one window while you've got the instructions from Udacity in the other. For this quiz, I want you to analyze a Twitter AJAX request. Start off by loading up any Twitter feed. Open up the Network tab in DevTools and then scroll down so more stories load. You should see an AJAX request get sent out inside the Network tab. Open it up and then see if you can find the name of the property that contains all of the HTML for new tweets. Type your answer in here. Okay, so here we are on my own Twitter page. Let's go ahead and see if we can find the Ajax request here. I'll open up Dev tools. And I've got the Network tab open. Let me scroll down really quickly. And there we go, okay. So we can see some request happen as I scroll down. One of those requests is called timeline, and that sounds pretty relevant, so let's click on it. Okay, it looks like this includes something along the line of finding tweets, because I keep seeing tweet here. All right, that looks relevant. Let's look at the response. ha, this looks like HTML to me. It looks like it's all coming within the property items_html. So, it looks like the property name is items_html For this quiz, I want you to figure out which components are required for AJAX requests. But to answer this question, I want you to do some research on your own. When it comes to learning a new language or a new library, the documentation is really your best friend. So for this exercise, I want you to take a look at the documentation linked in the instructor notes, and then check off the minimum amount of information that's required to make an AJAX request. Let's take a look at this method signature. We can see that ajax takes in URL and settings. And, settings come within these square brackets. In general, square brackets within documentation means that something is optional. So, if we look at settings, we see that, in fact, all settings are optional. So, in all reality all you really need is a URL for an AJAX request. AJAX has another signature where your just passing in settings, and settings are optional. This leads to an interesting situation, let's talk about this for a second. The correct answer to this questions going to be URL, but we can see that with this function signature we don't even need settings, settings are in fact optional. And, there is no url. so, you actually can call an ajax request without passing in anything to it. But, that would be kind of pointless, because while it would succeed, it wouldn't go anywhere. So, you're not really doing much of a request. In terms of real world requests, most post requests will probably have a url and some data with them. Because in a post request, you're usually sending off data. And, GET request, in the real world, generally have a url along with some type of call back function and some optional data passed along with the GET request. But, the only thing that's really necessary to send off a functional AJAX request is a url string So, we just looked at two examples of Web sites who use their own internal APIs to resolve new data for their users. This is really cool, but unless you're already working for a giant web app, you probably don't have a massive internal database of cool information you can query asynchronously. But luckily, there are tons of APIs available on the Web that readily serve up interesting information. And they're usually free to use so long as you aren't making thousands of requests per hour. For instance, Google offers a ton of APIs, including Google Analytics, Google Maps, Google Fonts. Looking around the Web, it isn't hard to find examples of Web sites that use external APIs to create interesting interactions for users. Reddit and the Reddit Enhancement Suite Chrome plugin interact with a few different APIs to make Reddit feel more dynamic. When a user clicks on a link that resolves to a YouTube video, Reddit opens up an embedded YouTube player which interacts with the YouTube API. Or when a user opens up a link to a Twitter feed, the Reddit Enhancement Suite Chrome plugin fires off an AJAX request for Twitter data, and uses the Twitter API to open up the tweet right here inside the page. Check out the link in the instructor notes if you want to find some more APIs that are available. You just saw how Reddit uses external APIs to present some really cool and dynamic content from other websites inside their page. For this quiz, I want you to head over to Yelp.com. See if you can find out which big name API Yelp is using to give users some really useful information about businesses. Are they using Google Maps, YouTube, Twitter, or Flickr? The correct answer is the Google Maps API. I've clicked on a random restaurant in Amsterdam, and we can see right here we've got a great map. Maps are super helpful and it definitely make sense to have one. But why build one when you can just go ahead and use the Google Maps API? So far, we've examined the basic structure of AJAX request alongside some basic use cases. We've used def tools to identify that Facebook and Twitter use AJAX request to load content on the fly. We've seen how Reddit and the Reddit enhancement sweep use AJAX request to load data inline as users request information. And, we've briefly taken a step back to examine how even big websites like Yelp! Take advantage of external API's to add functionality to their website. In the next part of the lesson, you'll be diving into building the moving planner app which is going to integrate Google Street View in the background. The New York Times API to give us these articles, and the Wikipedia API to give us these articles. For this quiz, I want you to spend a moment to brainstorm what kind of APIs you could use to mix and match in interesting ways. Take a look through the massive list of APIs in the instructor notes, and take a moment to think about some kind of cool, novel way you could integrate different APIs together in a single web app. Once you finish your brainstorm, type what APIs you want to try out in this box. So I've just gone ahead and put down Google Street View, Wikipedia, and NY Times because those are the APIs I wanted to use with this project. But this is really awesome. This is the kind of brainstorm that leads to new businesses and pushes the web forward as a whole. Seriously. Doing something new or combining old pieces of information in new ways is how the internet and technology gets pushed further along. So good job for doing this brainstorm. Let's get started with the project. Inside the GitHub repo linked in the instructor notes, you'll find some simple HTML for a website that looks something like this. You can see a form at the top where a user will type in their street address and city for where they want to move. And then below, the information they're looking for will show up. Inside the repository you'll find Index.HTML which is the code for the page we were just looking at. And you'll find script.js. Which is where you'll be writing out your Ajax requests. And there's also this j query file. Inside the libs directory. Let's talk a little bit about j query.