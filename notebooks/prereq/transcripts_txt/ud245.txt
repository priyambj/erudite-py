Hi, I'm Richard, a course developer at Udacity. After reviewing some of the feedback for this course, Cameron asked me to help him add an additional lesson on jQuery events. So here we are. Events give you the power to set up automatic responses based on what your users do when they're on your page. In this short lesson, we'll be taking a look at how browser events can help develop interactive websites. You'll be doing this by listening for and reacting to events. Now you can do this with no libraries at all, but for simplicity we'll be using jQuery in this course. Ready to get started? Events in real life take the form of specific actions occurring at specific times. For instance, in the game of basketball, when the ball goes through the hoop. The shooting team gets points. The event is the ball going through the hoop. The resulting action is that the scoring team gets points. The browser has events as well. Every time you move your mouse, click on a link, submit a form, or do anything really, your browser makes an announcement of the action you just took. I want to show you what the browser is actually doing. Google Chrome provides a handy function. The monitorEvents function, that will allow you to take a peek under the hood to see events as they are taking place. You pass to the function the element on the page that you want it to watch for events. Now this function can only be used in the console on the Chrome Dev Tools. Don't try to use this function in your JavaScript file. It won't work, and will cause a reference error. With that disclaimer out of the way, let me show you the feedback it provides. So, on this page, you can see, I have a simple text field. First I'll use jQuery to select all the inputs on the page, then I'll select just this first one here. Next I'm going to call the monitorEvents function and pass it the variable holding the first input field. The monitorEvents function watches the element for events, and log them all out. So, I'll interact with the text field and watch Chrome log out all the events. As you can see using the monitorEvents function, you can observe what the browsers doing when you interact with the page elements in different ways. I've created a single page here and I want you to use the monitor events function to watch the image for events. Review the log that the monitor events function produces then determine which of the following are real mouse event. Does the monitorEvents function log out a mouse over event? What about a mouse on event? Select all that you find in the monitorEvents log while interacting with the image. You can find a link to this able page in the instructor notes below. After interacting with the image and reviewing the information that monitor events logs out, I see mouseout, mouseover, and mousemove. So the correct answers here would be mouseout, mouseover, and mousemove. The Mozilla Developer Network has a massive list of different types of events and the categories that they belong to. Look through the list and try to pair up which events belongs to which category. A link to the list of events on the Mozilla Developer Network can be found in the instructor notes. Look through the list on the Mozilla Developer Network and match the event with the correct category by entering the number of the event category next to the event itself. So for example, if the change event belongs in the view events category, then we would write the number four here. Both change and blur are in the focus events, so they would get a 2. Submit belongs in form events, so 1 here. Scroll belongs to view events, so 4. And the rest belong in the input device events category. So far, you've researched browser events, and you've taken a peak at them being logged. Now it's time to actually listen for and respond to them with jQuery. There are three items you need in order to listen for events and react to them. You need the target element to listen to, the event we want to react to, and the actions to take in response. Let me show you an example. I need the target element that jQuery will be listening to for events, so I'll use jQuery to select the input field. Next, I call the on method. This on method is where the magic happens. It's the primary way the jQuery uses to set up event listeners. The first argument to the on method is the event I want to listen for. In this example, it's keypress. But it could also be click, change, and mouseover to name a few. And finally, I need to pass a function with the actions I want to happen in response. This function is called the callback. The callback function being passed to the on method, is just a regular JavaScript function. And therefore, can contain any JavaScript code you want, from altering page content to analytics code. I'll change the contents of the function to alter the color of the page. And I'll test it. Bam. Looks good. In the next quiz, you're going to create your own event listener. Let's review the order of building up an event listener with jQuery. I have created the skeleton, and now it's up to you to fill in the different sections, in the correct order. Give it a try. First things first, we need to target the element that we're going to listen to for events. So that's B. Position two is the on method. So that's C. Position three is the type of event that we want to listen for. So that's D. And the last one is A, the callback function that will be run when the event happens on the target element. Now that you know how to listen for the actions your site's visitors perform, I want you to set up an event listener using jQuery. Your event listener should listen to the my-button element for click event. And when that button is clicked, I want you to use jQuery to remove the button from the DOM and add the class success to the body. Let's go in order. First we need to select the target using jQuery, then we want to add an event listener for the click event. Next when the button is clicked, the call back function needs to perform two actions. The first is to remove the button, and the second is to add the class to the body element. And now when the button is clicked, it disappears, and we'll see a success message. You have been setting up event listeners using jQuery's on method. Now this works really well, but jQuery also has some convenience methods that you can use. Let's take a look. This is how we would set up an event listener for a keypress on every input field. We could rewrite this using jQuery's convenience method by replacing the on with the keypress. And now we don't have to specify the event type because the convenience method implies it. See? Much nicer. Looking at the keypress documentation, you'll see jQuery point out that the keypress function is actually a shortcut for the on method, passing keypress as an argument. It's important to know that there aren't convenience methods for every event type. Take a minute to look up what methods are available on jQuery's API site. I have linked to the appropriate page in the instructor notes. Now that you have reviewed the jQuery docs, which of the following is not a shortcut on method pair? For example, if the keyup method is not a shortcut for on keyup, then select this one. jQuery's convenience hover method is not a shortcut for .on hover. The hover convenience method is actually a shortcut for the .mouseenter, .mouseleave convenience methods. These convenience methods are incredibly handy, so use them. I walked you through using jQuery's on() method. And you spent some time researching jQuery's convenience methods that are just shortcuts for the on() method. Surprisingly, there's still another way to set up an event listener with jQuery's on() method. In the next section, you'll learn about event delegation, where jQuery watches one parent element for events on any of its children. Great job going through this lesson on j query events. You now know how to set up event listeners with j query. You can now listen for user interaction and respond to those interactions. Fantastic work. So get out there and listen for those mouse clicks, key presses, and form submissions. Bring your pages to life and start engaging with your users. Welcome to the course on jQuery. I'm excited to be able to take you through a quick tour of the jQuery library. Over 60% of the top 100,000 most visited websites take advantage of jQuery's simple syntax and powerful DOM manipulation methods. In this course, you'll experience firsthand why jQuery's so popular as you explore the features that it has to offer. You'll start by breaking down how the jQuery library is built with JavaScript and what that means for your code. Then you'll dive into jQuery selectors and DOM navigation methods. This is probably the trickiest and most important part of learning jQuery. But once you've mastered selectors, you'll be parsing the jQuery documentation to write simple and straightforward DOM manipulation code. There are a lot of quizzes in this course, so you'll have plenty of practice manipulating the DOM with jQuery as you go. Are you ready to get started? You're looking at the jQuery library. This is the entire library. Notice that it's actually just JavaScript. Let me repeat that. jQuery is just a JavaScript library. It's not a language on its own nor is it fundamentally different than the thousands of other JavaScript libraries available. There's no magic in here that you couldn't devise yourself. If we had a week or so, I'd be willing to bet that you could recreate a lot of jQuery's functionality. Look at this method, isFunction. Do you see that? Look, it's just returning true if the object passed into it has a type of function. If you recreated jQuery, your library probably wouldn't be as performant as jQuery. But you could pretty easily recreate a lot of the same methods and functionality that J query offers. jQuery exists largely because manipulating the DOM with vanilla JavaScript isn't always easy. For instance, inserting a new DOM node with JavaScript means creating an element, setting attributes and content of the new node, selecting the soon-to-be parent of the new node, and then finally inserting the new node as a child of the parent node. But with jQuery, all of that is simplified to one simple function. And no one wants to worry about developing Web sites for different browsers when all you want to do is concentrate on creating a Web site with a fantastic user experience. jQuery exists so that you can focus on UX, not browser quirks. But before you start writing jQuery functions, I want you to take a look under jQuery's hood. Like lots of Web sites, Udacity uses jQuery. But what is jQuery actually? What's its relationship to JavaScript? I want you to find out for yourself. Open up your browser's JavaScript console on the Udacity website. Simply type jQuery and press Enter. Remember, case matters, so the Q has to be capitalized. What shows up? Do you see a function, an object, something magical, or a non-JavaScript function? So I've typed jQuery right here and I'll go ahead and press Enter. And there it is. It's just a function that takes in a couple of parameters and returns something. Incidentally, JavaScript functions are also objects. So, the correct answer is that jQuery is a function and it's also an object. There's no magic or anything special going on. It's just JavaScript. With jQuery, you'll be seeing the dollar sign a lot. But what is the dollar sign? Is it some special JavaScript keyword? I'll press Enter, and, low and behold, we see the exact same object that we saw before. As it turns out, the jQuery object and the dollar sign are mapped to the exact same thing. So, what is this dollar sign? The dollar sign is a character like any other. We could even reassign it as variable to something else if we wanted to. For instance var $ equals cameron. And then when I type in the dollar sign and press Enter, we see cameron. With jQuery the dollar sign is just a pointer to the same JavaScript object we saw before. In the spirit of making your front-end code easier to write, jQuery uses the dollar sign because because it's faster and easier to type than the whole word jQuery. In fact, some other JavaScript libraries use the dollar sign as well. For instance, the MooTools library also maps the dollar sign to a variable So, the dollar sign is just a function. But, now, what can you do with it? jQuery returns an array-like object which we call a jQuery collection. The reason we say it's an array-like object is that it's an object that looks and behaves like an array, but also includes some additional methods. You could pass strings into the jQuery object and a jQuery collection of DOM elements will be returned. On the Udacity website for instance, I've passed #foo into the jQuery object and saw an empty array come back. All right, well, that's not too exciting. I'll come back to the passing in strings like this in a moment. But what if you pass in a function? You could actually do that too. This is a pretty neat trick that I'll be revisiting at the very end of this class. You could pass a DOM element into the jQuery object as well, if you want to call some jQuery methods on it. You can call methods directly on the jQuery object, like $.ajax. $.ajax subtracts away all the annoying nuances of ajax into a simple method called on the jQuery object. You can check out the ajax class if you want to learn more. Notice that I'm just talking about normal JavaScript operations. It's worth repeating that jQuery is just a JavaScript library. It's not a language. The jQuery function takes in some parameters. It returns an object and even has some methods attached to it, just like any other JavaScript object. But that's enough of me talking. It's time for you to start practicing. The DOM is a data structure. It can best be described as a tree, much like a family tree. So, I've got a sample family tree here. This family tree has parents, it has children, and it even has siblings. Elements that are nested inside each other in the DOM are children, like, for instance, this unordered list, which is a child of div. Elements at the same level are siblings, like these two list elements or this unordered list and this form. And of course, we can go up the DOM as well. For instance, this div is the parent to that div. When writing HTML, you create a collection of nested elements that, in the end, resembles a structure much like this family tree. This HTML would map to the DOM tree you see over here. Here, the body's at the top level and it has some divs nested underneath it. For this quiz, I want you to examine this DOM tree. Which of the following DOM elements is the immediate parent of the two list elements? You can see them in the HTML here and in the DOM tree over here. Is it the body, this div, this ul, or is it none of these? Looking at the two list elements in the DOM tree over here and in the HTML, we can see that they're nested under the ul, which means that the ul is their immediate parent. You can add jQuery to any website using script tags, like so. You can host this file on your own server with a path like this one, but it's actually recommended to use a version of jQuery hosted on a content delivery network or CDN. CDNs are usually much faster than your own server, plus it allows you to take advantage of the browser's caching feature. jQuery and Google both host jQuery. Given the sheer number of websites using jQuery, you're definitely safe using either Google or jQuery's official host to host for your production builds. And don't forget to use the minified version of jQuery in production. The minified version of jQuery is considerably smaller, so it's going to lead to faster page loads. jQuery makes it really easy to select specific elements in the DOM. If I wanted to select an element like this one, for example, or maybe if I wanted to collect a collection of elements like these two list items, I can use jQuery selectors to quickly access them. Remember how we could pass a string into the jQuery object? We call this string a jQuery selector in that it allows us to select a part of the DOM. You can use jQuery to select a collection of DOM elements based on tag name, class name, or id. I'll start with selectors by tag name. Passing the string of the tag name will result in a jQuery collection of all the elements of a certain tag. I'll test this by opening up my browser's JavaScript console on the Udacity Web site, which, as you may remember, uses jQuery. If I wanted to do something with all the divs on the screen, I could select them by passing div into the jQuery object. And there we go. We can open up the object that got returned to see a collection of DOM elements. In a moment, you'll be trying out selectors by manipulating a real Web site. In index.html, you'll find the site's HTML. In an app.js, you'll be writing JavaScript to modify the page. You can press the Test Run button to see what the page looks like. Notice how we have this comment in the app.js file. For this quiz, set the listElements variable equal to a jQuery collection of all the list elements on the page. Hit Submit when you're done. Here's a quick hint. You can check your answer with a console. If you console.log the listElements variable, you can open up the browser console to see if you've selected the jQuery collection that you wanted. I'll start with the jQuery object, the dollar sign, and I'll pass in the string, li, to grab a jQuery collection of all the list elements. I'll check my answer with console.log and I'll open up the console. You might see a lot of errors here like we're seeing here but don't worry, you can just pretty much ignore those. Up here, we can see the jQuery collection returned from line five of our program, which, this is on line five. So, I will open it up, and we can see the DOM elements that we are expecting. Selecting by tag is less than helpful. In fact, if you think you need to use jQuery to select all of a specific tag on a page, you might want to rethink what you're doing because there's probably a better way to accomplish what you're trying to do. Usually, we only want to select a handful of DOM elements for changes. Classes offer a more specific selector that's much more applicable to the real world. To select all elements of a certain class name, simply pass the class name with a dot in front as a string to the jQuery object. For instance, if you want to select all elements of class green, you could call the jQuery object and pass it a string of a dot followed by green. This string that you're passing in looks a lot like a CSS selector, and that's because it is. In fact, any valid CSS selector is also valid in jQuery. For this quiz, you'll be working with the sample page again. I want you to select all elements of the class article-item, and save them to variable articles. Once again, you can check your work by console.logging the resulting jQuery collection. This wasn't too bad. I simply started with a jQuery object and passed it the string of .article-item. Let's go ahead and console.log it to see if it worked. I'll hit Test Run, okay. The page appeared down here. I'll open up the console, and there we go. We can see a list of article items. Very cool. Once again, there are some errors being shown here, and you might see some too. But don't worry, just focus on what the console's producing for your code. Last in our series of the three main types of selectors, you can also select elements by ID. Unlike tags or classes, IDs are specific to single elements, so we should expect to see a jQuery collection with only one DOM element returned. Selecting by ID is easy. Simply put a hashtag or pound sign or whatever you want to call it in front of the ID name inside quotes so you've got a string and you'll be selecting by ID. For this quiz, set the nav variable equal to the jQuery collection of the DOM element with ID of nav. First things first, we need the jQuery object. So I'll start with the dollar sign and then I'll pass in a string of #nav. I'll go ahead and console.log(nav) to see if we're getting what we want. And I'll hit Test Run. Page shows up and I'll open up Dev Tools to see that we have in fact selected the nav. With the help of jQuery selectors, you can select specific elements of the DOM. But, what if you wanted all the children of this div? How would you find them? Alternatively, what if you selected this div, but you wanted to inspect its parent element, this div? How would you find it? jQuery gives us DOM traversal methods for moving around the DOM tree. I'll start with parent. If I've selected the node with the ID Cameron, I can select my immediate parent by calling .parent. Dot parent goes up the DOM one level, so at this point I've selected the element with the ID Mark Suzanne. I could use .parents to select my parents, my grandparents, and my great grandparents. I could also filter for a specific parent by passing in another selector to the parents method. Say, for instance, I just wanted my grandparents, JerryJudy, I could pass JerryJudy with a pound sign into parents and then only have this node selected. It's important to note that parent will only go up a single level on the tree. If you need to go up more than just one level you need to use .parents; which will go all the way up to top of the DOM tree. I could go down the DOM too and select my children using .children. Dot children creates a jQuery collection of all of my immediate children, meaning that they're one level down in the DOM. But if I wanted my children's children, or any children of Taylor and Grant, if they existed in this example, I would have to use .find. Dot find goes down the DOM more than one level. Similar to parent and parents, jQuery provides a method that only traverses a single level deep in the tree, which is called .children. If you want to go deeper, there's a separate method called .find which will go many levels down on the DOM tree. Finally, there's .siblings. Dot siblings returns a jQuery collection of all of my siblings, meaning that we've got the same parent. In this case, Max and I both have the same parent so calling .siblings would return Max. And once again, I can pass a selector into siblings if I need to get more specific with my selection. Now, I want you to try out all of these DOM traversal methods with a quiz. This selector returns a jQuery collection of the DOM element of class article-list. Using that selector and the DOM traversal methods you just learned, can you grab this h1 tag, which says Cool Articles, all of the children of article-list and its two parent divs, here and here? To find the h1 element, I simply used the siblings method and passed in the filter h1. For the kids, I used find and a passed in a *. I'll come back to this in a second. And then for the parents, I used the .parents method and passed in the string div, otherwise I would select all the parents, including the body. To test this, I press Test Run, saw the page come up, and then open dev tools. I see that I've gotten h1, like I expected. I see the children of article-list. And I also see the two divs that we were expecting. Now why did I pass a * to find? Looking at the documentation for it, we see that the selector isn't optional. We've got to included it. But if we scroll down, we find this message, which says that if we want to select all of the descendant elements, or all of the children, we can simply pass in the universal selector, which in this case is a string of a star. See? Reading documentation is super important. Okay, enough with these selections. Now I want you to start manipulating the At this point in the class, you've gotten a good idea of how jQuery works works. You've used the three main types of selectors, and you've started navigating around the DOM with traversal methods. That's awesome. But now it's time to start making changes to the DOM, which is the whole purpose of jQuery. To that end, you'll be using the jQuery API documentation in the next lesson. And rather than going through each method one by one, I will be walking you through a series of challenges where you'll be tasked to take apart the jQuery documentation to figure out how to make changes to a sample page. To get started, I want to walk you through the general format of the jQuery API documentation. For this lesson, you'll be focusing on practicing DOM manipulation methods. You'll start by accessing data about existing nodes and modifying that data. You'll finish by adding and removing DOM elements. I won't be covering all of jQuery's methods, but most of them follow pretty much the same pattern. And after these examples, you won't have any problem tackling additional methods. This is the jQuery API documentation. On the left, you can see the main types of jQuery methods. I want to start by modifying the class attribute, so I'll click on Attributes. I can see a few methods. I'll go ahead and start with addClass, which does pretty much exactly what you think it does. It adds a specified class to a DOM element. This black box shows the main function signature, which tells you what to pass in as an argument to this method to get it to work properly. This description is pretty useful. It looks like this method takes in a string of a class name and adds it to selected elements. So if I passed in blue to this method, I'd add the blue class to the element with the ID of item. Inside the black box, you could find different ways of using the method, including this one, where you could pass a function to addClass. Huh, that seems kind of weird. If I read further though, we see that this function must return a string. It could be a string of a single class name or it could be many class names separated by spaces. And then below, we have some in-depth discussion and some examples. That's pretty cool. In other examples, like .parents, for instance, you'll see parameters inside square brackets. The square brackets mean that the parameter is optional and the method will work just fine with or without it. Now that I've walked you through the documentation, I want you to try parsing some documentation for yourself. You're going to start by modifying some data in the DOM. Ready to change some classes? There's an element in the DOM with the class featured that I want you to change. An element that's featured sort of has a bluish color background. Can you use the .toggle class method to remove the featured background from Article number 2? Check out the documentation for toggle class and give it a shot. Before we start, let's see what the page looks like before we toggle the class. I've gone ahead and hit Test Run, and I'll scroll down. We can see that Article 2 has this blue background. So, I've gone ahead and selected featured, and then I called toggleClass on it with featured as a string passed into toggleClass. I'll hit Test Run and then I'll scroll down. Article 2 doesn't have that blue background. You'll see why you just toggled it instead of removing it in the next quiz. I want you to take this a step further. Instead of just removing the class featured from Article 2, can you also use the .toggle class method to add the class to Article 3 as well? There are a few ways to accomplish this, but I recommend checking out the .next method to find the next sibling of Article 2. Check out the documentation for .next and give it a shot. To start off, I created variables for article two and article three. Article two got set equal to this jQuery selector for the class featured, and then I set article three to the next sibling of article two. Then, all I did was toggle the class of featured on article two and article three. I hit Test Run. And, let's see how it looks. We can see that now article three has a blue background while article two does not. Looks like it worked. This shows that toggleClass will either add or remove a class depending on whether or not it's already there. Changing DOM element CSS classes is super useful. And likewise, sometimes you want to change attributes on DOM elements as well. Take a look at this unordered list in the header at the top of the page. Each of the list elements has an embedded a tag. You can see that the first element at the top of the list is missing its href. I want you to use jQuery to set its href to number 1 to match the hrefs of the other elements in this list. You'll be using the .attr method to add an href. .attr is interesting in that it has two different method signatures. With the first signature, if you pass in the string of an attribute, you can get its value. And with the other, you can set the value of an attribute by passing in a string for the second parameter. This is a common pattern for methods that interact with data saved on a DOM element. So, using .attr, can you change the href of this a tag to be equal to number 1? Here's a hint. You might need another method like .first to help out. I'll start by selecting the navList by passing in the class .nav-list. Then I want the first item in the navList, so I use children to get the children of navList, and then I use the .first method to make sure I've got the first one. After that, I want the link in the first one, so I find the a tag inside of it. At that point, it's pretty simple. I use the the .attr method to change the href attribute and set it to number 1. After hitting Test Run, I can see that item number 1 now has a link attached to it, which is pretty cool. Let's just make sure it's the right one. I'll open up Dev Tools by inspecting this element. And we can see that yes, this a tag has a href of number 1. What would the DOM be like without CSS? Well, as you can see here with the sample page that you've been using, it's pretty boring. But luckily, you can access and modify CSS with jQuery pretty easily. Now, you should be careful because changing CSS with JavaScript or jQuery means adding inline CSS. See, right here it says that jQuery modifies the element's style property. This isn't a good way of building a site, but sometimes it's needed. In this lesson, we'll use it, but in the real world, you should always think about whether you should solve your problem with CSS or jQuery. The .css( ) method is similar to the .adder( ) method that we just saw. One method signature will get the value of the CSS property, while another signature will set the value of the CSS property. Using .css, can you set the font size of all the article-items to 20 pixels? Well, this one's pretty simple. We simply select the article-items and then use the .css method to change font-size to 20 pixels. After hitting Test Run, let's see how it looks. And look at that. All of the articles have much larger text. Very cool. I hope by this point you're starting to see the power of jQuery's DOM methods. Up to now you've selected elements and learned about the data inside HTML tags. But what about the data held between tags, can you grab that with jQuery too? Yep. The two best options for finding all of the data between tags are .html() and .text(). I'll open up the Udacity homepage and demonstrate the difference between them. Feel free to follow along with me. I started by selecting this element, with the ID of flyup-homepage, you can see that it has other elements inside of it. If you run .html() in this selected element, you'll see the HTML of everything inside of the flyup-homepage including all of the tags, classes, and attributes, like so, here's the HTML. But if you run .text() on a selection you'll see that jQuery has stripped out all of the HTML tags, and only return the text contained within. Like so, we can see the HTML disappeared. But can you change the HTML and text of a DOM element with these methods? Let's go ahead and find out. So, are you ready for another documentation challenge? For this quiz, you'll be using this input box to change the name of the Cool Articles section. I've given you a helper event right here that will run the code inside this function right here when the text in the input box changes. So, can you write code that will change the value of this headline to what's written in this box? Hint, you might want to use .text. So, for all of this, basically what I am doing is I'm collecting the value of the input using by using the .val method. And, I am collecting the h1, which is the h1 that we want to change. Then, all we have to do is set the test of h1 to the value that we got right up here. Once we do that, we can scroll down and we can have some fun changing the title of the articles. That wasn't too hard. If you want to learn more about jQuery events, like the one we used here, check the link in the instructor notes jQuery lets you go beyond simply modifying existing DOM elements. You can create and delete DOM elements with ease as well. I want you to start with the .remove method, which does exactly what you think it does. Check out the .remove documentation. For this quiz, you'll be removing the unordered list from Article 1. Just to be clear, i want this unordered list with these names removed. I'll start by creating a JQuery collection of all the elements of class article-item. Then I'll call find on the article-items, and pass it ul to find all instances of unordered lists in the collection. Now, I have to be careful. I am actually telling jQuery to select all ul's from any of the article-items. In this case, I only have one, right here. But if I had more than one, I'd need to use a more specific selector or filter it somehow, otherwise I'd delete other ul elements. At this point I'll simply remove the ul and presto, it is gone. Alternatively, according to the documentation, you can also pass a selector into .remove to only remove specific elements from the DOM. For instance, if you only wanted to remove elements with class bold, you could pass in the selector .bold and you'd only see James disappear. You can hit Test. Scroll down, and James is gone. JavaScript is a remarkably powerful language for manipulating the DOM. However, with great power comes great confusing syntax? Yeah. It can be tricky to add elements to the DOM with plain old JavaScript because you first have to create a DOM node, add data to it, find a parent for it, and then finally add that node as a child to that parent. And each step happens pretty much independently. With jQuery, you can create new DOM nodes and simultaneously add them to the document with one simple method. I want you to experiment with four different methods for creating and adding new DOM nodes. .append(), .prepend(), .insertBefore(), and .insertAfter() give you four different places to add new DOM elements. I'll start with .append and .prepend, which you might remember from the Javascript Basics resume project. These add children to an element. So, if I select this DOM element of the firstArticleItem, I can call .append or .prepend, and this new element will be added as a child to this one. .append adds this new element as the last child of the selected item, while .prepend adds this new element as the first child of the selected item. When we test this code, we can see some cute puppies at the beginning of Article 1 and at the end of Article 1. But what if I wanted this element to have a sibling? For that, I'll use insertBefore or insertAfter. As you may guess, insertBefore adds a sibling before the current element, and insertAfter adds a sibling after the current element. You know what? Why don't you give these a try? For this quiz, you'll be building a new family tree. Okay, well, not really. But you'll be building a new DOM tree, which is kind of like the same thing. We've got a pretty simple DOM here. There are two nested divs and then another div with the ID of family1. And under family1, you can see the children and their children. But there's another family and it's going to be called family2. It doesn't exist yet and you're going to need to build it. You can see family2 has a child and that child has two children. So, for this quiz, I want you to build on the existing DOM tree so that the final one looks like what you see here. These are all divs that you'll be adding and you can see their IDs written right here. To start off, I went ahead and created all the variables that I knew I would need. I needed family1, family2, bruce, madison, and hunter. For family2, bruce, madison and hunter, I went ahead and passed in a string of an HTML element to the jQuery object. This creates a new DOM element. I made sure to include these h1, h2 and h3 tags so I would know what I was looking at when I saw the page. After that, it was a simple matter of inserting family2 after family1, appending bruce to family2, and then madison and hunter to bruce. But I want you to take a look at the syntax of insertAfter because it's a little different than what we've seen before with jQuery. insertAfter acts on some DOM element and then inserts it after the target. I also want you to notice that we could have used this command called after instead. after follows more normal jQuery syntax. It acts on a selector and then adds some content after it. We can go ahead and check our work by looking at the resulting page, which looks pretty good. And we can open up DevTools to make sure that the DOM is the way that we'd expect it to look Excellent job so far. I really hope you're excited about the new tricks that you've learned. For this quiz, I want you to use the .each method to add the number of characters held inside these p tags to the end of them. In other words, a number should appear at the end of the p tag indicating the number of characters inside it. The .each method lets you iterate through a jQuery collection and run a function, like so, against each DOM element. It's kind of like a super awesome for loop that iterates over your elements. I'll give you a hint. If you want to use any of the jQuery methods on a DOM element within the function that you pass in, you'll need to use the $(this) selector to get that current element within your loop. Without reselecting using the jQuery object, the keyword this simply refers to the DOM element itself without all of jQuery's additional functionality. For instance, $(this).text inside of an each loop will return the text of each element as each iterates through the jQuery collection. Take a look at the documentation for .each and add some numbers to your page. I knew that I wanted to iterate through all of the p tags on the page, so I selected all the p tags and called .each on it. I passed in the function numberAdder which I defined up here. NumberAdder simply finds the text that's already there. Figures out how long it is and then changes the text on each element to the same text plus a space and then a number. When we hit Test Run we can see how it looks. And check it out. Now we've got how many characters are in each p tag. You've almost finished the jQuery course. Nicely done. Now that you've had some time to practice some common jQuery methods, take a moment to reflect on why most of the Web uses jQuery. Is it because of jQuery's fast selection, its cross-browser compatibility, its easy DOM manipulation, faster page loads? Is it because it makes me happy, or some other reason? It is almost all of the above. jQuery does add a few kilobytes to the size of your pages, so it will add a minute amount of time to your page loads. But, given all of the syntactical sugar you gain, most developers are more than happy to add it to their Web sites. On a personal note, I want to add that while I was making this class, my opinion about jQuery actually changed a little bit. I generally tend to use just plain old JavaScript to do DOM manipulation because I don't want to add the extra kilobytes to my pages. But honestly, after doing the research in developing this class and spending more and more and more time with jQuery, it really is pretty awesome. So, I'm going to go ahead and draw a smiley face here. It's an ugly smiley face, but that's how I'm feeling right now. So, good job for finishing, guys. Now, you've got a good idea of what jQuery has to offer. You've learned that jQuery is just a JavaScript library and it doesn't contain any hidden magic. You've learned how to easily select anything in the DOM with jQuery. You've learned a few basic DOM access methods and you've manipulated the DOM with ease. You've gone beyond that to add to and remove from the DOM, and you've even learned how to use jQuery to simply iterate through the DOM in a few lines of code. But best of all, you've learned how to read through jQuery's documentation and make sense of it all. It's not some big, scary beast. jQuery is a tameable library with methods that are as simple to learn as they are to write. You're ready to get out there and start writing some elegant, concise front-end code with jQuery. But before I let you go, there's one more jQuery trick I want you to learn. In the very last part of the lesson, you'll find some written instructions about one of the most interesting features of jQuery, which is passing a function into the jQuery object to run on document.ready. Are you feeling up for one last challenge?