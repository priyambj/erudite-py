Hi! My name is Kunal and I'm delighted that you are considering this course. Now, before we dive in, I want to introduce myself and also share with you two reasons why I'm really excited to teach this course. First, I love teaching. Before joining Udacity, I was a sixth-grade science teacher in India. I remember really enjoying presenting new ideas to my students. That would make them question what they already knew. That experience lead me to pursue a Master's Degree from the School of Education at Stanford University. The second reason, is that I love to create things with programming. Now, in this course, we are going to use the Python programming language to create a bunch of projects. And my hope is that you would want to share these projects with your friends. Here are some of them. The first one, is project take a break. Do you know a friend who works too many hours? Hint, that person could be you. We will write a program that schedules breaks throughout the day, reminding that individual to listen to music, get up and dance to their favorite song, or just walk away from the computer every once in awhile. Another one is called project profanity editor. Imagine you get an email from your boss, requesting your help with something. You reply, I can take a shot at it but accidentally you end up including an awkward word. Oops. We will write a short Python program that detects curse words and saves you from embarrassing moments in the future. The final project is project movie databases. In this project we will learn how to make an awesome webpage, that lists your favorite movies, and shows their trailers. [SOUND] [MUSIC] Now before we make some of these projects, I want to share with you of how I learned to program. I remember in many of my introductory computer science classes. The instructor would start out slow and my friends and I, we would understand everything, but then boom, the difficulty level would skyrocket. This would make a lot of other students inside the class feel extremely frustrated and intimidated by code and ultimately they would quit. We will avoid that in this class. In this class we will make challenging projects, but at the same time we will ensure that you're comfortable with the learning curve. So it is in that spirit I want to ask you, how confident do you feel in your ability to write computer programs? Programs like the ones we are going to build in this class. Here are some answer choices. Thank you for sharing your response. Now, before we continue with the course, I want to make sure that you're familiar with the prerequisites for the course. We want our students to know some basic computing ideas. Ideas like, if statements, loops and function definitions. You can demonstrate that you know these ideas by continuing to watch this video. And by answering the two questions that follow. By the way, if you feel like you need a refresher on any one of these topics, there are some helpful links in the instructor notes. Okay, here is the first question. Okay, so standing behind me is the official Udacity dance team and they're going to do a dance step for us. Watch closely as there is a programming question that follows. Ready team? Action. [SOUND] All right, what we're going to do is three shakes to the left with three shakes to the right and we're going to repeat that. Ready? [MUSIC] So here's the question. Imagine you were to model this dance in code. How would you go about doing that? Here are some answer choices. It is a day as ordinary as the next. Jenny wakes up and decides to go for a hike. On this day, however, she goes down a path she wouldn't normally take. Before long, an unsettling feeling of being lost sets in and she comes to a fork in the road. Which way to go? Only her trusted diary can answer this question. She opens it and there lies the answer, a message. It says take the road less travelled. Now it's up to you to help Jennie get home. All you have to do is read this piece of code, which guides the next step she will take. Now tell me, which path will you send Jennie down. Thank you for answering those questions. In case you feel like you need a refresher on some of the basic programming ideas, there are some helpful links in the instructor notes. Now we're going to make these projects in the next lesson really soon. But before we do, I want to address an important question, which is, what programming ideas are we going to learn in this course? Here's the answer. So here we are at the course map and I want to take a minute to talk about some big ideas that we will learn together. In this course, we will start out with ideas that we are somewhat familiar with. This includes functions, functions like the simple print ("Hello World"). Soon however, we will move onto learning new ideas. [SOUND] These ideas include classes and object oriented programming. Now, this is a technique that's used by software engineers on a daily basis. And they can use this technique to write and share code amongst each other. Now, while we will start with functions in lesson one, we will spend most of our time in the course right here, learning about classes. Oh, but the way, all programs in this course are written in the Python programming language. So, let's begin by downloading Python. So we just finished lesson zero, which was an introduction. In this lesson, lesson one, we will build two main projects while using functions. Now, towards the end of this lesson we will present a scenario where functions won't quite present a very eloquent solution. That will pave the way for us to learn new stuff in lesson two and three. Now if you feel extremely comfortable with functions and understand their limitations completely you should consider moving on to the next lesson, however if you feel like you want to learn more about functions in the Python programming language, continue to take this lesson, watch the next video, we will use it to write our first program. Can you think of a friend who works really long hours on a computer, programming, writing, researching for hours. By the way, that person could be you. This seems to be a problem, especially as the number of hours we spend on a computer keeps going up. If you could only remember to walk away from the computer for a little bit. Let's write a program that schedules breaks throughout the day reminding that friend who works really long hours on the computer, to listen to music, get up and dance to their favorite song, or just walk away from the computer every once in a while. Okay. So, I wrote a program called Take A Break that for now is hidden behind this graphic. But, let me just focus on running it. When I do that, the program starts to keep track of time and after every two hours of work on the computer it opens a browser to play your friend's favorite song. [MUSIC] After another two hours of work, it prompts you to take another break and so on. Let's build this. Now before we write that program, let me ask you. If you are writing the Take A Break program, what steps would you take to get to the output. Don't worry about writing code right now, in plain English, simply identify the steps you would need to take to make this program work. Step one do this, step two do that. You can submit your answers on the discussion forum. And while you are there you can read the ideas others submitted on the forum as well. The next video will give you a quick tour of how to use the forum. So the way to submit this answer on the forum, is to look under the Discussions section of the web page. For now, there is just the one link here. Although, you may see multiple links under Discussions. Click on the link that is in bold, and has a star in front of it. Now, the star means that I created this thread for you to submit your responses. After I click on it, a new tab opens with a Discussion forum. Here, you can simply scroll down, to submit your responses. So here I am, back to the original question, which is, if you were writing the take a break program, what steps would you take to get to the output? Make sure you submit your responses on the Discussion forum, and, check this box after you've submitted your answer. Thank you for sharing your responses. I will be providing feedback on the forums periodically. Now there are several ways in which to solve this problem. One way is for us to write a program that somehow keeps track of time, say two hours, and it essentially does nothing during that time. So the first thing we want the program to do is Wait for two hours. And after we've waited for that amount of time, we want the program to open up a web browser, which plays let's say a YouTube video which is your friends favorite song. So the second thing is to open a browser. [BLANK_AUDIO] Now because we want these two steps to happen multiple times during the day. Because we want to take multiple breaks during the day. We want to put these two steps inside some sort of loop. So let's say we want to repeat these steps three times. [BLANK_AUDIO] Let's build this. I encourage you to follow along. So, the first thing I will do on my Windows machine, is open Python and IDLE. Here's how to do it. I can go to the Start Menu, hit All Programs, find Python 2.7, which is what we just installed and launch IDLE. On a Mac, this is what you'll need to do. I will go to Spotlight and then type Idle. You can think of IDLE as a notepad or a place where we write Python programs. I can click on File and then New File and boom, I will get a fresh new place where I can write my code. By the way, the other window is where we'll see the outboard of our program. Okay, let me rearrange both of these windows so we can see them at the same time. Okay, so here is our program design. I'm going to start by opening a browser and playing a song. So previously, I Googled to find out how one would open a web browser in python. And I discovered that there is this function called webbrowser.open. This function takes in the link I want to open. I just placed a Youtube address in there. In fact, this could have been any link you want. Alright. Let's save the program and run it. I'm going to call it Breaktime dot Py. Py stands for Python. To run it, I will click on run, and then click on run module. Now my hypothesis is that when we run this program it will open the Youtube link. Let's see. Oh. It seems like we have an error. Okay, it says there's an error in your program, EOL, whatever that means, while scanning the string literal. Okay? Oh, look Python is pointing out the error. It seems like I missed the closing quote, so I'm going to add that. Let me save the program one more time and run it. Now I believe it will work. Hm, another error. You know, when I first learned how to program, I felt so intimidated by these errors. Look at them. They are red and in your face, but to make the program work, we have to somehow get past them. So, would you mind reading the error and telling us what you think is the problem with this code? Enter your responses in this box. So Python is having difficulty, understanding what webbrowser is. We can fix this, by saying import webbrowser at the top. This is our way of tellin Python, hey, we want to use webbrowser and all of its functionality in our program. Let's Save and Run. [MUSIC] Alright. This time the program worked, and we can check off one of the things we have to do. So next, I will attempt to make my program wait for a certain period of time. To find about this, I went back to Google, and then typed python make my program wait. One of the first links there was this website called stackoverflow.com. Now this will soon become one of your favorite websites as a programmer. it suggested to use something called time.sleep which suspends the program for a given number of seconds. Okay, back to the program. Now since I'm still in testing phase I will try to suspend the program only for about ten seconds; we can change this number later. I also know that I have to import the time module. Okay, let's save this and run. Alright. It seems like the program is waiting for a few seconds before it opens the web browser. [MUSIC] [MUSIC] Another item bites the dust. Now the next thing we have to do, is to put these two steps within a loop, so our program can prompt the user to take a break multiple times during the day. So your challenge is to add a loop to this code, so it prompts the user to take 3 breaks. Now if you are confused about this task, there are some helpful links on loops in the instructor notes. Here's one way of doing that. Say, I want to take three breaks throughout the day. I will use the break count variable to keep count of the number of breaks I've taken. And then add a while loop, to make sure that this code runs three times. By the way, if you want to see some information on how while loops work, there is a helpful link in the instructor notes. Now, if I run this program. The program will wait for ten seconds and play the song and do that three times. Another handy addition to our program can be a print statement that tells us when our program began. Now, how do I find the current time? When I have to do some testing like this, I start to use this output window, so I can import time here. Which, as you may guess, is a way to access time. And I know there is a function called ctime, or current time. That seems like the current time on my computer. Great. Back to the main program where I'll add this. Let me save and run this program. Now, as soon as I run the program, I get a prompt, suggesting when I started the program. Ten seconds after that, a video is played which asks me to take a break [MUSIC]. So far so good. Another ten seconds pass by and another suggestion to take a break. [MUSIC] Now, if I want to stop this program midway, I can either restart IDLE or use Ctrl+C in the shell window, which will stop the execution of the program when it comes back from sleep. Okay, so our program is lacking just one more thing. Let's say that we want to take a break after every two hours of work on the computer. I can increase the duration of delay from ten seconds to two hours. Now remember, the sleep function takes in seconds, so this number to the computer is two seconds and not two hours. To fix this, I can find out the number of seconds in two hours. And use that instead. Since I'm still testing my program, I will keep the wait time to a manageable ten seconds. Okay, so now that we have written our first program, let's understand where functions like webbrowser.open and time.sleep are coming from. Now imagine that this yellow sheet of paper is the Python Standard Library. Imagine that this is what we got when we downloaded Python. Inside Python is a file named webbrowser. And inside webbrowser is a function called open. Now this is the function that allowed us to play the YouTube video. Much like webbrowser, there is another file or module inside the Python Standard Library. It's called time, and time has several functions defined inside of it. Two of them are, ctime which gives you the current time, and sleep, which suspends program animation for a little bit. Now here's a thought, how does function sleep actually suspends or pauses program flow for a given number of seconds? We don't really know how it does that behind the scenes. In much the same way, how does function open, opens up a webbrowser to play a YouTube video for us? We don't quite know how it does that behind the scenes also. That detail is hidden from us, and this hiding of detail in programming is called abstraction. Now this idea of abstraction is a really powerful one in programming, because it allows us to focus on the program that we actually want to write which is the take a break program, and it empowers us to use these functions simply by reading their documentation. So lets read some documentation now and see if these functions actually exist in the Python Standard Library. Okay, so I will search for Python Standard Library, and I got to this documentation page. By the way, the link to this page is also available in the instructor notes. I will check to make sure that I am reading documentation for the version of Python I downloaded, which is version 2.7. In here, I can scroll down to web browser. You will notice that it says here, that the web browser module provides a high level interface to allow displaying web based documents to users, which is really a fancy way of saying, it will show you websites. And if I scroll down, I can find the function, webbrowser.open, which takes in a URL and displays that URL using the default browser. If I go back, I can also find the module named time. Here it is, and if I click on it, I can read its documentation. It says, this module provides various time related functions, and we use two of those functions. If you scroll down, you'll find time.ctime, which gives the current time of the computer, and time.sleep, which suspends execution for a given number of seconds. Okay, so here's your chance to demonstrate what you've learned thus far. You know, my computer science professor in college used to say, if you truly want to learn something, teach it to someone else. And that's what we are doing to do in this exercise. We want you to find a friend or a colleague that does not know much about computer programming at all. And then we want you to teach this program that we've written together to that individual. Now, while you're doing that, we want you to use your phone or a video camera to record a video of your conversation with that friend. Capture their reactions and then you can share that video with us on our discussion forum. Now, if you don't have access to a video camera, you can also share with us photos or some text describing your friend's reaction while you were teaching them this piece of code. The next video we'll showcase how to share videos and photos on our discussion forum. Okay, so to share videos and photos, I will click on the Discussion thread with a star. Now, the star means that I created this thread for you to submit your responses. Once the discussion forum has opened, you can simply scroll down and add a YouTube link right here to the discussions. You will notice that there is a YouTube video that is embedded right within the discussion forum. There. Now let's talk about how to upload a photo. To do that, I will click on this tiny photo icon, and then simply upload a photo from my computer. That's the one I want to upload. And you will notice that much like the YouTube video, the photo is also uploaded right here within the discussion forums. Let me hit Submit, and done. So here I am, back to the mini project, which is for you to teach the program that we have written together, to a friend or a colleague. We also want you to use your smartphone to record a video of your conversation. And then share that YouTube video with us on the discussion forum. Oh, by the way, if you are an unable to record a video, we would love to see some photos or some text describing your conversation with your friend. After you've submitted your responses on the forum, make sure you check this box. So, we've just seen one example of how functions can help us design the Take a Break program. Let's see another example of how functions can help make things easier. My friends and I, we play a lot of pranks on each other. Today, however, I was on the receiving end of one. This morning, I could not find my house keys. Just then, I got a text message from a friend. We have hidden your house keys, said the text message. To find them, you have to solve a puzzle. On your computer there is a folder with several photos. If you rename all the files by removing the numbers from the photo name, the photos will reveal a secret message and lead you to the house key. This renaming of 50 files will take a long time. I can't wait to solve this puzzle so I can get my friends back. So, here I have a folder on my computer with a bunch of photos. Now, you'll notice that the message in these photos is all jumbled up, we can't quite read it just yet. Now, if I zoom into these photos, you'll notice that the names of the photos, they have numbers in them. And it's our task to remove those numbers. And I wrote a program that does just that. Let me run it. The output window shows all of the files that were renamed and if I look at the folders again, you'll notice that the photos have been renamed. Their names don't have any numbers in them anymore. Also, if I zoom out just a little bit. You'll notice that the photos are now revealing a message. Which in this case is just, SOME SECRET MESSAGE. Let's build this program. Now before I start coding, I want to ask you, what steps would you take to rename a bunch of files on your computer? Don't worry about writing any code right now. In simple English, just identify the steps you would need to make to create this program. Step one, do this. Step two, do that. You can submit your answer on the discussion forum, and while still there, you can read the ideas others have submitted. Thank you for sharing your responses. I will be providing feedback on the discussion forums periodically. Now, here's one way in which we can solve this problem. We have to write a program that somehow looks at the right folder and gets for us all of the filenames from that folder. So let me write this down. As the first step we have to get all the file names. [BLANK_AUDIO] Once we have all of the file names, for each of the file name, what we want the program to do is rename those files. So as a second step, for each file, we want to rename it. And by rename I mean remove all of the numbers from the file name. Let's build this. I encourage you to follow along. Now you can do this with existing files on your computer, but if you want to follow along this example, feel free to download the zip file in the instructor notes. When you unzip that file, you'll have a folder much like this one, with about 50 photos. Okay, so what I've done thus far is just created a new file in Idle, and I called it rename_files.py. And inside that, I've created an empty function by the same name. Then I added comments of the two main things I have to do in my program. By the way, notice that the function right now is pretty empty, and if I saved and ran the program, it would essentially do nothing. The first thing I have to do, is get the file names from a given folder. So Google can help with that. Let me just type in Find file names in a folder in Python. Now I read through the results, and I got to this stack overflow.com page. And here I read that there is this thing called os.listdir, which will get you everything that's in a given directory. Now it turns out that there is a module in Python called os, short for operating system. And that has a function inside it called listdir. Which, as its name suggests, lists everything that's in a given directory. So let's add this to the code and see what it does. Now this function listdir takes in a path of the folder that contains our photos. So I'll go back to my folder. Copy its address, and paste it. Now for those of you who are on a Mac, you can use a document in the instructor notes, that will help you get the path of your folder. On a Windows machine however, right before where the path begins, I will add this letter r, and r stands for rawpack, and it tells Python hey, take this string as it is, and don't interpret it any other way. So here let me just save this in a variable, and print that out. Let me save, and then run, and oh wow, we get a list of all of the file names inside that folder. It's an ugly looking list, but a list nonetheless. Alright, step one of the program is done. Okay, let's do step two now, which is to rename files. Now, I provided the link to the documentation for the module OS in the instructor notes. I want you to scan that documentation and find out which function we can use to rename files. By the way, this sort of a search is done quite commonly by Software Engineers. Once you've found that function Enter the name of that function in the box provided. So, here I am in the Python documentation for OS and let me just search for something that can help us rename a file. Lo and behold, there is a rename function we could use. It takes the source or the current name of the file and changes it to the destination or the new name of the file. Let's use this function. So, I know I want to rename all of my files. And I remember there were about 50 photos, inside that folder that you downloaded. So, to rename 50 photos, I think I'll have to use some sort of a loop. So, I'll just write one down now by saying, for file_name, in file_list. Now, bear in mind, file_list is something we've seen before. In fact, we printed it out. This was a list of all of the photos inside the folder. And what this for loop is going to allow us to do is work with each photo file one at a time. So, for each photo, I want to change its name. And the old name is in file_name. And the new name, well, I know the new name is devoid of any numbers. But how to do that, I still don't know. And this means I'll have to do some experimentation. And to run those experiments I generally use the Python Shell window, where I can just start typing and seeing the result really quickly. Let me make more room for this window so you can see it properly. So, say, my file name was the following string; 48athens.jpg. Let me print that out, okay, good. Now, previously I Googled to find out that there is a string function called translate that takes up to two arguments. The first argument is a table. Which translates one set of characters to another set of characters and since we don't have that, I can use the keyword none. And the second is a list of all characters that we want to remove from the string. And those I know are numbers, so that will be zero, one, two, three, four, five, six, seven, eight, nine. All of those numbers. Let me try that. Oh hey, look, the file name now has no numbers in it. So, because that experiment worked, I will go back to the code and add this file_ name.translate function into my code. Okay. So we are back to the code and all I have done is added the translate function to our program. So what this code is doing now, is saying, for each file or for each photo, inside our folder, rename it. Here is the old file name and here is the new file name devoid of any numbers. Now my hypothesis is that if I save and run this program, all of the photo files will be renamed and we'll see the secret message. So let me go ahead and save it and run the program. Oh wow. That clearly did not work. Would you mind reading through this editor and telling us what you think is the problem? Once you have a hypothesis, feel free to enter it into the box provided. So the error suggests that the system or the program, it can not find the file specified. You know, that's really interesting because at one point we were able to find all of the files. In fact we printed out all of the file names. Okay, let's continue to read the error. It says that the error is in line 9, and it's happening around os.rename. This makes me wonder if the program is actually looking at the right folder when it's trying to rename the files. So going back to our program, I know there is this function called os.getcwd. CWD stands for Current Working Directory. Let me see if that inner variable and print it. And I will comment everything else out for the time being. Let me Save, and Run. It seems that the programs Current Working Directory is this folder called OOP, which resides in the C drive. And if I go back to my program, I know that my files or my photos are inside this folder called prank, which is inside OOP which resides in the C drive. No wonder the program can't find any of the files. It's looking inside OOP. Meanwhile, all of the files are inside prank. To fix this, I can use the change directory function. And with this function I can ask the program to look at the folder where my files actually reside, which is this folder right here. So I'm going to copy that, and I'm going to paste it here. And then let me uncomment some of the lines I'd commented out before. Towards the end of the function, I will change the path back to how I found it. Let me Save, and Run the program one more time. Hm, the program didn't quite throw an adder this time. But now I want to check to see if the files have actually been renamed. So here we are back at our folder, and you'll notice that the names of the files don't have any numbers any more. They've been renamed. And if I zoom out a little bit, you'll notice that the photos will reveal a secret message, which is that the keys are in the closet behind the shoebox. All right, it seemed like our program worked. Now, before we finish this project, my final recommendation in terms of improving it, is to add a print statement each time we change the name of a file. So here I am printing the old name of the file, and here is its new name. Now that our code has worked, I want you to think about the following two scenarios. What would happen if we try to rename a file that does not exist in our folder? Or, if we try to rename a file to a name that already exists in our folder? You can submit your answers on the discussion forum. After you've done that, make sure to check this box before you continue. Thank you for sharing your thoughts. Now, if any one of these two scenarios occurs, the program that we wrote will throw an error. We call this error and exception. I want you to put a pin in this thought as we will return to this idea in the later lessons of this course. Okay, so we are back at our code again. And now I'm curious to see where the different functions of OS like listdir and rename are coming from. Let's find out. So, much like web browser and time, Python has another module inside it called OS, which is short for operating system. Inside OS are several functions, two of them are listdir, this lists out all the files in a given directory and rename, which renames a given file. Don't take my word for it, let's look for them in the documentation. Okay, so here is the Python documentation, and if I scroll down, I can find the os module. Let me click on it. And in here, we can find all o the OS related functions that we used. So here is os.change directory, and here is os.getcwd, or get current working directory. Let me scroll down some more. And if I do that I find os.listdir, which lists all of the files within a given directory and on scrolling down even further, I find os.rename. By the way, I want to make a quick note here that even though we don't know how functions like rename really work behind the scenes. We can read their documentation and use them just fine. This hiding of detail behind documentation, in computer science, is called abstraction. So here is your mini project. We want you to create your very own secret message, for a friend, or a loved one. Now, the secret message could be anything from you wishing them a great day to you telling them how happy you are to have them in your life. You can start by showing them the jumbled up version of your message. Now, we have provided some images of the alphabet in the instructor notes. You can use them if you'd like. Then run the program and reveal your secret message to your friend. Your assignment is to share videos or photos of your friend's reaction with us on the discussion forum. Once you're done, check this box before you continue. So thus far, what we've been doing is writing a lot of functions. We generally start by creating an empty Python file. Let's call it some_module.py, in this case. And then we add functions to it. Functions like do.this. And another function, let's call it do.that, for instance. And, essentially what we're doing is writing code, one line at a time. Almost like a recipe and frankly that technique's been working for us thus far. So, let's continue to use this technique while solving the next programming challenge which is building a movie website. So let's assume we want to make a movies website. Much like this one. Now, if you were to make this based on what we have been doing this far. What we would do is start with an empty programming file, and we would like it something like movies.py. Now, since a movie has a lot of data associated with it, like the movies title, its storyline, we would add that to our program. Also, we would want to do things with our movies, like show the movies trailer or show or print all of the movies information. So we would add those function to our code as well. So far, so good. So, further imagine that we want to run this program. And we want to play a movie's trailer. Well, which movie's trailer? To make that work, we would have to provide the show_trailer function some information or arguments, like this. In this case we are saying hey, play Toy Story's, youtube_url. That seems manageable enough. Now let's try to print out a movies information. Well, which movies information? Again we would have to supply some sort of information or arguments, to the show_info function. Arguments like the movie's title, its storyline, the release_date, rating, youtube_url, director, box_office, et cetera. Now, I don't know about you, but this function show_info is already getting too convoluted for me. Imagine what happens if we have to supply more information to it. Like the movie's cast or the movie's reviews. What we really want to do is define a template for our movie and record all of the data that needs to go into that template. Data like the move's title, it's storyline and functions like show_trailer and show information and then simply say, hey, Toy Story is a movie and so is Avatar. And then have the ability to say, show me Toy Stories trailer or show me Avatar's information. No arguments necessary. Now, one way of doing this, just by using functions, is to take the template we have defined and make multiple copies of it. So, we could make a copy of this template and call it toy_story.py, and make another copy of this template, and call it avatar.py. Now we will be able to say things like toy_story.show_trailer and avatar.show_info. Now, this doesn't seem like a very smart solution to me. Imagine what happens, if we have to add more pieces of data to our template. Or if you have to rename one of our functions. Say, from, show_trailer to play_trailer. If that happens, we will have to make those changes in each and every copy that we make. This doesn't seem like a very smart thing to do. So what we really need is a way of making copies of a template, without having multiple files. We need the ability to define a template for something, like we did for movies, and then be able to say, hey, Toy Story is a type of that template, and so is Avatar. Avatar is also a type of that template. We need something new, and that new thing in programming is called a class. So what are classes and how do you use them? Let's find out in the next few lessons. So, we started out lesson one using a lot of different functions, and we built two main projects. In the first one, we helped our friends take a break and in the second one we sent a secret message to our loved ones. Then we came across a scenario, while building a movie website, where using functions didn't quite present a very elegant solution. That solution requires something new. And that new idea, in programming, is called classes, and here in lesson two, we will spend a lot of time, and build a lot of different examples, showcasing the power of using classes. Now, we will return to our movie database example in lesson three. But here, in lesson two, we will start out with ideas and examples that are the easiest for me to explain the power of classes to you. Let's begin. So I've been thinking about how to introduce this topic called Classes. In so doing, I went back to how it was explained to me in college. I realized, that those ideas, were filled with jargon, and were really confusing. Then, I landed on this thing in Python, that can help us draws shapes. Shapes like squares, circle, and fractals. And it turns, out that drawing these shapes, is one of the easiest ways to learn about classes. So lets begin, by drawing some shapes. So I wrote a program that is currently hidden behind this graphic. If I run it, it begins to draw squares. And out of those squares emerges a circle. [MUSIC] Lets build a shape and learn about classes at the same time. Now, one way to draw a whole bunch of squares, is to start by drawing just the one square. So, here's what I'm going to do. I'm going to step away from my computer for a little bit. Put this hat on. And I will draw on this red carpet, which will be my canvas. So, when I move around on it, you will notice that I can draw. There it is. And in this case, I drew a triangle. So, here's a task for you. If you were ask me to draw a square on this red carpet, what step by step instructions would you give me? Write your answers in the box provided. So, here is one way to draw a square. I can move forward, turn right, move forward, turn right, move forward one more time, turn right again, move forward and turn right. There it is. Okay. Time to draw the square. But this time, using the computer. So, I created a new Python file and called it mindstorms.py. You could've called it something else. And then, inside it, I created a function called draw_square, which, for now, is empty. Now, I know there is this module in Python called turtle. This is the actual thing that moves around and draws stuff on the computer. By the way, I encourage you to find out why this thing is called turtle and not a dog, or a cat. One way to start to draw is by saying, turtle.Turtle. Now, this syntax is a little weird and we will understand it by the end of this video, but it suffices to say that this is how we grab out turtle. I will call it brad. Now, the first thing we want to do is move brad forward. And we can use the forward function for that. This function takes in a number, which is the distance we want to move forward. Now, I just want to run this code, and see if it's even working. But, you know what, the one thing we forgot, is that we still don't have a screen on which this turtle, aka brad, is going to move around. In other words, we need the red carpet equivalent in our program. I know that is done by adding a window screen, and this window is going to have a red background, and I want to be able to close this window any time I click on it. Now, let's save and run this program. [BLANK_AUDIO] All right. It seems that we have a window with a red background. And a turtle named brad, which has moved 100 steps forward. Okay, so I am back at the code, and now I'm going to finish making the square. So, after brad has moved 100 steps forward, I want to turn it right, and I want to do so by 90 degrees. So, I can say, brad.right 90, and because I want to do these two steps right here, four times to do a square, I'll just copy paste them a few times. So, I'm going to copy these two lines and I'm going to paste them. Second time, third time, fourth time Let me save and run, alright, it seems like we have our first square. OK, so the next step is for us to understand how Python knows about this thing called the turtle. But before we do that, here's your task. I want you to reproduce this entire code on your computer. And oh, and by the way, you can customize this turtle. You can change it's shape. You can also change its color, and you can change the speed at which it moves. Let me quickly save and show you the output. Alright. So it seems like we've changed a few things about the turtle. Its color, which is yellow now, and shape and also its speed. Oh, by the way, if you need more information about how to customize your turtle. There are some helpful links in the instructor notes. After you have created your own custom square I want you to take a screenshot of your output and post that on the forum. Make sure to check this box before you continue. Thank you for finishing your assignments. I will be providing feedback on the discussion forums periodically. Okay, so I now want to talk about how Python knows about this thing called the turtle. Well, inside the Python Standard Library, there is this file called turtle. Turtle with a lowercase t, and inside that file is something new. And that something new is called a class. A class Turtle with an upper case T. Now, this is a little different than what we have seen thus far. What we have done thus far is some sort of file, like web browser, dot some sort of function, like open. But we haven't seen this thing called a class. Which begs the question, what is a class? For now you can think of a class as a neatly packaged box, that puts things together really well. And it allows us to write code like turtle.Turtle, with these strange looking brackets. As if we were calling a function. In fact, when we do it on this piece of code, we are in fact calling a function, a function called init which is defined inside the class Turtle. Init stands for initialize, and what it does is it creates space in memory for a new instance or a new object of the class Turtle. This instance we called brad. Brad can now access all of the rest of the methods that are inside class Turtle. Like forward, and right. Forward makes brad turn forward, and right makes brad turn to the right. Don't take my word for it, lets look for them in the documentation. So here we are in the Python documentation, and if I scroll down, I can find a module named turtle. There is a lot of helpful information about the module here, including information on why turtle is actually called turtle. And if I scroll down on this page, I will find a class Turtle. Turtle with a capital T, which is the class we used. There it is. I'm going to go back, and if I scroll down again, I can see all of the methods we use. Like forward, right, and a lot of others. So, now that we know where turtle exists within Python, I want to return back to our code. By the way, I had to reduce the font size of the code a little bit, so we could see all of it in the same frame. Now, what we have done thus far is, created an instance of a class called turtle, we called it brad and brad draws a square. If we can do that, we can make another example or instance of the class turtle. And we can call it, let's say, angie. There it is. Now, I want angie to draw a circle. A circle of radius, let's say, 100. I also want angie's shape to be in the form of an arrow and I want angie's color to be blue. There it is. So, let me save and run this thing and see how it looks. Aha, it seems we have brad making a yellow square and angie making a blue circle. It seems like we are getting somewhere. Now honestly, if I showed this code to my computer science professor from college, she would be really upset. Can you guess why she would be upset with the code we've written this far? Submit your answer in this box. Well, I can think of at two reasons why my computer science professor from college may be upset with the quality of this code. The first is that I'm doing something repetitive inside my code. Things like move forward, turn right, move forward, turn right. I do that four times, but I don't use any sort of a loop. Another reason is that the name of my function is draw_square. Which I do. But then I go ahead and draw a circle inside that function also. That doesn't seem quite logical to me. So, based on those two ideas, what changes would you make to the code that we've written thus far to make it more usable? I want you to make those changes and then upload a screenshot of the code to the discussion forum. Here's an extra credit assignment, which is to create a third turtle, and this one will draw a triangle. Once you are done with that, I want you to upload a screenshot of the new output to the discussion forum. Make sure you check this box after you've submitted your responses to the forum. So I made a few changes to the code, see if you agree with them. In the draw square function, I now use a loop, and this loop does my repetitive tasks, tasks like move the turtle forward and turn it right, and this loop runs 4 times. Then I created a new function called draw art, in this function I create the window screen. This is the screen that has the background color as red, and then I create my first turtle, which I named brad. I change brad's shape, color and speed, and then I call the draw square function, so that I can actually draw my first square. After that, I create my second turtle, angie. And here are angie shape and color, and then angie draws a circle. And then towards the end, I call the draw_art function which is right here. So let me go ahead and save, and run this program to make sure everything is running fine. And there's our two turtles. One drawing a square, the other one drawing a circle. So, before we continue with this project, I want to highlight a few new words that we have used in the code thus far. We've identified turtle as a class. And brad and angie as instances of that class. Now, I want to take a moment and talk about these new words. You can think of a class as a blueprint of a building. Now, a blueprint as we know, contains certain pieces of information about the building. For instance, the height of the building, the number of rooms in the building. We also know that the same blueprint can be used to build multiple different buildings. For instance, an office with yellow walls, and a residential complex with blue walls. A class is like a blueprint. So let's take the example of class Turtle that we've used thus far. A class Turtle, much like a blueprint, contains certain pieces of information about the turtle. The turtle's size, its color, the fact that the turtle can move forward and turn right. And from this class, or blueprint we can create multiple different instances of that class. For example, Brad is an instance of class Turtle that draws a yellow square, and Angie is also an instance of class Turtle that draws a blue circle. So, in summation, you can think of a class as a blueprint, and you can think of its objects as example or instances of that blueprint. Okay, so here we are, back at the code. For now, what I will do is, continue to draw the square, but I will comment the rest of the code out. So, let me go ahead and do that. Let me quickly save, and run to make sure everything's running well. All right, the program still seems to be drawing a square, which is good. Now, if you remember the original challenge, It was to draw a circle, out of squares. And thus far, all you've done is just draw, just the one square. So, given that, here's a question for you. How would you've build on the code that we've written thus far, to draw this image. Now, don't worry about writing code right now. All I want you to do, is identify in plain simple English, the steps you would take to solve this problem. You can submit your answers on the discussion forum. Once you're done, make sure you check this box before you continue. So, one way of doing this is to draw a square and then turn a little bit to the right and then draw another square. And then turn a little bit to the right again and then draw another square. And keep doing that. Let's build that. So, here's the piece of code that draws a square. And after I've done that, what I want the turtle to do is turn a little bit to the right. So, let me add a piece of code that says brad.right, let's say by ten degrees. Now, because I want these two statements to happen over and over again, I will put them inside a loop. So let me do that. So I'm going to add a for loop by saying for i in range, let's say this loop runs four times. I'll add a colon and then put these two things inside the loop. Let me save, and run, and see what happens. Ah-ha, so here is the output. We've drawn two squares, three squares and it should stop, there it is four squares. So all I have to do now, is let the turtle keep going around the circle, which has 360 degrees. So, this loop should run not four times, but 36 times instead. Let me save and run that. All right. There it is, folks. A circle made out of squares. Now I'm going to put some background music behind this video and let you enjoy our final creation. [MUSIC] [MUSIC] Congratulations on getting this far. Now that you know how to draw things using code, here's your mini project. We want you to write code to draw a flower, or some fractals, or write your initials. Once you're done, post a video or a screenshot of the output of your code on the discussion forum. Check this box after you've submitted your responses on the forum. Thank you for submitting your responses on the discussion forum. Now, we've written three different programs in the course thus far. And at this point I want to ask you again, how confident do you feel in your ability to write computer programs? Here are some answer choices. Thank you for sharing your answer. Now that we've used classes for the very first time, I want to highlight something that took me a really long time to understand when I was in college. When we wanted to use functions previously, we wrote code like webbrowser.open. But when we wanted to create instances of this class, class turtle, we wrote code that said, turtle.Turtle. Now, look at both of these statements. They look rather similar. It seems like we're calling a function in both of these cases. But something different is happening behind the scene. When we call webbrowser.open, all we are doing is calling a function. No big deal. But when we call turtle.Turtle, the init function defined inside class Turtle, that's the function that gets called. And it creates or initializes space inside memory for a new instance which we called brad. Even though it seems like we called functions in both cases, we called open in the first case and the function init, in the second case. Not all functions are created equal. When we called webbrowser.open, all we did was call a function, but when we called turtle.Turtle, it in turned called the init function which created or initialized space in memory that did not exist before. So, that concludes our first example of how to use classes. Let's look at a few more examples. So, we have seen one example of how we can use classes to design geometric shapes, let's look at another example of how classes can make things easier. So we've all used our phones to send out text messages. But sometimes there is a need for code to send texts. Consider the following. Taxi companies send out text messages to their passengers informing them of the cab driver's location. Dating websites help potential couples communicate with each other while using texts, but without sharing phone numbers. To make authentication more secure Gmail sends its users a security code via text message. This the Gmail user can then use in addition to their password. Retail organizations communicate daily deals to their customers, while using texts. This use case seems important to a lot of different companies, but what does it have to do with classes and objects? So, I wrote this program that sends out text messages and here is the phone where I want to receive my text message. So, let me just go ahead and run my code. In three, two, one. Oh, seems like I have a new message, I wonder who that is from. The message says, my name is Ron Burgundy, cool. Let's build this program. Now our goal is to send a text message using code, and I know of a Python package that does exactly that. It's called twilio. And I am going to place twilio on the board. Twilio does not come with the Python Standard Library, which is why I have kept it outside of the yellow background. Twilio is one of the thousands of external Python packages that are available for you to download and use, and there is a link in the instructor notes that points out some of the more popular external Python packages. For now what we are going to do, is being by downloading twilio. Now, here's a question for you. Were you able to download Twilio successfully? If not, don't worry. We are here to help. Tell us about your experience. You can even ask us, or other students in the course, a question on the discussion forum. Okay, let's begin writing code. Now, the first thing I've done is created a new file called send_text.py. And as you can see, this file is empty for now. Then, if you go to Twilio's installation page, oh by the way, this link is also available on the instructor notes. If you scroll down on this page, you will notice that Twilio has provided some sample code that allows us to send text messages to our phone. Now, I just want to run and see if this code even works. If this program does work only then will I try and understand how it actually sends a text message to our phone. So, for now, all I'm going to do is copy this code and go back to my syntax program and paste that code. Okay, so it seems that the code is importing Twilio. Although it is a little different then what we have seen thus far, there is this keyword here called from which we haven't seen before, I will return to this later. Okay, if you read the next two lines in the program they talk about account sid and authorization token. Now, these must be for Twilio to figure out who I am. Almost like my username and password. So, let's go to the Twilio website and figure out these two values. Okay, so here I am on the Twilio signup page. Oh, by the way, this link, its also available in the instructor notes. Here I will signup for free. Twilio also wants my phone number, which I will provide. Now, I'm currently located in the United States. Make sure you select the country where you are located. Then Twilio sends me a verification code on the phone that I had previously registered, you will get one on your phone too. I will enter that code in this box here. Okay, so they're giving me a phone number, I'm not quite sure I understand that just yet, but I will go ahead and continue. Alright, it seems like I can do a bunch of things here with my account, but I'm really looking for my authorization token. Where is that? Hm? Let me just go to my account. ha! Here they are. Here's the Account SID, and here in the Authorization Token. Now, I'm going to copy and paste both of these into my program. So here I am back at my code and I have pasted both the account_sid and the Authorization Token, into my program. Now the next thing I want to change, is the body of the text message. I will change it to something I actually want to send which is, My name is Ron Burgandy? With a question mark. Now for this 'to' number the commons in the code suggests that I have to replace it with my phone number. So, I'm going to select and change this to my phone number with my country code. This by the way is also the number I registered with twilio previously. Then they say the from number, I have to replace it with my Twilio number. Now, I remember that Twilio actually gave me a phone number, but I didn't quite save it. So, if I go back to my accounts page, and click on Numbers. I can get my phone number from Twilio. All right, back to the code and now I can change that number along with the country code. Next I will save and run my program and this is the phone that I'm going to receive the text message. So I'm just going to give my program a few seconds op, there it is, there's my text message. Let me read it. You probably can't read it but it says my name is Ron Burgendy. Alright this just blows my mind that a few lines of code like this can help us send a text message. Okay, so now that this code has worked, let's figure out what's actually going on with this code. So now that our code has worked, let's figure out what's actually going on with this program. Now, the first thing that strikes me is this first line of code, which is from twilio.rest import TwilioRestClient. Now thus far, what we've been doing is statements like this, where we say import some filename. Like in this case, import turtle, but here we have this new word called from. So here's a task for you, we want you to find out what this Python keyword from means? You can enter your responses in this box. So the best way to find out about anything is to Google it. So I typed in Python keyword from. Here I scanned all of the results that were available, and then from there I landed on this web page. By the way the link to this web site is also available in the instructor notes. Now this webpage says that Python's from statement lets you import specific attributes from a module. So I guess it allows you to say from module or filename import something. So I guess our code that means, that from something called twilio.rest, we want to import TwilioRestClient. Now, this got me curious about what these things called Twilio.rest and TwilioRestClient were. So then I went back to Google and tried to find out how Twilio was actually implemented, so I typed in Twilio Python Code. Then I looked through these results and I got to this website called GitHub. Here I could read all of the code that actually makes Twilio work behind the scenes, by the way, this link is also available in the instructor notes. Now in the code for twilio I find that there was a folder called twilio so I clicked on it, now inside that folder is another folder called rest. And within rest there is a py on file which, if we look through, we will find that there is a class called class TwilioRestClient inside it. So when we write this line of code from twilio.rest import TwilioRestClient what we are telling the computer is, hey, inside Twilio. There is a folder called rest and inside that folder is a class called twlio rest client and we are going to use that class inside our code. And if we go back and look in our code here is how we are using that class twilio rest client. Now you know if we were writing this code from scratch we probably wouldn't have written this line of code. We would have modified it to say from twilio import rest. Now with this line of code, what we are telling the computer is, hey inside the folder twilio is another folder called Rest. Import that because we are going to use that in our program, and we know that inside the folder rest is the class TwilioRestClient. So I would now access that class by saying rest. TwilioRestClient. Let me save, and run this program one more time to see if it still works. All right? Here's my phone and let's see if I get a text message any time soon. [SOUND] Ah-hah! There's the text message, it seems like our program still works. So in the next video what I want to do is revisit the idea of how twilio, rest, and twilio rest client are related with one another. So here is a snapshot of our code. Now, we know that when we downloaded Twilio, we got, among other things, a folder called twilio. And inside that folder is a folder called rest. Inside rest, is a python file, which has a class called TwilioRestClient. Now, when we say rest.TwilioRestClient, with those parentheses after the class name, what we are really doing is calling the init function defined inside the class. And that creates an instance. We call that instance client, and then we do a bunch of stuff with that instance, like send SMSes. Now, we know that TwilioRestClient is a class. And we've seen another class before which is class Turtle. Let's figure out if there are any similarities between these two classes. So thus far, we have seen, two examples with classes. One, when we drew shapes using Turtles. And then the other one, when we sent out text messages using Twilio. Now, when we created shapes using Turtle. We hold a line of code that read, brad is equal to turtle.Turtle(). Now, what we are really trying to say with this line of code here, is that inside Python, there is a file called turtle, and inside that file, is a class called turtle. There it is. And when we try to access that class using this statement, specially with this, open, close brackets. What we are really doing behind the scenes, is calling the, init function defined inside the class. And what this function init does, is that it initializes, or creates space in memory for a new instance, which we called, brad. Brad is an object or instance of the class turtle. This instance brad, can then do things defined inside the class turtle, like, move the turtle forward. Similarly, when we, write a line of code that says client is equal to, rest.TwilioRestCclient(). What we are really trying to say, is that, inside Twilio, there is a folder called, rest. And inside that folder, is a Python file which has a class called TwilioRestClient. Now, when we call this line of code, the one where we access the class, TwilioRestClient(), with these open-closed brackets, what we are really doing, is calling a function,init. Defined inside that class TwilioRestClient. And what this function in it does, is again initializes or creates spaces in memory, for an object or instance of that class, TwilioRestClient. We call that object, client. The object client, can then do things defined inside that class, TwillioRestClient, like send smses or texts. So, in summation. You can think of a class, as a blueprint of a building. Now, this blueprint will have certain pieces of information about the building, like a number of rooms in the building, the area under the building etc. Now we can use the same blueprint, to build multiple buildings. For instance, a residential complex with yellow walls and an office building with, blue walls. Similarly, a class. Let's take the example of class Turtle that we've used thus far. Now, this has information about the turtle, for instance, how to make the turtle move forward, how to make the turtle turn right,etc. Now, we can use one class as a blueprint or a template to create, multiple instances like Brad and Angie. Now, these instances. They can do things that are defined inside our class or blue print. Things like, move forward, turn right, and draw a circle. Now, recently, we've seen another class, and this class is called Twilio Rest Client. Which I have just abbreviated here for lack of space. This class, has information about how to connect with Twillio and send a text message. And from, this blueprint. We can then create an instance called, client. Client can then do things that are defined inside the class, like, send out texts. So you can think of a class, as a blueprint, which have some basic information defined inside of them. And you can think of its objects, as examples or instances, of that blueprint. Congratulations on finishing another project. Here is your assignment. Now that we've seen classes in two different projects, for instance with Turtle and Twilio Rest Client, we want you to answer the following questions on the discussion forum. The first question is, what is a class? The next one is, what is an instance of a class? And finally, thus far we have compared a class to a blueprint. Can you think of another analogy to explain classes? Make sure to check this box, after you have submitted your responses on the forum. So, we've seen two ways in which was can use classes from within the Python standard library. Let's look at another example of how classes can make things easier. Today was an embarrassing day. At 8 a.m., my boss sent out an email to everyone in the company, asking for volunteers to help him proofread some marketing documents. Since I had some time available, I replied by saying, I can take a shot at it. Or at least, that is what I wanted to say. I misspelled one key word in that sentence. And instead, wrote something really embarrassing. Why do the i and o keys have to be so close to each other on my keyboard? I was so embarrassed. I wish my spell checker caught curse words to alert clumsy writers like myself. Let's write a program that detects curse words in a text. But before we do that, let me ask you, have you ever been in a situation like this? Have you ever sent or received a message that you felt was embarrassing? If so, we would love to hear about it. You can share your experience with us on the discussion forum. Check this box after you've submitted your stories. Thank you for sharing your stories. So, here is a document with some text that I want to check for profanity. Now the program that I've written, reads the text from this document, and then scans it for curse words. And when I run my program, which by the way is hidden behind this graphic, it says that this document has no curse words. But if I go back to my document, and add a curse word, there it is. Let me save this document. And now if I run my program again, it detects the curse word. Let's build this program. Now, before we write this program, let me ask you. If you were writing the Check Profanity program, what steps would you take to get to the output? Now, don't worry about writing code right now. In simple English, just describe the steps you would need to take to get to the output. Once you have submitted your responses on the forum, make sure to check this box before you move on. So in my mind there are two main steps in making this work. In the first step, we have to read text from a document. So let me write that down. Read text. And in the second step what we have to do is check this text for curse words. So let me write this down also. Check text for curse words. Lets begin by reading text from a document. So, here is our plan for the project. I will start with step one, which is reading text. Now, here is the file I want to check for curse words. For now, I have some famous movie quotes in here. By the way, this file could have contained some other text, like the draft of an email or an article you wrote. I have named this file movie_quotes.txt. Now, if you want to use this exact file in this program. It is available for you to download in the instructor notes. But you should feel free to use any other text file on your computer as well. Okay, let's start writing code. Now, I created a program called check_profanity.py. You could have called it something else as well. Inside it, I created a function called read_text, which is empty for now. Now, I know there is this function in Python called open, which allows you to work with files on your computer. This function takes in the address or the location of the file you want to open. So, on a Windows machine, I will browse to my file, which is movie_quotes.txt. Copy its location. Paste that. And then add the file name I want to open, which is movie_quotes.txt. Now, if you're on a Mac, there is a helpful document in the instructor notes for you. That document will tell you how to get the location of this file on a Mac. I will refer to this file as quotes. Now that I have a way of accessing movie_quotes.txt, I will use a function called read. So, I will say, quotes.read. This will allow me to read the contents of movie_quotes. So, let me save that in a variable called contents_of_file. Let me print out those contents. And it's also a good convention to close out any file that we've opened through the program. Okay. Now, I'm going to save and run this program and see where it gets us. And boom. Here is that output window with all of the movie quotes that we had read from the text file. Now, I don't know about you. But it just blows my mind that we can read from a text file with only a few lines of code. Okay, so I am back at our program. Now, before I continue to execute any more of plan. Let's find out a bit more about this function called open. So I'm holding in my hand, open, the function that we just used in our code. Now, if you were to take a guess, were would you place open, in our model of the Python Standard Library, would it be inside OS, or would it be in a space all by itself, or would it be outside the Python Standard Library? Where would you place open? Now the first thing to notice about open is that we did not import anything in our code to this function. In contrast, when we had to use a function like rename. We said, import OS, but not with this function. This is because functions like open are so commonly used in Python that they are always available. Don't take my word for it. Let's look for it in the Python documentation. So, here's the Python Standard Library. Now, if I scroll down a bit, I will come across a set of functions called the Built-In Functions. If I click on them, I'll find a bunch of functions which are always available in Python. And one of those functions is open. If I click on open, the documentation says that it opens a file. Which is exactly what we did in our program. And if I go on to read, it suggests that open returns an object of the file type. Now this word object is extremely curious. Where have we come across this word object before? Lets investigate. So, the Python Standard Library suggests that the function open returns an object of the file type. Now this word object is really interesting because we have seen it before. Remember the time when we were drawing squares using the class Turtle? We were writing lines of code like this. This meant that Brad was an object or instance of the class Turtle. Similarly, when we write lines like this, which is quotes equal to open file location, and the file, in our case, was a movie quotes file. We are saying that quotes is an object or an instance of file. Now let's think for a moment, what happens when we run this line of code. When we do run this line of code, a function called _init_ is called from inside the class Turtle. And what that does is that it creates space in memory for the object Brad. Now in the case of open, even though on surface it looks like we are merely calling a function, and that there is no class involved. If you look deep down inside the code for how open was actually implemented inside Python. We will find that open, in turn, is calling some init-like function to create an object of file. All right, that's enough jargon for now. We will talk about instances and objects a little bit later in the course. For now, we can rejoice in the fact that part one of profanity checker is done. Now, before we write the second part of this program, I want you to experiment with built-in functions. Pick anyone of the built-in functions, read through their documentation. By the way, the link to this page is available in the instructor notes. Use your chosen built-in functions in a new program and then share your experiences on the forum. You should answer questions like: Which built in function did you actually decide to use? What did your program do? And what problems did you run into? By the way, being able to read documentation and experimenting with Python, is a big part of learning how to program. Once you've posted your responses on the forum, feel free to check this box before you continue. The next step in our plan is to check the text that we've read thus far for profanity. Now, to do this, I searched the Internet and found this website called wdyl.com or what do you love. This website was developed by Google and one of the things it does is that it can tell us if a word is a curse word or not. So, if I go to this website's profanity link, which is profanity question mark q, by the way, this link is also available in the instructor notes and try out the word shot, S-H-O-T and see what happens. ha, the website's response is false which means that this word, the word shot, is not a curse word. But if I change this word by just one letter and hit Enter. The response is a little bit different. I can even give this website a sentence or a paragraph. So let me, in place of saying one word, say, I can take a shot at it and hit Enter, and the response is false, which means that this sentence is fine. But, if I change one word in that sentence, so I will say, I can, well, you know, and then hit Enter. Ooh, the response now is true, which means that there is a curse word in this sentence. [SOUND] All we have to do now is do what we've been doing, but using code. So here we are, back with our code. Now, the only new stuff that I have added to the code thus far, is this function called, check_profanity, by the way, this function is empty for now. It takes in, one argument, or one piece of information, which is the text we actually want to check for profanity. Now, I know there is this module in Python called, URL lib, which helps us get information from the internet. It, has a function called, URL open, which takes in a link to a website. So here, I'm going to give it the full link, to the the what do you love website. [SOUND] And add to that the text we actually want to check for profanity. [SOUND] Now, this function URL open. Is going to help us make a connection, to this website. So, I'm going to call this, [SOUND] connection. Now I recognize that you may not be able to read the entire line of code that we've written here, so I'm going to temporarily, put in a return statement there. So you can read the whole line of code. And then I'm going to restore the code. Okay, let's continue. Now, I want us to notice, that this function URL open, is quite similar to the other function that we have used in this program, which is open. Open, helps us read contents from a file on our computer. URL open on the other hand, helps open a connection to a website on the internet. Then we can do things with that connection. Things like, read a response from that website. [SOUND] I'm going to call this response, output, and then print the output. After I've done that, [SOUND] I will close the connection. So now, it's time for us to call this function check_profanity, and I will do that after I have successfully read the text from a file on my computer. [SOUND] So, let me add code to call the function, check_profanity, and to it, I will pass in the contents that we previous read from the file. I am going to save our program. Now if all goes well, the read_text function, will read the contents from the movie_quotes file, and then the check_profanity function, will check that text for curse words. Let me run my program and oh, it seems like, I forgot to import URL lib. So let me go back to the code and add that to the very top. [SOUND] There it is. Let me save my program, and run again. And this time, the program worked and the programs response is false, which means that the movie quotes, have no curse words in them. Now, if I go back to my movie quotes file. And change just one word, let me save this file. And run my code one more time. Now the response changes to true, which means that there was a curse word in our movie codes file. Alright, so it seems like we're getting very close to finishing this code. But before we do, [SOUND] I want us to figure out. How Python knows about this think URL lib and URL open, lets find out. So, I'm holding in my hand urllib and urlopen. Now, if you were to take a guess and place these two in our model of the Python standard library. Where would you do it? Feel free to provide your answer in the box provided. So, much like webbrowser, time and OS, urllib is also a module or a file in Python. And urlopen is a function inside it. Don't take my word for it, let's look for these in the Python documentation. So, here is the Python Standard Library and if I scroll down here, I can find a module named urllib. Let me click on it and here it says, this module provides a high-level interface for fetching data across the World Wide Web, which is just a fancy way of saying, this module helps us get data from the Internet or websites. And if I scroll down on this page. I can find the function urlopen. So here I am, back at the code again and if I scroll down, you will notice that I made one change to the code, which is, that I added an if statement to print out more easily readable output messages. Let me run the code now. Aha. The program says that there is a profane in the movie_quotes document. And if I go back to my movie_quotes document, I can find the culprit word. So, let me go ahead and quickly change that. So, I will change that back and save this document and now, if I run my code, I get a message saying no curse words were found. Alright, the second step in our program is also done. So now that we are finished designing our project, here is your assignment. We want you to show the program we've written together to a friend or a colleague. Now, you can continue to use the Profanity Editor website which is wdyl.com, or you can use some sort of a different internet service like Pirate Speech. By the way, the link to this is available in the instructor notes. While you are doing that we want you to use your smart phone to record a video of the conversation with your friend or colleague. And then we want you to share your YouTube video with us on the discussion forum. Make sure you check this box after submitting your responses on the forum. Now before we wrap this project up, I want to take a minute to connect some of the ideas that we have seen in this lesson thus far. We started out by creating squares and we wrote a piece of code that said brad is equal to turtle.Turtle. What we were really doing behind the scenes there is creating an object or an instance of the class turtle. What we could then do with that instance is things like brad.forward. We then wanted to do things like read contents from a file on our computer, so we wrote a piece of code that said quotes equal to open a file location. What we were really doing behind the scenes there, is create an object of the type file. We could then do things with that object like quotes.read. And when we wanted to access a website on the internet, we wrote a piece of code that said connection is equal to urllib.urlopen. Now this piece of code also returned a file-like object or instance and we could then do things with that instance, like connection.read. In all three of these examples, we created instances or objects and then we used those objects. Now some of you may say that in the profanity editor example, all we used were functions. Functions like open and URL open and that there was no class like we saw in the previous example with turtle. Well even though on surface it looks like we did not use any classes in the profanity editor example, if you look at how functions like open and urlopen are actually implemented in Python, we will find that some classes init like function is being called to return these objects. Okay, let's look at one more example of how to use classes. Things will get a lot clearer after that. So we started out this course using functions. In lesson one, we built a couple of different projects. Then, we came across a scenario where using functions didn't quite work really well. This was when we were trying to build a movie website. This led us to lesson two, where we were introduced two classes and we built a bunch of different projects using classes. Here in lesson three we will write our very first class, and we will return to our movie website example. Let's begin. Now the output of the program we are about to build will look a little bit like this. A movie website with all of your favorite movies,.and if you click on one of them its trailer will play. [MUSIC] Let's build this. We will use classes to build this movie website. Let us begin, by recalling what we already know about classes. Remember the blueprint analogy? Previously, we had compared a blueprint, to a class. We had said that a blueprint of a building, contains information about the building. Like the number of rooms in the building. The height and the weight of the walls. Now, we can use one blueprint to build several buildings. And these buildings we call instances or examples of that blueprint. Classes are like a blueprint. Now we've seen previously that a class like Turtle, contains information about what a Turtle can do. For instance, move forward, turn right. And we use that information to create multiple examples or instances of that class. We call them Brad and Angie that drew different shapes. In the same way, we now want to create a class called Movie, which will allow us to create multiple instances of itself, instances like Toy Story and Avatar. So then the next big question in front of us is. What data should this class Movie contain? Now I'm going to present a list of data points for you, that you can consider. Here they are. Which one of the following do you think the class movie, should remember for each movie? Check all of the boxes that you think the class Movie should remember. So the truth is that the class movie can contain whatever we want it to contain. And in this case, I will pick the movie's title, its youtube_trailer, its reviews, the storyline and its poster_image. Now that decision will mean, that if I said something like toy_story.storyline. The program will print this. A story of a boy and his toys that come to life, and if I said, avatar.show_trailer, the program would play avatar's YouTube trailer. So, in submission, when designing the class Movie, we probably want to remember data like the movie's title, its storyline, its poster image, and the link to its YouTube trailer. And one thing we may want to do with this data, is to have a show trailer function which opens the movie's YouTube trailer. Okay, let's turn this design, into code. Okay, so the design of our class Movie, is here on the top right, [SOUND] and I'm going to begin, with a blank programming file. I have named it, media.py, and it is saved inside a folder called, movies. Now, to write a new class, [SOUND] I will used the Python keyword, class. And I will name it, Movie. You've probably notices, that the first letter of the name of the class M, is in uppercase. Now, this letter doesn't necessarily need to be in uppercase, but, the Google style guide for Python suggests that it should be. Now, what is this thing called the Google style guide for Python you ask, Well, let's Google it. The first link here looks good to me. Now, this Style Guide, provides conventions to programmers all over the world. On how to write their programs. If you scroll down a bit You will notice that there are conventions on everything, from how to name things, to how to write comments. By the way, the link to this webpage, is available in the instructor notes. I recommend that you read through this document. If you click on this link called Naming, you will notice that, when defining a class name, Google recommends that the first letter of that name be in capital letters. Okay, back to the code. Now, thus far, we've encountered one new key word, called class. In fact, we are going to come across several new words in this lesson, and I want to list them all, in one place for handy reference. The word class, is the first one on that list. We will review, all the words on this list before we end this lesson. So, you may have noticed that our class, is empty thus far. Now, to figure out what I want to do next with it, I will go back to my design. So, here I am, back with my class design. Now, I know that eventually, I would want to create multiple instances of the class movie. Instances like, Toy Story and Avatar. I also know that I have previously created instances of class Turtle. Instances like Brad, and to do that, I had to write a piece of code that read, turtle.Turtle, so I guess I will have to write a piece of code like this, to create Toy Story, an instance of class Movie. Let's do that next. So, I will return back to my code. And here, I will attempt to make an instance of class Movie, in much the same way we did for class Turtle. I will start by creating a new Python file. I will then Save this file, in the same folder as my previous Python file. And I will call this new file entertainment_center.py. So, here are my two Python files that I have created thus far. Here's the first one, where I began to define the class Movie. It was called media.py. And here is is the new file called entertainment_center.py. Now, here in this new file, I will say, import media. Now notice that this is my media file, which is where I was beginning to define my Movie class and therefore, with this line of code, I am telling my program, hey here, I want to use the contents of my previous Python file. Then I will go on to say toy_story is equal to media.Movie. So, you may notice here that media is name of my previous Python file and Movie is the name of the class that's defined inside that file. One quick side note here is that I did not have to create a new file. In fact, I could have written this entire piece of code right here in my previous file. But it is good practice to keep the class definition in one file and to call your class, or to use your class from another file. Okay, let's continue. So, there is one thing I want to highlight here. Which is that this line of code is pretty similar to how we created the turtle brad. In both cases, I am saying, some module or file name dot a class name. Now, the next thing we have to do is figure out exactly what happens when we run this line of code. One way to do that is to remember what happened behind the scenes. When we created the turtle brad. So, let's investigate that together. Do you remember what happens when we run the following line of code? Here are some answer choices. A function named init is called; it initializes or creates space in memory for the new instance brad. Or, a function named D-E-L, or del it's called, it deletes the instance brad. A function named cmp, or compare is called. It compares the instance brad to angie, or, I don't know. Tell us what you think. So to find out what happens when we run this line of code, we will go back in time and look at a video from a previous lesson when we were drawing shapes. For now, you can think of a class as a neatly packaged box that puts things together really well. And it allows us to write code like turtle.turtle with these strange-looking brackets as if we were calling a function. In fact, when we do run this piece of code, we are, in fact, calling a function, a function called init, which is defined inside the class Turtle. Init stands for initialize. And what it does is it creates space in memory for a new instance or a new object of the class Turtle. This instance, we called Brad. Okay, so we are back to the present time. Now, we started out by defining a file called media.py. Let me place it up on the board. Notice that I place this file outside the Python standard library. Inside that file, we then defined a class called Movie. After that, we wrote a line of code that said media.movie. And what that did, was that it called the init function Define inside class Movie. And that created a new instance. That instance we called Toy Story. So to summarize, this function init initializes or creates space and memory for the new instance Toy Story. By the way, this new function init, is also called a constructor because it constructs space and memory for the new instance, which in this case happens to be Toy Story. So thus far, we've encountered two new words that we can add to our new word list. The first one is instance, which in this case, happens to be Toy Story. And the second one is a constructor, which in this case, is the function init. Now, we will revisit these words soon. But for now, let's define init. So, here I am, back at the code, and here I can see my class movie, and within it I will begin to define, [SOUND] the function, init. Now, there is something very curious about this function already, which is that, there are two underscores on both sides of the word in it. These underscores are a way for Python to tell us, the programmers, that hey, the name init, is essentially reserved in Python, and that, this is a special function or method. What's special about init? Is that, it initializes or creates space in memory. To remember details like title, story line, et cetera, for new movies that we are about to create. Now init, takes a few pieces of information or arguments. The first of which, is always the python keyword, self. Now, what is this thing called, self, you ask? Well, you can think of self as itself, or the instance being created. So, when we run this line of code in our other Python file, by the way, just to remind you, here we are trying to create a new movie called, toy_story. And when we run this line of code, we know that the __init__ function inside the class Movie gets called. Self, in that case, points to toy_story. Now here, I have a confession to make. I remember when I was first learning object oriented programming years ago in college. This concept of self, was really difficult for me to understand. If that is the case with you, don't worry about it too much for now. This will get, really clear when we learn this entire piece of coding a few seconds. In any case, let's add the keyword self, to our list of new words. Okay, I'm going to go back to the class movie, and continue to define the function, init. Now, we want init, to initialize pieces of information like title, story line and others that we want to remember inside our class. Here's a way to do that. I will say, self.title, then self.storyline. [SOUND] The next one is, poster_image_url, and finally, trailer_youtube_url. Now, we have to somehow initialize these variables, with information init is going to receive. And in particular, it's going to receive, four pieces of information. The first of which is, a movie title, [SOUND] next is, the movie storyline, then the poster image of the movie, and finally, the trailer on YouTube. So,get this, once I've received these four pieces of information as arguments to the __init__ function, I can initialize my Movie variables. Here's how to do that. self.title, is the movie title. Self.storyline, is the movie story line. Next is, [SOUND] the poster image. And finally, [SOUND] the trailer on youtube. Now here, I have a confession to make. Which is, that we've written a lot of code that looks new and strange. Well, the one thing I can say is that, we should all just take a pause and a deep breath together. [SOUND]. For now, all I want you to do, is pause this video, and write down this code on your computer. All of this code will make sense as soon as we run this program. Now, there is one key point I would like to highlight, before I execute this piece of code, which is, that if I go to my other Python file, which is entertainment_center.py. And run this piece of code. It will throw an error. The error will happen, because when we try to create the movie, Toy Story, the init function gets called, which is now looking for several arguments or pieces of information, although, we are not sending it any information whatsoever. So let me change that. Now, I know that first argument for the edit function is, self. Which is added by default in Python. So I will skip it. The next one is movie title, which I know is, Toy Story, so I will add that. After that, is the movie storyline, so I will type that in next. A Story. Of a boy and his toys that come to life. The next one is, the power image, so I will add that. [SOUND] I had previously gone on Wikipedia and found a link to, Toy Story's poster, so I added that and finally, the Youtube trailer, which I will add also. [SOUND] There it is. Now, let me just scroll back so we can see the beginning of the code. Here, I recognize that you can't see all of the code, so what I've done is, take an image of the code, and put it in the instructor notes for you to look at. All right, the last thing I'm going to do here, is type Toy Story's story line. Let me save this file, and then go back to my class Movie file, and save that one also. And then come back again, to my entertainment_center.py file. Now here, if everything goes correctly, my program should print out, toy_story.storyline. Let's run it. And there it is, Toy story, storyline is getting printed. Okay, so, in the next video we are going to see what happens behind the scenes when we run this piece of code. Okay, so here is the code for the class Movie that we have written thus far. Now, bear in mind, that you may have to go into full-screen mode in order to see all of the details here properly. And I'm really curious to figure out what happens behind the scenes when I run this line of code. What happens when I create an instance called toy_story by providing these four pieces of information or arguments. These pieces of information are the name of the movie, its story line, the link to its poster, and the link to its YouTube URL. Now clearly, the last two of these are not really links or URLs just yet. They are English phrases and I did that because there wasn't enough space on the screen for me to add the full links or the URLs to the poster and the YouTube trailer. So, the first thing that happens when we learn this line of code is that the init function gets called. And the init function, you will recall, is the function we defined inside class Movie. Self, in that case, is itself or the instance being created, which is toy_story. The next argument is movie_title whose value is Toy Story. Movie_storyline gets the value Toys come to life. The variable poster_image gets the right value. And finally, the trailer_youtube variable gets the correct link. Okay, so far so good. Now, once init gets called and all of these arguments receive their correct values, all of the variables that are associated with the instance toy_story, they get initialized appropriately and these variables, you may notice, are title, storyline, poster_image_url and trailer_youtube_url. At this point, if I try to print out toy_story.storyline, it prints out the correct value. All right, now that we know exactly what happens when we create this instance toy story. Let's go back to our design and find out what we have to do next. So here we are. Back to our overarching design. And you'll notice that, thus far we've created just the one instance of our class movie. And that instance is, Toy Story. The next thing for us to do, is create another instance of class movie. And this time we're going to create,Avatar. So, to do that, I am back here at my code. Here's the code for the class movie. And, here is my entertainment_center.py filewhich, is where I'm creating my first instance, Toy Story. Now, you may have noticed that I've reduced the font size of my code, this is so I can squeeze all of the code, in one video frame so you can see it properly. Next, I will create the instance called avatar, by calling media.Movie. The first piece of information I have to supply, is the name of the movie, which is Avatar. Next is its storyline, which is, a marine on an alien planet. That is followed by, Avatar's movie poster, which I will paste here. And the final piece of information is, Avatar's YouTube trailer, which I will also copy in. All right. So, here is our new instance, Avatar. Let's print out it's storyline next. So I will say, print avatar.storyline. [SOUND] There it is. I'm also going to comment out my previous print statement, which was printing out twice toy story, story line. So, there it is, let me go ahead and save this file. Now before I go ahead and run this program, let me ask you a question. What do you think, will be the output of this line of code right here? Now I know that the font of this code is really difficult to read. So what I'm going to do, is make it a little bit bigger. So here it is, the code in a bigger font size. Here is where we are creating the instance avatar, and here we're trying to print it story line. So, what do you think will be the output of the following code? Here are some answer choices. Alright. Let me go ahead and save this code, and then run it. Alright. There it is. The program is printing out the correct storyline, which is for the movie Avatar. Now next, what I want to do, is figure out exactly what's happening behind the scenes when I create the instance Avatar. Okay, so here is the code for our class Movie one more time, and now, I am really curious in figuring out what happens behind the scenes when I create the instance called avatar by providing these four pieces of information. These, by the way, are the movie's name, its story line, the link to the movie's poster image, and the link to its YouTube URL. By the way, the last two of these two things are clearly not links or URLs. They sound more like English phrases, and I did that because there wasn't enough room on the screen for me to add the full URLs or links. So, as soon as we run this line of code, the init function gets called. Self, in that case, is itself or the instance being created. Which is avatar. The variable movie_title gets the correct value, which is Avatar. The movie_storyline variable gets the correct value. The poster_image gets the correct value also. And finally, the trailer_youtube gets the correct trailer YouTube link. Okay, so far so good. Now, once init gets called and all of these four arguments receive their appropriate values, all of the variables that are associated with the instance avatar, they get initialized appropriately. So, at this point, if I say avatar.storyline, the program will print out the correct value. Okay, so now, I'm going to take a small step back and tie together a few pieces of information that we've been seeing. Here is our class Movie. And after defining the class Movie, I created two of its instances, toy_story and avatar. I could have created more instances, but for now, I've just created these two. Now, when I created these two instances, what I was really doing behind the scenes, is I was setting aside space for each instance. And within that space, each instance had their own copy of variables. These variables include title, storyline, poster_image_url and trailer_youtube_url. Here are toy_story's variables, and here are avatar's variables. Now, because these variables are unique to each instance of class movie, these variables are called instance variables. And that phrase, instance variables, is another new word that I will add to our list of words. So thus far what we have done, is we have defined the class Movie and then we went ahead and defined a couple of instances of that class, namely Toy Story and Avatar. Next, what I want to do is I want to run a quick little part experiment which is, what do you think will happen if I remove the keyword self. From in front of one of the instance variables. So let me just go ahead and do that right now. [SOUND] There. Now I want to think about this question. Here is the code for the class Movie one more time, and this is the self I'm wanting to remove from in front of storyline. And I want you to think about this question especially in the context of running this code, which is print(avatar.storyline). Once you have a hypothesis, I want you to enter it in this box. After you've submitted this response, I want you to make this change on your own computer and see if your hypothesis matches your result. So when we remove the keyword, self, from in front of storyline. Let me go ahead and do that one more time. What we are really doing is changing storyline from being an instance variable, accessible with instances like Toy Story and Avatar, to being a simple local variable inside the function in it. Now, I will still be able to access this variable, storyline, from anywhere inside this function in it. But not with an instance like Avatar. And since we are attempting to do that in this print statement, my hypothesis is that Python will throw an error and say that this movie object Avatar has no story line. So to check that hypothesis, I will Save my media file, and then go back to my entertainment center file and run that file. There is the error. Python says that Movie instance, in this case, Avatar, has no attribute called storyline. So, to correct this, what I will do, is go back to the code and add the self keyword in front of storyline, there. Okay, so here I am, at the original design of the class Movie, to figure out the next thing we have to do with our code. So thus far, what we have done is define the class Movie and taken care of all of the instance variables we want to remember. We also designed a couple of instances of the class Movie, namely Toy Story and Avatar. The one thing we still haven't done is define this function show_trailer(). Now, this function as its name suggests, will open a browser and play the trailer of a movie. So essentially, what we want to do is run a line of code like this: avatar.show_trailer(). And when that runs, we want it to play the trailer of the movie Avatar. By the way, a function that is defined inside a class and is associated with an instance is called an instance method. That is another new word for our list. More on these new vocabulary words soon. First, lets define show_trailer(). So, here is my code for the class movie, and behind it, is hidden the other programming file, where we have defined multiple instances of the class movie, namely Toy Story and Avatar. So, what I will do, is go back to my code for the class movie, and define a new function or method there called, show_trailer. Now, each instance method, whether it be init or show_trailer takes the first argument as, self. So I will add that. All, show_trailer has to do, is open the web browser, with the correct URL. And the link or the URL, is stored in the instance variable. Trailer Youtube URL. The way to access this instance variable, is through the self keyword. One last thing I need to make this code work, is to import web browser. [SOUND] There, let me go ahead and save this file. Now that we have defined the method, show_trailer. The next thing for us to do, is to call this method, using our other programming file. So I will go there, and here, I already have the instance or object called, Avatar. [SOUND]. So I will use it, [SOUND] Avatar, to call the show_trailer method. [SOUND] I'm going to go ahead and save this file. And then I will run it. [MUSIC] Wow, that was outstanding. So now that we've played Avatar's movie trailer, here's your challenge. I want you to comment out this line, the line that shows the trailer for Avatar. Then, I want you to create a new object, but this time of your favorite movie, and I want you to play its trailer instead. Here are the instructions one more time. Much like Toy Story and Avatar, we want you to create a new instance or object of the class Movie. Once you've done that, we want you to play a trailer of that movie using the new instance or object. And finally, we want you to share a screenshot of your program's output on the discussion forum. Now, in case you have a way to video record your computer screen, perhaps using a smartphone, you can also share a Youtube video of your output with us. Make sure to check this box after submitting your response on the forum. Thank you for sharing your responses on the forum. Now, in writing all of this code, we've seen a lot of new words. Let's review all of them. So here I have both of my programming files on the screen at the same time. Here's my first programming file where I'm making the class movie. And the second one, when I'm defining instances of that class, instances like Toy Story and Avatar. Now, you may have to go into Full Screen mode to be able to read all of the details on the screen. Okay, let's start reviewing all of the new words. So, we started out by defining a class. The class Keyword allows us to make classes. You can think of a class as a blueprint. And a class can have both data and methods. Now, we can create multiple instances of a class. In this case, we created instances like Toy Story and Avatar. We could have created many more. Now, when we create an instance of a class, instance like Toy Story, the classes constructor gets called. This is essentially the init method inside the class. It is here that we initialize all of the data associated with the instance. The constructor uses the keyword, self. Now, you can think of self as itself or the instance in question. So, when the instance Toy Story is getting created, self is Toy Story. All the variables associated with a specific instance are called instance variables. Now, these are unique to an object and can be accessed using the self keyword inside the class and the instance name outside the class. And, finally, all of the functions inside the class that are associated with an instance and have the first argument as self are called instance methods. So there you have it. All of the new words that we have learned thus far, right there on one screen. So now that we've learned, a bunch of new words related with classes and objects, we will move on to creating a movie website. And here is the final output that we are after. All of our favorite movies, on a web page. And as you have seen previously, if you click on anyone of these movies, we see its trailer. Let's build this. So here I am, back with my code. Now thus far, we've made only two movie objects. Toy Story and Avatar. I'm going to make a few more. In fact, four more movie objects. But before I do that, I want to make this window, a little bit bigger, so we can see all of this code really easily. Okay. So here are the two instances we have created thus far. Toy Story and Avatar. Now before I proceed, I will go ahead and comment ou the previous output statements that I created. This print statement and the show trailer method. So let me just add a comment there, [SOUND] and there. Done. Now, I'm going to add a new movie object, for a movie called, School of Rock. There it is. You will notice, that I have changed the name of the movie, its story-line, its poster image, and its future trailer values appropriately. Next, I will add another movie object. This time, for an animated movie called Ratatouille. Next, I will add a movie object called, Midnight in Paris. Now this, happens to be one of my favorite movies. And the final movie object I will add, is for a movie called, the Hunger Games. Okay, so thus far, we have created six movie objects. So far, so good. Now, to turn this into a movie website. You will need a piece of code that weed out. Now we call this code, fresh_tomatoes.py. By the way, this file is available for you to download in the instructor notes. Now before we use it, let's see what this file actually does. This file, fresh_tomatoes.py, has a function inside it called, open_movies_page. Let's look at this function a bit more closely. Now, what this function does, is that it takes in, a list of movies as input, and as output it creates and opens an HTML page or a website, that shows the movies you gave it in the first place. So what I'm going to do next, is use this file, fresh_tomatoes.py, and it's function, open_movies_page, inside our code. So the first thing you want to do is download this file, fresh_tomatoes.py from the instructor notes. Once you've downloaded it, make sure you save this file in the exact same folder as the Python file where we created all of these movie instances. Okay, so I'm going to begin to use the fresh_tomatoes file. And then call the function open_movies_page. Now I know that this function open_movies_page takes in a list on an array of movies. I do have a bunch of movies that I have created over here, but I do need to put them all in a list on an array. Let me do that next. So, I will define an empty array or a list called movies. There it is. And to this list, I will add all of the movies I had created previously. So, the first movie to add is toy_story, next one is avatar, next is school_of_rock, the next one is ratatouille, it's spelling is a little difficult. I think I got it. Next in line is midnight_in_paris and the final one is hunger_games. So there is our movies array. By the way, in case you need more information about lists or arrays, you can find a helpful link in the instructor notes. All right. Now that I have a list of movies, I can give this list as input to the open_movies_page function. Let me do that next. So I will provide movies as the argument to open_movies_page function. There it is. Now before I save and run this entire program, I know that I still haven't imported the file fresh_tomatoes in my program. So I will scroll all the way up, and import fresh_tomatoes. Notice that this line of code will work only if the fresh_tomatoes file is in the exact same folder as our current Python file. Okay. Time to save and run this program. And there is our movies website. If I click on any one of the links, its trailer will play. [MUSIC] So let me start this video by saying that in case this code did not work for you, ask us questions on the discussion forum. We are here to help. Now, you may be curious about this file called fresh_tomatoes, so let's talk about it next. Now, I want you to recall that this file, fresh_tomatoes.py, had a function inside it called, open_movies_page. Now this function, receives a list of movies, and then, creates and opens an HTML file or a webpage that showcases those movies. By the way, it stores this HTML file, in the exact same folder, as all of your other movie program files. So let me go to that folder now. And here is my movies folder, with all of my Python movie files right here. Notice that this is the HTML file that we just created by running our program. This is the file that actually showed us all of our movies and played the trailer. And here is the fresh_tomatoes Python file that you downloaded from our website. Let me open it. Alright. Here is the code for our Python file, fresh_tomatoes.py. Now, while I won't go through this entire code in detail, I encourage you to read through this program. I want you to understand how it takes in a list of movies and creates a website to show those movies. Now, we've added comments to this file that will make this code readable. Alright the next thing we want to do is we want you to share the movie website that you've created thus far. So here's your task, we want you to create your very own movie website with your favorite movies. Once you've done that we want you to share any one of the following two things with us on the forum. You can take a screenshot or an image of your movie website and share that with us on the forum, or if you have access to a smartphone we want you to record and share a YouTube video of you showing your movie website to a friend. Once you've submitted your responses on the forum, make sure to check this box. Thank you for sharing your responses with us. I look forward to going through all of them on the discussion forum. Now that we've finished building our movie website, I want to ask you this question one more time. How comfortable do you feel in your current ability to write computer program? Here are some answer choices. So we've come a long way in this course, from drawing shapes, to designing a movie website. And what we're going to do here in this lesson is talk about some advanced ideas in object-oriented programming. The first of which is called class variables. Let's talk about it next. So let's begin by recalling this thing called the instance variables. In the case of Class Movie, there were several of them, title, storyline, poster image URL, and trailer YouTube URL. Now, further recall that these variables are associated with every instance that we create. For example, both Toy Story and Avatar have their own copies of these variables. So I could print out Toy Story's storyline and I could also print out Avatar's storyline. Sometimes however, we need variables that we want all of our instances to share. So consider the variable valid ratings for a movie. This is an array or a list, of all possible ratings a movie could have. Now, it would not quite make sense to say, hey, here are Toy Story's valid ratings, and here are Avatar's valid ratings. They would essentially be the same for all instances. Thus, this variable is really associated with a Class Movie. And is therefore called a Class Variable. Let's see it in action. So here is the code for our Class Movie. And behind this Python file is the other Python file we created, where we made a bunch of movie instances. So I'm going to begin by making changes to my Class Movie. Now here I will define a variable called valid ratings. Now notice that this variable valid ratings is defined at the level of the class and is outside the init function. In order to start using this variable, we will begin by saving this file first. So next I'm going to go to my other Python file. By the way, this is the file where we are defining a bunch of movie instances. And here, I will scroll down all the way to the bottom. And comment out any sort of print or output statements. Now, I'm doing this so I can focus primarily on valid ratings. Now, here, I will try to print out the value of the variable valid ratings by saying, print, and the name of my class, which is media.Movie, followed by the name of the variable, which is valid. Ratings. There. Let me save and run this program. And boom. There it is. A list of all of my valid ratings. Notice how we use the class name movie to access this variable. This means that all instances of this class movie. Toy Story, Avatar and others, they can share this list, they can share this list to see if their individual rating is a valid one or not. Okay, so the one last thing I want to do is go back to my class movie. Now notice that the value of this variable valid_strings is probably a constant, by that I mean, that the value of this variable is probably not going change every now and then. When we define a constant like this, the Google Style Guide for Python recommends that we use all caps or an upper case to define a variable like that. I'm going to go ahead and save this file and then go back to my other Python file and change the variable name there as well. [NOISE] Let me save and run this program to see if it still works. And there it is, I get the correct output one more time. So now that we know a little bit about class variables, let's move on to another idea in object oriented programming, which is that in Python, all classes come with some pre-existing class variables. One of them is called doc. Now this variable has got underscores on both sides of its name. Let's see this variable in action. So here I am at the Python Shell window, with the Python prompt. And I can type a program in here like 2+2 and it gives me the correct answer. Now I want us to recall this class called turtle that we had used some time back while drawing shapes. So I can just import that class turtle here. There, then let me see what happens when I use the class name. turtle.Turtle. Remember this was the name of the module or the file and this was the class name. So if I use the class name with the prepackaged variable called doc. Let me see what it prints out. I get some kind of documentation on the class turtle. Now I wonder if I can use this variable doc with my class movie. So, I'm back to the code for the class movie and behind this file is my other Python file where, I'm defining a whole bunch of instances of class Movie. Let me go back to the code for class Movie here for a second. Now, here, I'm going to add some documentation. At the beginning of the class Movie. You may have noticed that I use triple codes, to define my documentation. Now what I can do with triple codes, is I can create documentation in multiple lines. For now I just have the one line. So I'm going to save this file, and then go to my other Python file. And here, I'm going to scroll all the way to the bottom, and comment out any sort of print statements. There. Now, I will try to print out my class Movie, which is accessed by saying, media.Movie. I will try to print out its documentation [SOUND]. There. Let me save and run this file. And there it is. The documentation for my class Movie. Notice how I accessed it though. I accessed it using my class name, which is movie and a predefined class variable, called doc. So, now that we have successfully used this variable called doc. I have a question for you. You know much like the variable doc, Python has a few more predefined variables these include the variable name and module. By the way more information about these is also available through links in the instructor notes. What I want you to do is read through the documentation in the instructor notes and then I want you to use these variables name. And module, in a new program. Once you have done that, please come back to the screen and check this box. So, now that we know a little bit about class variables, both the ones that we created and the ones that come by default or predefined in Python classes, I want to take a moment to talk about the next big idea in object-oriented programming which is called inheritance. Now, let's think about the meaning of this word inheritance and how we use it in the English language. You may have heard someone say that a child can inherit some traits from their parents. Things like the last name, the eye color, some money, if the kid is lucky. So, if we were to take this meaning of inheritance, like we commonly use it in the English language, and turn it into code or model this in terms of programming, we would create a class called Parent. Which would have some attributes like last name and eye color. And then we would make a class called class Child which would inherit these two things from the class Parent. Additionally, the class Child could have another variable of its own called number of toys. Now, you may notice that if we design code like this, we are already beginning to reuse code, which is a huge advantage of object oriented programming. Okay, so the next thing we are going to do is take our design and convert it into actual code. Let's do that next. Okay, so here we have our design of the classes we are going to build up on the top right hand corner, and what I've done thus far is created a new Python file, and I called it inheritance.py. Now, based on our design, I'm going to go ahead and create a class called Parent. [SOUND] There. The next thing to do is to initialize the variables of class Parent, variables like last_name and eye_color. So, to do that, I will define this class as init method or constructor. The first argument for this function, we know, is self. And the two instance variables for class Parent, we know, are self.last_name and self.eye_color. Now the init function we know will receive a couple of values as arguments. So, let me add them in here, and we will use these two arguments to initialize our instance variables. Let me do that next. Alright. You may notice that this piece of code is pretty similar to the code for class Movie that we have written previously. By the way, one new thing I will do here, is add a quick print statement inside the init method. It will print out, Parent Constructor Called. So, this print statement will explicitly tell us, each time the init method or the constructor of class Parent is called. Alright, to make sure that this code that we have written thus far actually works, let's go ahead and use this class. I will define an instance of class Parent and call it billy_cyrus, and will provide the two arguments that are necessary. The first of which is last_name and that happens to be Cyrus, and the next one is eye_color which is, let's say, blue. Now, a quick word of caution. Ordinarily, I would have kept these two things, the definition of the class Parent and creating its instances. I would have kept them in separate Python files. But I have kept them both here in the same file for ease of demonstration. Okay, so to demonstrate that the instance actually works, I'll print out its last name. Let me save and then run this file. And there's my output. It says the parent constructor was called. Which seems appropriate, because we created an instance called billy_cyrus. And as soon as we did that, the class Parent's _initl_ method got called, which had a print statement inside it. And then, we printed out Billy Cyrus's last name, which it printed out correctly. Okay, so far so good. Now, you'll notice that there really isn't anything new that we've done here thus far. The new thing we're going to try is called inheritance, which will happen when we create the class called Child. Let's do that next. Okay, so here is the code for class Parent and now I will start to define class Child. Now, I know class Child inherits from class Parent and the way to indicate that in Python is to say this. The syntax here means that class Child will now inherit or reuse everything that is publicly available in class Parent. Now, things will get really interesting when we begin to define the init method, or the constructor for this class. So, we know that class Child has three variables. Last name and eye color that are inherited from class Parent. And this other variable called number_of_toys. So, in addition to the key word self, I will receive those values as arguments right here in the init function; there they are. Now, to initialize the variables I'm inheriting from class Parent, variables like last_name and eye_color, I will actually reuse class Parent's init method. This is how we do it. The last instance variable, number_of_toys, will be initialized next. Okay, finally, I will add a print statement to the very beginning of the init method. All right, now that we have defined our class Child, the next thing to do is to create an instance of this class Child. I will call it, appropriately enough, miley_cyrus. And here, I will provide it the three necessary arguments. And then, I will print out two things. Her last name, and the number of toys. Also, so I can focus on these print statements in my output, I will comment out the previous instance for now. There. Let me save this file. Now, before I run this program, I want you to think about what the output of this program will be. So, here is the code one more time. Here is class Parent, and here is class Child, and here, we are creating an instance of class Child, and we named it miley_cyrus. So, what do you think will be printed when I run this piece of code? Enter your responses in this box. So before I run this program, let me share with you my hypothesis of what will happen when I run this piece of code. Now one of the first things we are doing here in this program, is that we're creating an instance of class child we called it miley_cyrus. As soon as that line of code runs, the init method inside class child will get called. The first line within the init method, is this print statement. So my hypothesis is, that this print statement will be printed out first in our output. After that the constructor for the class parent is going to get called. So the control will move from here up to here. When the init method for class parent is called, this statement is going to get executed. So my hypothesis is that this print statement parent constructor called will be the second thing that gets printed. Then the instance variable's last name and eye color will be appropriately initialized. Once the init method for class parent has successfully run, the control will come back here. At that point, the instance variable number_of_toys will successfully get initialized. So at that point, the init method for class child is done, which means that the instance miley_cyrus has been created successfully. Then, the following two print statements which are trying to print the last name and number of toys for miley_cyrus will get executed in that order. Alright, this time let me actually run this piece of code. And there's my output. And it seems pretty close to what I thought it would be. Now, I want you to pause the video here for a second, and I want you to see if the output here matches your hypothesis. Ok, so we've just seen how inheritance can help us reuse code. In our example, we saw that class Child can reuse some of the code written in class Parent. Now I want to use the same technique of inheritance, to see if I can improve my design for class Movie that I wrote previously. Let's do that next. So in a previous lesson we created a class called movie. Now this class had the following attributes, the movie's title, its storyline, a link to the movie's poster image, and a link to its YouTube trailer. Now in addition to these things, the class movie also had a function called show_trailer. After we had defined this class movie we created several instances of this class. Instances like Toy Story and Avatar. Now further imagine that we wanted to create another class called TvShow. I would think that this class would have details like the title of the show, its season and episode number. And also, the TV station that this show is aired on. Additionally, this class could also have a function called, get_local_listings. Once we've created a class called TvShow, we can create multiple instances of this class, instances like, season one, episode one of Breaking Bad, and the final episode of Seinfeld. Alright, so if we continue our thought experiment here, we can further imagine that there can be several items that both of these classes can share amongst each other. Things like title for sure, also things like duration of the movie and duration of the TV show in minutes. So the best way to structure this code would be to create another class called Video, which would have two attributes. The video's title, and the video's duration. And the class Movie, could inherit from this class Video. To do this, we would have to add the class name Video, inside these parentheses. Now, this would mean that class Movie, would inherit title and duration, from class Video. Additionally, the class TvShow could also inherit from class Video. To do this we would also have to add the class name Video inside these parentheses. Now this would mean that class TvShow would inherit title and duration from class video. Now you can clearly see how we can write a piece of code. In this case, class Video, and continue to reuse it in multiple different places. Another big benefit of writing code this way, in addition to just reusing code, is that it allows us to follow an intuitive model of how things exist in our brain. So intuitively speaking, we know what videos are, we also know what TV shows and movies are. So writing code in this way allows programmers to map how things exist in our brain onto code. Okay, so thus far, we've seen how inheritance can help us with reusing instance variables. Now I want to show you an example of how inheritance can help with reusing methods. So here we are back at the code, where we have a class called Parent and a class called Child. And if you recall, class Child inherits from class Parent. Now, I'll begin by defining a simple instance method inside class Parent. And I will call it show_info. The first argument of this method is self, and all this method does is it prints out the last name and eye color of the parent. All right, there are the two print statements. Now to test to see if this method actually works, I'm going to call this method show_info using the parent's instance billy_cyrus. So let me do that next. So there is that method. Now all I've done thus far is created a new method called show_info inside class Parent. And then used an instance of class Parent, instance called billy_cyrus to call that method. Now to be able to focus on this statement's output, I am going to comment out the other instance statement for now. There. Let me go ahead and save and run this program. Alright. So the program prints out the correct values of billy_cyrus' last name and eye color. So far so good. Alright so I'm going to come back to the code, and this time I'm going to do something new. Now because this class Child inherits from class Parent this method show_info is also inherited. Now this means that instances of class Child instances like miley_cyrus, they can also call the show_info method, even though this method is not explicitly defined inside class Child. Let me do that next. So the first thing I will do is uncomment this line of code where I'm creating the instance called miley_cyrus, and then use that instance, to call the method show_info. There. Now because I want to focus on the output of this show_info method, I'm going to comment out the previous show_info method for now. There. Now before I run this program, I want to highlight one more time that I'm using the instance miley_cyrus to call the method show_info. Now this method does not explicitly exist inside class Child. But because class Child inherits from class Parent this method show_info is actually available to the instances of class Child. So let me go ahead and save and run this program. And there is my output. The program did not throw any errors, and the last name and eye color of the instance miley_cyrus did get printed out. Okay. So the next thing I am going to do is create a method called show_info inside class Child, and see what that does. So I'm going to create a new method called show_info inside class Child. Now this method show_info is going to print out the three things associated with a child. It's last name, eye color, and number of toys. Here we are printing the last name of the child. Now we are printing the child's eye color, and finally, we are printing the number of toys. In order to print this number correctly, we had to wrap it around the string function. Now, if I save and run this program, my hypothesis is that when I call the show_info method using miley_cyrus, which by the way is an instance of class Child. This show_info method is going to get called and not the show_info method in the class Parent. So let me save and run this program. And there's the output. We're printing out the last name, eye color and number of toys of the instance of class Child. So really what we have done here is defined the method by the same name show_info inside class Child, and also inside class Parent. This ability of a sub-class, in this case the class Child, to override a method that it inherited from its parent class is called Method Overriding in programming. So we've talked about several different advanced object oriented programming ideas thus far, ideas like inheritance, and also method overriding. I want to thank you for your patience thus far, and also for all of your hard work. And I really think that we are ready to attempt the final project now. And that final project is next.