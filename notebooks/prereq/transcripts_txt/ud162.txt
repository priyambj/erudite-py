 Hi, I'm Mario. And I'm Samantha. And my name's Andy, and we're going to be the instructors for this class. And you're a person looking for a job, or maybe you have an idea that you want to turn into an app, or maybe you just want to learn more about what Salesforce is, what it can do, and how it works. You may never have heard of Salesforce before, or you might already be a developer looking to brush up on your point and click skills. Maybe you have zero programming experience, or maybe you're an experienced programmer just looking to brush up a bit on how to build some new apps. Regardless, by the end of this class, you'll have built a fully functional, robust, web and mobile app, without writing a single line of code. That's awesome. When I tell people I work at Salesforce they either don't know what it is or they think of the sales in marketing tool. But you can build any kind of app on Salesforce. In this first tutorial we're going to answer some of the basic questions you might have such as, what is Salesforce? What can I do with it? What kind of jobs can I get if I learn how to use it? Once we answer that, we're going to quickly discuss the structure of the course. To give you an idea of what Salesforce is, we talked to a developer who told us how he became a Salesforce developer, and how he uses it every day. I'm David Liu. I'm a Salesforce developer at Google, and I dream in Salesforce. I graduated school with a marketing degree. didn't know how to write a single line of code. But marketing always works with sales, and that's how I got started with Salesforce. And just due to you know, circumstances on the job, I dabbled a little in code and, and I fell in love. It was, it was love at first sight. and, and from there you know, I just went All the way forward with it, and you know I told myself, wow I love this so much. You know in, in 20 years time if I looked back at my life and, and I didn't know how to code, then you know, I'd be really disappointed in myself. So so I picked up Sales First Coding and, and yeah, now I'm doing what I love. Salesforce, it's really like a, like a playground. You can build anything you want with it, like I've seen people build apps for recruiting I've seen people build video games on Salesforce, you can build websites. it's really up to your imagination what Salesforce is. There's a lot of things you don't have to worry about when you're coding in Salesforce. When you're coding in other languages, there's these thing call boilerplate code. Just code that you have to write thats thats meaningless, that's totally unreadable. That you have to write just so that your code works. In sales force, every line of code you write is is directly relevant to your app. It's all business logic So there's two ways you can build things in sales force. You can do the point and click way, Or you can code, and, and most of the time, you're actually doing a little bit of both. I started with point and click. started not knowing anything about coding whatsoever. The skills that you learn when you're doing point and click, it's absolutely super important for coding. you cannot be a good Salesforce developer without knowing the point and click stuff really well. the reason for that is, there's so much you can do with point and click. if you can do it without code you always want to do it without code. One really cool thing about Salesforce is how quickly you can become good on the platform. How quickly you can become a good developer from not knowing how to code a single line in six months time you can probably learn enough to get a job as a sales force developer. I love Sales Force, yes. [LAUGH] As you can see, developers get really excited about Salesforce. And we're really excited to teach this course. I started working at Salesforce six years ago. And while I was initially excited to be working for the undisputed leader in cloud computing, what really got me excited was working on the platform, and the limitless possibilities of what you can build on Salesforce. And I don't work at Sales Force. I work Udacity, because I like teaching people things. Things that will help them improve their life. And I think if you learn Salesforce, you actually can get a job, and that's pretty cool. When I started working at Salesforce, three years ago, what really intrigued me about the platform was just how easy it was to build apps on it. you have a lot of free range as a developer to build whatever you want with code. You can do so much with just point and click. It's a really interesting platform. So how will this class work? Because you can do just about anything with Salesforce, we spent a lot of time dreaming up the different apps you could build. For example, we could've built an app to manage airplane parts in a warehouse, or keep track of clients at a hotel, or anything else really. But these are everyday use cases that just don't excite the imagination. You're going to spend some time on this and we wanted you to have fun. So we settled on building an app that would let you manage a music festival. If you don't know what a music festival is or how they work, don't worry. We'll teach you as we go. In each lesson, you'll build a specific piece of the festival lab. So that you can understand the use case, Samantha and Andy are going to take you to an actual music festival, so that you can really understand the problem you're solving in that lesson. As Andy and I guide you through building the app, I'll be teaching you and him how to actually build the app itself. And since I truly don't know anything about Salesforce I'll be playing the role of the student. Sam? [LAUGH] Yes. You are teaching me how to build the app. Right. And I'm building the app. Yep. And, Mario? Interrupting you. You're, thanks, Mario. And I'll be interrupting the class every so often to give context about what we're learning as well as to explain some of the more difficult concepts. While also asking you a lot of the questions like what was the first concert you went to? Answering these questions is really going to help to facilitate your learning. So what was the first concert that you went to, Mario? Boston. Boston. Green Day. Blink 182. What about you? So, Sam, you're going to teach me how to build this app. I guess that means we're going to do a lot of coding? None whatsoever. It's all going to be using point and click. And what does that mean, point and click? What will we actually be doing? There'll be a little bit of pointing. You know, clicking with the mouse. Okay, thanks. [LAUGH] And at the end you're going to have a really fully functional web and mobile app. It's really cool. All right. Sounds good. No, but seriously. In the first lesson, you're going to create an app and learn how Salesforce stores data. In lesson two, you'll learn how to take a big problem and break it into smaller pieces, and how to represent those pieces in Salesforce. In lesson three, you're going to learn how to visualize your data with fancy charts and graphs, and pi charts. In lesson four, you learn how to automate the things you've been doing by hand using workflows and approvals. Finally, in lesson five, you're going to take that web app you've been developing and turn it into a mobile app that you can take with you anywhere you go. This course is more than just lessons. There's problem sets, a final project, and a whole community of other people just like you taking this course. You'll find the problem sets at the end of each lesson. The purpose of these is to give you a chance to practice the skills that you learned in the previous lesson. After you finish all the lessons, you're going to create a final project, which is an app of your choosing that you're going to build, with all those things that you've learned. Finally, there's the community. If you ever get stuck, or just want to chat about your incredible app ideas, you can go to the discussion forum. Let's wrap up Lesson Zero. You learned what sales force is and what it can do, and you learned a little bit about why we chose this scenario. You're going to create a. Now Mario in the amount of time that you've been talking, we could have built a pretty good chunk of the app by now, so maybe we should just I think it's time to starting building the app now. All right. We'll see you there. Welcome to lesson one of the class. You're going to start building the app now. While the app you develop is a Music Festival app, the skills you learn are really applicable to any problem you want to solve with sales force. This lesson will get you familiar with app building and some of the basic functionality of the sales first platform. Now Samantha and Andy will introduce you to the problem we'll be focusing on in the class. As you listen to their discussion, pay attention to the questions they ask each other. How would the questions they're considering generalize to other problems? Alright Sam, we're going to build an app to manage a music festival. Yes. That seems like a very big problem, managing a music festival. How, how do you approach a problem that big? I mean there a lot of aspects to a music festival, right? So the easiest way to go about it would be first to think about it from a high level. Okay, to sort of understand what it means to be a music festival. Exactly. So, break it down into the components we want to track. Like, we went to a music festival last weekend. What did we see there? Yeah, it was really interesting because, you know, we were both there at this same festival, but we were definitely focusing on different aspects. Like, I was digging the music, the art, the crowds, and you were paying attention to some things I'd never thought of before. I mean don't get me wrong. I was definitely paying attention to the music and the crowd too, and that was awesome. But I was also really impressed by the overall structure of the event. Right, and that was something that I had never really considered before. I mean from a logistics point of view, it was all really pretty impressive. There's so much planning that had to go into the organizing of multiple stages and bands. I mean, making sure that everyone would have the right equipment, there were ticket collectors, security guards, food vendors. I mean, so much stuff that all had to be planned and managed. So for now, let's just start small and focus on how to manage and keep track of one aspect of the festival, the attendees. Right, because it seems reasonable that a festival manager would want to keep track of the people going. I'm not sure what, would this person actually want to track about these attendees. What would they, how would they do it? so yeah, let's, let's think about it. Alright Sam, I'm ready let's build this app. What do we do? So the first thing we need to do is think about what do we care about most at a festival. Okay I mean we're paying attention, mostly I guess, to the bands. Mm-hm. the stages they're playing on and the people who are going. Right. That sound about right? Yeah, those are the main things we want to track. Let's write it down on this tablet and kind of map out what our schema is going to be. Okay. First, we start off with our festival. One of the other things you said we wanted to track, were bands. Also, we wanted to track stages, and we wanted to track attendees. Okay, so, you've written these words. is there any particular reason why you did it the way you did? Like in these boxes, or any reason for the structure? So I think the boxes will become a little more apparent when we go into the app to start building. But for now, I mean, it's pretty simple. We'll build up more later but really, it'll become a little more interesting when we actually start connecting the boxes and talking about how do festivals relate to bands, or how do attendees relate to festivals. Okay, cool. so I, I, should we start building it? What do we have to do? Yeah, let's go in the browser. Okay. Alright, let's do this. [INAUDIBLE] new. Oh my goodness. Why does it want all this information, Sam? In order to sign up for a free developer account, you have to give them a little bit of information. But giving them your e-mail, so that they can send you the sign-up information to be able to log in. What if I didn't have a company? Could I just put none? You could put none. But it's asking for some geographical location just to send you information about cool events that might be coming up in your area. What's the deal in here? Username, is that different from my email? The username can be the same as your email, but if you already have a developer edition account or any account under that email, it'll probably ask you for a new username. Oh. Oh yeah. Whoops, I need a new one. [LAUGH] Okay, so what should I do? Just like Andy, can I just do like Andy@udacity.awesome? Yup. All right. I may have actually used this one already, too. Yup. Let's do andy@udacity.sweet. Okay. Awesome. No, sweet. [LAUGH] So, the great thing about the developer edition account is, it's free, it never expires, and it's your own little test environment to build any sort of app that you might want to in it. Okay. Says I should receive an email. Let's check. So, click into that. Okay. Oh, so this one isn't actually the login email, but they send this out automatically when you sign up. It gives you some cool links to getting started and, you know, learning about the platform if you're new to it, but the other one is the actual log-in link. There it is. Okay. Log-in confirmation. I'm not going to read this. I'm going to click this. Okay. password, right. Alright. Alright.Oh my goodness. What's going on Sam? There's a lot of stuff here. Yeah. So I know this is really overwhelming at first, but this is where you're going to be living as an app builder. we're barely going to scave the surfaces of all the different thing you can click on. But feel free to click around. It's not going to break anything. Just check it out. The first time you log into Salesforce, there's a lot on the page, and it can be a little bit overwhelming. That's a good thing. That's because there's so many things that you can do. Feel free to explore and click around. As you build apps, you'll often come back to the setup area, so you can find the setup link at the top of the page and reorient yourself. Alright, I'm slightly less overwhelmed now. Great. Let's fill the app. I'm guessing I do that by, is it the big green button that says Add App? You're so smart Andy. Thanks, Sam. Kay, so, what's the name of our app? What should we call it? What are we trying to track? Festivals? Sounds good. Check out Festival App. Okay? That works. What's the main type of data you need to track? That's festival [INAUDIBLE]. Exactly. And you can see this little preview down there of what it's actually going to look like once it creates it. Yeah, okay, has me do the plurals. Doesn't figure out the S by itself, but I guess that's acceptable. Language is complicated. Right, right. Create. And so what this is going to do is create a couple other things for us. It's created that festival object, which we'll go a little bit into what that is, to be able to store festival data. Okay. Then, it creates a permission set. So if this were say a private thing that we were trying to create, we could add some security around it. Okay. And it also adds a few other tabs into our application so that we can do some other useful things besides just track festivals. Okay. So, why don't you click into, go into the app. Okay. Alright. Let's see, these are those extra default things you were talking about? Those are the extra tabs for us to be able to, you know, load some files, run, make some reports on festivals if we want to. but, what about in the upper-right hand corner, you can see that we are in our festival application. If we were to toggle between any of the other apps, it would change the different tabs that we see because. What are these other apps. Those are just the standard ones that come out of the box with your developer edition of the account. So are we going to use those or? We aren't going to use them no, probably not. [LAUGH]. But you can see how you can track different types of data relevant to that app. So in sales, it's accounts, contacts, that kind of stuff. Okay, sorry. Festival App, right, stay focused. Let's create a new festival Okay, have O, right? Should, the new button? Yeah. Good. There's a lot of buttons. Sorry. festival name. What do you think? Any good idea for a fake festival name? Cloudstock. Cloudstock? That's a good one. Okay, it's like Woodstock in the clouds. [LAUGH]. Save. So, that's pretty awesome. You know, it's, it's storing information about Cloudstock already, has some other fields that we didn't even create ourselves, like who was it created by, and who was it last modified by? I don't see, sorry, created by? Oh yeah, over here. Owner, last modified by, gotcha. So have a festival, what do I want to do with it? Well, think about it. What are, what are the things in a festival that you care about most? What do you want to track? I want to know, I mean, I want to know when the festival is. I want to know, I want to know a lot of things. What it is, who's going, who, I mean, who's playing, tickets, everything. Great. Well, what we did now was created our festival object. And so, that's going to be the overall thing that we store our data into. Okay. But then on that object, you can create fields, which are the characteristics about that object that we want to track. So, the object being festival, those characteristics you named were. Like start date, and date, that kind of thing? Exactly. Okay. So, in order to create those we can do that by going to this little tab on the right hand side. This little arrow guy? Yeah. It's our quick access menu to toggle between the app, and the administrative set up. So, let's add some fields. Okay. So it wants me to choose my field type. Okay, so okay, I've got all these different choices of data type. What's going on? So it's pretty overwhelming the different field types at first, because there are so many. But really the most important thing to note is that you just want to be able to pick the field type that's closest to whatever type of field you're trying to track. Okay. So if we're doing start date, is date good? Date sounds great. Okay. then Next, I guess. Okay, Field Label. I'm going to go with Start Date. Sounds good. This is what you're going to see on that page that we were just on, as the little label for this field. Okay. And what's the difference between that and the name? The Field Name is the actual API name that it stores in the database. So that just needs to be a unique value. Is that for like if you're going to do some coding stuff? Any sort of code or maybe some formulas like we'll go build later. So description is, I guess I should fill this out, right? The date the festival starts. What's help texter? it's I guess a field that people don't really understand. You can add the little help text so they can get more details about it. Pretty clear, okay. alright. No, I'm not going to make this a required value. Sometimes you get festivals that maybe don't know the date yet, or something, so. Yeah. Okay, next. Oh my goodness. More checkboxes. Yeah, so this wizard really takes us through every sort of aspect you might need to consider, around building a field. In this case, again, it's asking us about security. So, if we were trying to build private fields, we could then associate, hey we only want to make this visible to certain profiles. Okay. I know it's a lot of jargon to begin with right now. But all you really need to know is every user that lives within your Salesforce organization is associated with some security profiles. You can turn fields on and off for individual people if you want. And for now we can just. Just leave it at default. Yeah. It's just us. The last step of the process, do we want to add it to a page layout? So really, all this means is, do you want to put this field onto the page automatically? So that form we were just on, where we saw cloud stock last modified by, created by, it's adding it into that layout. Oh yeah, I totally want that. Okay, okay. So check, save. Alright. Alright. And we've got our festival custom object, and we've got a custom field that's just empty. Right. That's cool. What we're looking at right now is the setup screen for our object itself. We can see the standard fields, so those are the things that we saw automatically already. And then we add more custom fields, or any sort of customization around our custom object here. 'Kay. I guess it makes sense to add an end date next? Yeah. So let's just keep going down the line and adding more fields. To recap, you made a new app called Festival app. And when you created that app, the platform automatically created an object to track Festivals. You added fields to capture the start and end dates, and then you created a record for a specific festival, which Samantha and Andy called Cloudstock. Objects, fields, records. These terms might still be a little unfamiliar to you. If that's confusing, let's step back for a moment and relate this model to something you're probably already comfortable with, spreadsheets. If you were to track this same information with a simple spreadsheet, it might look something like this. You'd create a new spreadsheet called Festivals. And you'd add a column for Festival Name, Start Date, and Date. Then you'd add Cloudstock as a row under those headers and complete the dates. You can add many different festivals as new rows on that spreadsheet. Now this is starting to make sense. Based on this analogy, how do these terms objects, fields, and records correspond to tables, columns, and rows on a spreadsheet? As you can see, the spreadsheet table corresponds to one object. Then, the columns represent various fields on that object. And finally, the rows relate to individual records of that object. Understanding objects, fields, and records is important to conceptualize the data model that you're building in the music festival app. Let's make sure you understand what's going on. So, let's pretend that you're Amazon.com, and you want to keep track of the inventory at a warehouse. Your warehouse stocks lots of things, books, movies, clothing, et cetera. But you refer to the individual things as an item. Each item has some properties like a name, a price, and a weight. For example, a Udacity t-shirt costs $15 and weighs six ounces. If you were to represent this in Sales Force, what would each of these capitalized terms correspond to? Well, if you were to think of these items in a spreadsheet that table would look like this. The spreadsheet itself is the object, the columns are fields, and the actual entries are the records. So the items are the objects, the properties are the fields, and the Udacity T-shirt would be one record. Alright. Now that you know what we mean about objects, fields, and records, you can get back to the Festival app with Samantha and Andy. Alright, cool. So we've made some progress, right? We added some fields, I guess, what should we do next? So let's go back to the Cloudstock record that we already created, and then add values to the fields we just created. I don't know if that makes sense. Cloud stock. Okay cool, so right, that's awesome. So the fields are there, they're not, they're empty I guess, that makes sense. Do I just hit edit I guess? Yep. Alright, so let's give it a start date. How about November 29th? Sounds good. Okay. an end date. Let's do like, December 1st. It's going to be a weekend festival. Let's say it can have 10,000 people, and we haven't sold any tickets yet. Cool. All right, cool. Now we've got our festival object. It's got all these fields. I think of it in terms spreadsheets. I'm not a sales force guru like you are. so how, what should we do in that sort of thinking? So if we're going to think about it like a spreadsheet, let's take a look on the a tablet. We have our name, and so that's Cloud Stock, and we have our start date and our end date, can hold 10,000 people. And we haven't sold any tickets yet. Womp, womp. Really we have all of our fields here along the top. Okay. And this is our record that we created just now. But where does attendees fall into this? Do we create another column for that? What do you think? I don't know, I guess, I might try to add another column or I guess another field that would be the attendee I wanted to add. So, that might make sense, but, not really because we could have 10,000 attendees, right? You're so kind. [LAUGH] Okay, right, okay. So, we don't want 10,000 new columns that makes sense. So I guess just make an entirely new object called attendee? Right. Okay, cool. Alright, so, we need a new object, an attendee object. Yep. Okay, so I guess I have some way to make that here? Yeah, so you can use that nifty little quick access menu on the right again. Oh, okay. Is this the only way to do it? It's not. There's a couple different ways, I just think this is the simplest. Okay, so, oh, View Object, New Object? New Object. Okay, so this is going to be attendee, it does start with a vowel sound. Nice. Okay, on data type. So this is what it's going to by default make the name, and so I guess in the case of attendees we'll have real names, we can just leave it as text. And. There's optional features, we can go back and add them if we need them later. Okay. It's deployed, and actually, you might want to click to launch the New Custom Tab wizard. Okay. What would have happened if, what does that do? If, it's going to allow us to create a tab automatically, so we can add it into our app, just like how we have the festival tab. If we didn't check that box, we could just go create a tab by going through the setup tree on the left. The tab, so these guys up here? At the top. Home chatter files. Exactly. Okay, so, Save. Oh, New Custom Object tab. Alright. Object attendee. Tab style. This is fun. This is just like some image that represents our attendees? Yup. This'll be the image that goes at the top when we click into the tab. It can be random, it really doesn't matter what it is. No, I want a good one. Okay, people, people, right? That's right. Okay. this optional. If it's optional I'm basically just going to forget about it, Sam. It's okay, yeah, don't fill it out. Okay. This again is security. Just leave a default on. That's fine. Everyone will be able to see this tab. And then this one is actually important, because it's choosing which apps to add this tab to. So, we don't really need to include it in all the other ones. Oh. But we want to select the festival app to add it to our festival app. Save. Okay, cool. So we're back, I've seen this before. We've made an object, this is good. we have all these things, again, standard fields, custom fields, what are these guys. Related lookup validation, all that. So these are different things that we can build, mainly business logic, around our attendee object. And so we'll go into more of what this is later, but we'll be able to create validation rules for making sure that we input good data, page layouts for being able to modify how that form looks when we create a record. All these different layouts, I mean, this is really your one-stop shop for modifying your attendee object. Okay. And at the very top, boom. Oh yeah, we've got our tab. All right. Cool. So we want to add a field, right? Yes, let's add some fields. I always going to forget this, but let me figure it out. To add a field, I was there was, where's that little click access guy? So you can only see that when you're actually in the app. from the end user view. But right now we're in the setup. So, we don't need a quick link to the setup. Hm. Oh, custom fields, new field. I found it. Okay so I want to add, I don't know, what should we track about our attendees? Maybe their emails, so we can send them the ticket? Makes sense, Okay. so I bet there's an email field. There is, nice work. That was nice work to Sales Force, just [LAUGH] In general, thank you for giving me the email field. Field Label, Email, I guess. Okay, and again, not going to worry about this stuff. Save. All right, cool. We've got our field here just like we wanted. Great. So why are field techs so important? Let's take an example of an email address. Now you could format that as a plain text field and then users would enter so and so at something dot something and it would work in most cases. Now the great part about choosing a data type is that it provides automatic data validation. Someone couldn't enter in an illegal email address, because the, they wouldn't be able to save their record. Moreover, that functionality of that will later show up in an app so we will be able to tap that email address and it would open a mail-to link and their default email application. That's great functionality, so we want to make sure to use the data text that users expect for it. If it's a calendar, choose the date type. If it's email, choose email, etcetera. Now the best way to learn is by doing so let's go back with Samantha and Andy and do that. Alright, so we've got our attendee? It's got the email field. Let's add a bunch more. All right, what else do we want to track about the attendee? let's track the phone number. Yup. We should figure out how many tickets they bought. Yup. like how they bought the tickets. You know, if it was online or whatever. I don't know and we'll think of more. Let's. Let's start with that one. Okay. Oh my goodness, I always forget how to add things. New, oh yea, new fields. Okay, so purchase source, that's a pick list right? Pick list just like. A little drop down list you can click and choose one of the definied values. Sweet. Okay, so the places you could buy a ticket would be. At the box office. Box office. The official website. Official website, yeah. What else? Maybe like third-party ticket vendor. Okay. Anything else? maybe Facebook? Oh yeah, yeah. Okay, and description, I guess this is where the customer or attendee bought the ticket. Yeah, and if we wanted to add more values to the pick list later, we could just go back and add them. Okay, cool, right. So, moving on, Next. Lots of Next. Default visibility, yeah. Okay, I do want to add it to the Layout. Right? Yeah. I guess I should Save anew because I'm going to add a bunch more fields? Yeah. Let's add the next one. Okay, cool. So I'll finish that and add a few more fields. Sounds good. All right. So, we've got all these fields, and what do you think? What should I do next? So, let's create a couple attendee records, and another festival. Okay. Alright, so I'm going to make some attendees, and I'm going to go here, and then hit New. Yep. Okay, what should our attendee be called? Johnny Concert. Yes. he bought, Johnny Concert bought his ticket from a third party vendor, and he bought his ticket today. Is Johnny a VIP or General Admission kind of guy? He sounds pretty VIP to me. All right, so, and then I'll just do this for another one, and maybe a festival? Yep. Cool. Alright, so we've got our two attendees. Johnny Concert and Misty Music. Yup. And we've got our two festivals, ROFLpalooza and Cloudstock. I really like those names. [LAUGH]. Me too. But can you see the problem here? I mean, they don't have anything to do, like this festival doesn't know anything about the attendees, so there's no way to like match them. Right. We don't know which festival either of those people are going to. Yeah. So we'll need to relate those two tables. Okay. And so how do we, how do we do that? How do we think about that? So let's take a look at it on the tablet to make it a little more clear. Okay. So, start off by looking at our festival object. We have the festival here. The, all of the different field names. And then we have individual records, like Cloudstock and ROFLpalooza. Right, right. And the fields were our columns. And, I get that. Yep. Okay. So, we could also think about what our attendee object could look like. Okay. Here we have same sort of thing. All of our fields as the columns and then our records as the rows. Okay. But if we were trying to relate these two tables, we would need to create a relationship field on one of them. Okay. So like, can I think of that as a new column? Think of it as a new column in the table, exactly. So, what would make more sense, to add a column onto Attendees relating it to Festival, or to add a column onto Festival relating it to Attendees? Okay, so I would probably put the field, put a field here on attendees and call it Festival. Because, it seems like for, you know, any given attendee, they're probably going to go to a festival, but any one festival's going to have a ton of attendees and I don't want to end like a million fields. Exactly. Cool. So, we have these two festivals. Mm-hm. And these two attendees. Missy Music and Johnny Concert. Yeah. I get it. We want to add this like column, or this field onto our attendee object. Mm-hm. I, I want to just add a field? But I feel like something special has to happen to get it to talk to, you know, and know about festivals or. Well that's what so great about creating relationships in Salesforce. It's just as easy as everything else we've already been doing. So, you can go to the Objects Setup and just create a new field. New field? Yep. Oh, okay. Is this where the magic comes in in choosing a field type? Right. And there's two types of relationship fields in Salesforce. Lookup and Master Detail. we can go into more detail about that later but, why don't we choose master detail just for now. Okay. You will tell me later? I will, I promise. So, master detail relationship. Relationship makes sense, I like that and next. okay. So I'm guessing. Yeah, I'm going to relate this to festival. Exactly, nice. Okay, so what's all this about? So again this is just going to create the label for this field that'll be on the record detail page. This is like our column name over here? Just like the column name, exactly. And so festival is good Okay, it auto-did that. That was nice. So description, the name of the festival the attendee's going to. Right. Okay, what's this one all about? Child relationship name. So again, that's just a unique API name that's going to live in the database. It's more for the code side of things, or if we were trying to build something off of child records. And then should I just leave everything else? Leave everything else as default. And we'll add the fields to the page layout? So, it's going to automatically add it to the page layout because it's a required field. So, what's going on with this? Add custom related list. So, what this is going to do is it's going to add a list of attendees to the record or the festival record. Okay. just like how in Attendees you can see which festival they're going to go to, when you go to the festival record you'll see a list of all the attendees that are going to this festival. Cool. And I can hit Save. oh, it's getting, it's getting mad at me. So, it's throwing this error because with master detail, when you create this relationship, it becomes a required field. And since there are already two Required field means like the attendee needs to have a festival? Exactly. Okay. And since there're already two attendees that were created, and they aren't related to a festival, you can't create this relationship. So, it's like protecting us from having all these attendees that don't make sense anymore. Yes. Okay. And so, the way to get around this is, let's create a look up relationship first because, in that case it won't be a required field. And then we can add them and then change it. Exactly. Okay. So, let's go through that one more time but choose look up relationship this time. Okay, edit all those things, and then hit Save again. And seems like it worked. That's cool. And it's right there in our Custom Field and Relationship, is it? Yes. There it is. Awesome. Great. So let's go to an attendee record, or both of the attendee records, and now relate them to the festival they're going to. Okay. Alright so if going to Johnny concert. I'm going to double click Festival. Click my little friend, the magnifying glass. I love the magnifying glass. And send him to, what do you think? Cloud Stock. Cloud Stock. And save. Cool. And I'll do the same thing for Missy music. Awesome. Okay, so you created your first relationship. This is how we get objects to communicate with each other. And this is where things get really interesting. Because of the relationship between the parent object Festival and the child object, Attendee, you can now aggregate all sorts of useful information. For example, if you want to know how many tickets you sold, you can now get that information directly from the Festival object. In fact, the information on the child object is now accessible by the parent object, and vice versa. Later, when you start building more complex business logic, you'll see how important and powerful the relationship between objects becomes. See if you can identify the parent in each of the following scenarios. Don't worry if you didn't get those answers correct. The parent objects were Warehouse, Festival, and Businesses. Look at the answer a little more closely. A warehouse has items. A festival has stages. A business has departments. We call this a one to many relationship. There is a one to many relationship between warehouses and items, and festivals and stages. In the Salesforce Schema Builder, we show these relationships as lines that branch at the end, like this. Now, Samantha and Andy are going to walk you through the incredible power of these relationships. Okay, so we've related our attendees to festivals. So here we see the Johnny Concerts going in the Cloudstock, which is very cool. so in theory if I click this, I should be able to see everyone is going. You should see Johnny and Missy. Right cool. I think I'm really starting to get to know Johnny and Missy. [LAUGH] Okay And it's not a field, it's this other, so fields are up here. Festival name and all that. But this is something different, and it's just a list of all these attendees. So that's what came up at the final step of the Field Creation Wizard. That was adding this related list, which is just a list of related records Onto the page layout for the festival. Okay. Okay, so great. We have our two attendees, who bought some number of tickets I assume. But it still, I mean, of course, it still says tickets sold as zero. There's no way it would have known. ideally, I don't, you know, I don't like that. What can we? Well there is a way that it would have known. And so it's really great that we can create some automated calculated fields in Salesforce. So, we've kind of brushed upon the different data types, but we haven't talked about roll-up summaries or formula fields. Okay. And so, with a roll-up summary, you're able to summarize information about related records. Okay. And so, let's create a roll-up summary, based off of the attendees to show how many tickets have been sold in total at the concert. Okay. And, can we do that? I'd actually, I don't like how we did this. I would rather keep track of the VIP tickets sold, and the general admission tickets sold separately. Can we do that? We can. We can just create a filter on the summary, so. Alright. Super easy. So again, let's just go to the Quick Access menu. And create a new field. Okay, we've got a new field. And you said roll up summary, but it is grayed out, Sam. So this comes back to me just skipping through, choosing lookup over master detail. you can only create your roll up summary when the relationship is through a master detail relationship. And since we created a lookup, we're not able to do rollup summaries. But thankfully, we can change it now that we've related all of our attendees to a festival into a master detail relationship. So let's go back really quickly to the attendee fields, and we can just change that. Okay. Sounds good. Okay so I'm going to try to figure this out. How do I change a field type? So View Fields, and if I scroll down. We've got our Festival field. This is the relationship, the lookup. Yeah. So I'm going to try this. I'm going to try to hit Edit. Change Field type. There you go. Hey that wasn't so bad. Mm-hm. Okay, all this stuff still makes sense. And the great thing about this is you can do this with any field type, not just relationships. So if you ever need to change a field down the line, you can. Okay, so now we can do the Roll-Up Summary. Yes. So, let's go back to the Festival setup detail page. I don't really know what that is, but I think I know what you mean. You're starting to get it, Andy. Thanks. I'm just going to hit New Field? Yes. Hey, it's not grayed out. Okay, Roll-Up Summary. Next, let's see what you're going to do for me, Roll-Up Summary. Okay, so I want to do, VIP tickets sold first. Okay. Okay, so. Let's see what's going on here. We've got our master object festival, and it's summarizing something. okay. Not much there, summarizing attendees. Oh, because it's the only thing that it's related to. Exactly. Okay. And roll-up type. Count. I'm guessing that would tell me that there were two. That would count the number of records. Okay, which is not what we want to do. Right. We want to add up the number of tickets sold. Yes. Okay. This is actually making sense. Field to Aggregate. Tickets Purchased? Yes. Yes. But only if they're VIP tickets. So what's great is at the very bottom you can see there you can create a filter criteria. Okay. all records should, no, only records meeting certain criteria. Oh, this is easy. Field is Ticket Type. Exactly. What's operator? Oh, okay, equals. And equals VIP, yeah? Yep. Sweet. And you can do a lot of different kind of calculations, as you can see. So, the minimum value, the maximum value, some sort of aggregate, and you can get it to be pretty complicated with your filters. Well that's great. So now you have a count of your VIP tickets, but you probably want one for general admission to right? Wait, first I want to see, I want to see if this actually worked. I'm want to go to Cloudstock an see if I can, actually see this thing. Hey, it's pretty cool. Okay. Alright now, I will do the same thing for the general admission tickets. Right Alright, we've got VIP tickets sold 2, general admission, 4. Very cool. Got it. Okay But this is obviously wrong. Tickets sold should be 6, not 0. Yeah, that's true. Should I do another roll-up summary? Well, we could do another roll-up summary, but you can only have ten roll-up summaries per object, and we might want to calculate some other things, so. Instead of using a roll up summary, we can do what's called a formula field. Okay. Very similar, but it's a little bit more dynamic and you have more functionality you can add to it. Okay. But really, all we're obviously trying to do here, is adding those two numbers together. 2 plus 4. So, how should I add this formula field? Well why don't you try and figure it out? Okay. All right. This is what I'm going to do. I'm guessing it's just like any other field, except it's called formula. going to call it Total Tickets Sold. Okay, return type. I'm guessing, since I'm just adding numbers together, I'm not going to get a date or anything, I'm going to get a number. I don't really know what this checkbox business is, but I'm not going to worry about it. options, decimal places. I don't want any decimal places. These are integers, my friend. 'Kay. 'Kay, this is a little tricky. okay. General admission, tickets sold. And then I'm going to add it. And just write plus. You can. So if you didn't know what kind of operators you could use, that insert operator there tells you exactly the simple operations you can do. Add, subtract, yeah makes sense. Okay. So general admission tickets sold and it's using the Code E version, but we're okay with that. I'm going to add that to VIP tickets sold. And I think that's what I want. I'm just going to try this and see if it works. Should I hit this check syntax? no syntax errors found, excellent, next. So you made it visible to everyone, you're going to automatically add it to the page and let's go look at a record. This is the moment of truth. When I click, on Cloudstock hey, hey, alright. That's pretty cool. That's awesome. It's really getting smarter. [LAUGH] Okay. an I'm going to just delete this field as well, cause it's annoying me now. [LAUGH] Okay. So I deleted my old tickets sold field. Yep. And remember when we went to the festival, and there were all those people outside like, get your tickets, get your tickets. I think they had a sketchier voice than that. Like, you need some tickets? Get your tickets, yeah. [LAUGH] Okay, totally sketchy, I don't want these scalpers at my festival. the reason this stuff always happens is because You know, one person could buy like a thousand tickets and then they can sell them at like 10X value. Yeah. Which is super-annoying. so, so how can I, say, for example, don't let anyone buy more than one tickets? So that's really easy to do in Salesforce, because you can just create a rule that prevents that from happening. And what that is called in Salesforce is a Validation Rule. Okay. And so basically you set up some sort of condition that shouldn't happen, and if it does, it throws an error at whoever's you know, trying to create or modify the record. Okay, let me try and do this. So this is on attendees, because we don't want the attendee to buy more than eight tickets. Exactly. And I'm going to click my little friend on the right. Oh, okay, a few validation rules. Add one. Yep. Okay, let me give this a shot and tell me if I make any mistakes. Alright. Okay, I'm going to try my, my little friend on the right here. And, okay, validation rules. Yup. Excellent, new. Okay, rule name, I want to call this, Valid Ticket Number Checker. How's that? It's a little weird, but. Valid ticket number? Let's run with it. There you go. [LAUGH] in description make sure that you've got less than eight tickets. Yeah, and I mean, while we're checking, you know, bad data, why don't we just make sure there's also more than zero tickets. So at least one ticket. Okay, that makes sense. And, you've bought at least one ticket. So the weird thing about validation rules is they're a little backwards. The rule that you create needs to check if the formula is true, which means whatever equation you're building needs to evaluate to true in order to throw an error message. So basically, I want to say, instead of saying, making sure, make sure it's between one and eight. I want to make sure it's not less than one or greater than eight. Exactly. That makes, I mean sort of makes sense, but I'll roll with it. Okay, so I guess I'm going to use this little hierarchy thing. It allows you to choose fields on the attendee object, or even of of related objects. But yeah, just click the fields that you're trying to add into this formula. Tickets purchased, I think. Yep. Okay, so I'm going to make sure, I want to check if tickets purchased is greater than eight. Yep. I can just do that, right? Yep. I want to do or, how do I do or? Check that insert operator. Oh, sweet. Okay. Or tickets purchased, less than one. Right. Okay, I'm going to check to make sure I didn't screw anything up too bad. And this looks pretty similar to the formula we just made doesn't it? Yeah, yeah. It's cool that you can do all this with just the mouse. Okay, no errors found. Okay, error message. Dude. You have to buy between 1 and 8 tickets. Okay, Save. Okay. I'm going to, obviously, try and break this rule now. So, let's create a new one. New attendee. Maybe, Sally Scalper? Oh, nice. Sally Scalper, you're not getting in through my validation rule. [LAUGH] Email, thief@evil.whatever. purchase source, box office. If she'll try to buy general admission tickets, she'll try to buy ten of them, for Cloudstock. And let's to see what happens to Sally Scalper. Ha, she was foiled, she was thwarted in her evil attempts to scalp tickets. [LAUGH] Okay, that's pretty cool. [LAUGH]. Alright, Sam this is pretty cool, we did all of this object building and field adding, and things are updating automatically. Formulas, validation, like does your head feel like it's about to explode? No, no. It's actually, it's alright. That's awesome. Which, I mean, so we've only done it for attendees and festivals. I guess next step is to do it with bands and stages and all that. Yeah! Let's do it! We've got a lot done so far. You've thought about the business problem, which is this music festival. You've visualized that on a schema by creating objects and fields, and you created a record for your first music festival. Then you related these objects together, so that you can do things like create roll up summary's, and add formulas and validations. There are many ways you could have answered this correctly. This is just the approach that I took. A warehouse app could begin with a warehouse object. It would also have an object called items. This would have fields like item name, price, description, etcetera. Each record would be an individual item. I would create a one to many relationship between warehouse and items. Which would let me add a role of summary field to my warehouse object. It could keep track of the total number of items I have. Congratulations, you finished the first lesson. In the problem set you'll get a chance to practice what you just learned. Don't forget to go to the discussion forum in case you have questions. Or maybe you just want to chat. In the next lesson, we'll flesh out our data model, and represent more of the complexity of a music festival. In doing this, we'll learn about different types of relationships that Salesforce provides. We'll start thinking about how to play around the layout of our app. See you then. Welcome to lesson two. In the last lesson, you created an app that tracked the very basic elements in a music festival. Before we talk about what we're going to learn in this lesson, you're going to hang out with Samantha and Andy in a real music festival, and get a better idea what exactly what your app needs to do. There were just so many things going on, I mean obviously there are the bands, and the stages, and the attendees. And lots of stuff. Food, drink vendors, but there were some unexpected things too. I really liked the view from the Ferris Wheel. That was pretty cool. Definitely, and then the silent disco is awesome. Oh my goodness taking off those headphones, and then not being able to hear the music anymore. Yeah. That was like trippy. Very surreal. The bubble guy. That was super cool, and the alien parade. There are those ladies on stilts who you refused to dance with. Look, I don't have as much rhythm as you okay, Andy? Alright, so it's safe to say there's a lot going on, but despite all the chaos, the festival overall was pretty well organized. And yeah, we were able to find our way around the festival to make it to the right stages at the right times, and see the bands we wanted to see. In this lesson, you're going to expand on what you've already created and build a much more realistic schema. In addition, you're also going to build out the user interface for the various components of your app. Samantha and Andy are going to help you with that right now. All right, Sam, we've got the beginnings of a festival app. Yes. And so far, we're keeping track of the festivals. Mm-mm. the attendees, and the stages. Stages. Yeah. So this is good. Mm-hm. But I want more. [LAUGH] What do we do next? Yeah, so let's add some complexity into the app by going into SalesForce but, I mean, as we're adding in more objects and relationships, it might become a little bit hazy as to how they're actually related. Uh-huh. And so let's use this new tool called Schema Builder, which is an easy way for you to not only build your data model, but also visual see it, and how everything's related together. kind of similar to what we saw earlier on the tablet Sounds good. Just click on the Setup link, and then go on the left-hand side, down the Setup Tree to find Schema Builder. 'Kay, well, there's a lot going on. What are these, like Content, Activity, what are all these other objects? All of these are, all of the objects that you have within your Schema. And so these are the standard objects that we're not even using in addition to the Festival stuff we've already built. Okay. You can see on the left-hand side, under the Objects, that you can individually select which objects you want to see. And the reason you'd want to see them is you can view all of the different fields, the relationships between these tables, everything that you might want to see around your schema, this is kind of like the blueprint of your account. Okay, so I just hit Clear All, and all I really care about is attendee, like stage and festival for now. Right? Yeah. That's the stuff we've built, and let me zoom in. So, now that this is a little less of a disaster, and I just have these three things selected. This is pretty awesome. So, we have festival here and I can move it around if I want. and then these little, little line things that are apparently Master-Detail relationships. Yeah. So you can see that festivals are related to attendees and stages. And looking at that little fork you can see that a festival can have many attendees for many stages [CROSSTALK]. [CROSSTALK] Being this little like three, these three things on the side here? Yeah, that little triangle thing at the end. Cool. Okay, so this has, this is great. This is a visual way to understand my schema. Yeah. And, as you data model get's more complicated, it will allow you to visualize it really easily. But, in addition to that, you can add fields in yourself or create more relationships straight from Schema builder. Okay, so I can just, like I could add a band object right now? You could. You know, why don't you try that out; see if you can do it. Okay, so I want to make a band object. I don't see any new object thing. Alright, can you help get me started here, Sam? Yeah, so, if you go to the elements tab, that's where you can find all the stuff that you can create. Okay, object. Oh, and I can just drag it. Oh, that was cool. Okay, so create new object, I'm going to call it band. Fill out the rest. Okay. So I've gotten my object with the default fields and then kind of just drag fields onto it, too. Yeah. So these are almost all of the same fields that you have in the Field Creation Wizard. A couple have been taken out, but for the most part they're all here. Just drag the fields directly onto the object. Cool. So, I did it. I added all these different fields. It's got a couple of check boxes, a couple of picklists for set time and genre, phone number, text for the Twitter handle. It's pretty easy. Great, looks good. Okay, this is looking pretty good. We've got our Bin object. We've got all these fields on it what is next? And so it's great we're almost done but as you can kind of see in the schema builder, band is sort of a lonely Allen right now and not really connected to anything. And the way that we're going to get the most out of that data for tracking it and being able to really understand. Where the bands are playing at our festival, Sure. We're going to need to relate it to another object. Okay. Which object do you think we need to relate it to to make logical sense? Okay, well, the bands are part of the festival. So maybe we just want to add a relationship to festivals? Just like with attendees and stages? So, that might make sense. But, I mean, bands will be playing at stages, and stages look up to festivals. So it'd probably make more logical sense to relate it to stages. Okay. So we can add multiple levels of hierarchy here, and that's okay? Exactly. Okay. Alright, so I want to relate my band object to my stage object. Right. So I'm guessing I'm going to drag either look up or master detail. Yep. And I know we're into some trouble with that earlier so, which one should I use? There's are a lot of differences between the look up and the master detail, but one of the core differences, is that a look up relationship is not a required field whereas with the master detail, its automatically required. And since, in the case of our schema, a band might necessarily be created without already being booked, to a stage or scheduled for a stage, so we'd want to choose look-up in that case, so it doesn't require that field when you create a band record. Okay. Alright. I want to make a lookup that relates bands and stages. Right. So I've got it. I'm ready to drop it. Do I drop it on bands or stages, I always forget this? [LAUGH] So, when creating any relationship, whether it's Master Detail or Lookup you should always create the relationship field on the child record. Right. Each band I want to know. This is the stage you're pla-, playing in. Exactly. because each stage is going to have a bagillion bands. Yup. All right. Okay, make sense. Right. So, Field Label, I'll call it stage. Stage. It's just the stage the band is playing in. And the fun step is that it's related to Stages. Cool. And it already populated this stuff. So, I save. Haha. We got our line. We got our relationship. That's pretty cool. You just a created a look up relationship. You already created a master detail relationship before. What's the difference? In a master detail, the child record needs to have a parent. It wouldn't make sense to have an attendee without a festival. If we were to think about the relationship between attendees and festivals, we could delete an attendee and the festival would be fine. But if we deleted a festival, all of the attendees would have to go away too. And that's called a cascade delete. Look up relationships don't have cascade deletes. So if we were to delete a stage, we wouldn't necessarily want to get rid of all those bands, because those bands are still around and they could play at a different stage. Alright, we've got our schema set up. We've got bands, which look up to stages. Yep. Which look up to festivals. And then we got our attendees hanging out, also looking up to festivals. It's all looking good. Maybe we should add a couple band records? Yeah, let's make some music happen. Let's do it. Okay. So I'll go to Setup, and we don't have any band tab up here. What am I going to do, Sam? Yeah, so one of the trade-offs of building in Schema builder, is it doesn't have that little check box to automatically create a new tab. And so we're going to have to do that ourselves by manually getting there in the Setup. But the sidebar on the left is kind of overwhelming. There's a lot of stuff you can click into. But you can use the Quick Find, which is that little search bar in the top over there. And if you know what you're looking for, like for example, creating a tab, you can just type Tab, and it filters it for you. Okay, cool. Okay, so I'll click Create Tabs? Sounds good. And I'm guessing New here? Yep. So we've been through this drill before. Yeah. This is my favorite decision to make. okay, so. What do you think? What should the band tab look like? Music note? That sounds good. Okay, and I'm going to hit Next a bunch of times, I'm sure. Default Visibility on. Sounds good. Okay, I don't want it to be available to all these silly default apps. Right, just the festival app. Okay. Cool. Okay, we've got bands up here. So now I can add a record. okay, now. Add a band, and all it has is name. So that's the other trade-off with building in Schema Builder. it's not automatically added to the page layout. What isn't? Like, the fields, all of those [CROSSTALK]? All of the fields that we created, yeah. So let's just create a band. So just pick any random name that you want, or I guess not random, pick a band that you want to play at our festival. Okay, I don't know. Who do you like? Changed slightly for copyright purposes. [LAUGH] Let's do U3, my favorite band. So we've got our band, U3, and it doesn't have the fields like genre and all that. But we can add them, I hope. So, if we ever wanted to modify the page layout, like adding fields or even moving fields around, taking them off, whatever you want to do. You can either do that from the Object Setup Detail page in Setup, or easily from the page right here in the top right hand corner where it says Edit Layout. Okay. So. those are my fields, I want them. Genre, headliner. There you go. Right now we're looking at the Page Layout editor in Setup. And we have all of our fields, or if we made custom buttons, or maybe had other lists that we wanted to show, we could drag all of those into the page layout. So why don't you grab a couple of your fields, and then put them onto the page? Alright, so I'm just going to drag these down. Let's see. Where do I want to drag them to, down to Band Detail I guess. Yeah, but not above the name. Oh, not above the name. Right. And I'll do that for all of them. Yup. And so you have columns so you can drag those fields to the other side also. Okay. All right, cool. So I'll put my contact information on the right column. I'll put this other stuff over here. And if you wanted to, at the top here, it says you can drag sections. So you can even create new headers for more information, like if we had a finite set of stuff that was only about the stage, we could possibly drag down a section and name it like stage information or something like that. Cool. Okay, so that wasn't so bad. I just had to drag all these fields on. I think I still prefer using the Wizard, though, because I like that it does everything for me. Schema Builder's cool, though. I mean, there are tradeoffs to both. Definitely with the Wizard it allows you to, you know, do everything you might want to do from security to field creation in one clean sweep. But if we would say, knew our entire data model, right from the beginning, it would probably be pretty tedious to have to go through the seven steps for let's say, 100 fields. Right, [INAUDIBLE]. But dragging them all, you know, in the Schema Builder it allows you do to a lot at once really quickly. Okay, makes sense. So we have all these fields added to the page layout in theory, so now I can go add a record. Yep, but don't forget to click save, because that's like the easiest thing to forget and then it just loses all of your work. Okay, I would never want to do something like that. Okay, cool. Now all of these fields are there, but obviously they are not populating yet. So I just goto Edit, and I'll fill up these fields. Okay, so there's going to be a ton of bands coming to this festival. Right. I guess this is the tedious part, where you have to enter them all in, or is there any other way we can do this? So, you can save this record, but there's a really way to take spreadsheets or more specifically CSVs And put them into SalesForce using what we call the custom import wizard. Okay. Let's just go into the setup and then we can import our CSV to load those records into SalesForce. Okay. So I want to import something, should I just search import up here? Yeah, don't try and memorize any click paths. Let's just search for the import. And there's a few import things. Which one should I use? Import Custom Objects is probably the safest bet. Okay. I don't trust anything in beta. [LAUGH] Fair enough. This here tells you all the steps that you need in order to be able to import custom objects, but we'll just walk through it ourselves. Uh-huh. Don't need to read all that text. And we have this CSV that you showed me here, this spreadsheet. Right. Band spreadsheet. Yeah, so we have all of our fields along the top and then each row represents a record. Mm-hmm. And, if for any reason, let's say, you spelled your fields different than the way we have it up ion the column names or column headers, we could just manually match them. It will automatically try to do it for you, but if anything is mis-spelled, or anything like that, you could manually map them yourselves. Okay, cool. So let's close this and start the Import Wizard? Let's do it. Choose the type of record you are importing. That would be band. Do you want to prevent duplicates from being created? Yeah, I don't want two bands with the same name. Right. That's right. We want to make sure the band names are unique. Okay. Got it. Existing records are found, what do you want to do? There won't be, so I guess it doesn't really matter. What's this mean, which user field are you including? Well, since we're not including any user fields, we can just leave it as default. Or, I guess we could put None. Okay. Yup. And, what about this? Which look up fields, if any, are included in your input file? Our spreadsheet didn't have a stage on it, right? Right. So I should not click it. Yes. Yes, I should not? You should not click it. Yes [LAUGH]. Now we need to choose this CSV file. So, look it up on your computer, and add in those, those bands. All right. And you can leave that as default. Okay. We haven't ran any workflow rules, so we don't need to check that box. Okay Field Mapping. Is this that stuff you were talking about where Band name, band name oh that looks good. Yeah so it's map some of them because they're exactly the same as what they are in your CSV, but for some of them like has piano. Needs Piano. Okay so I'll go ahead and change those. So we actually didn't add special requests as a field in our, in our band objects so I can just say ignore those special requests. Yeah. And the same thing with expected draw? Yes. And it tells you there that those values will not be imported. That's fine and you can just click okay. Import now. Awesome. So, it's basically just going to put it into a queue. It'll import it when it can. And then you'll get an email, when it's done. Cool. All right, so, we're finished. Alright, I got my email, saying that it's finished. So now, I want to check out all my new bands, but they're not there. Well, this only shows the recent bands. If you click the Go button right there next to the view all. Uh-huh. Will adjust the list view to show all of the bands inside of your [INAUDIBLE]. Okay. Awesome. We have so many bands. So we have all our bands. Yup And I want to start putting them on stages. They have to, they have to play. Right. Right. So I'm going to go into these records. Okay, so here's the band, and the stage field is blank, as is set time. Yep. And let's say we want to play, they're going to play at what, 10 a.m., at stage four stage. Okay. Okay, so that's good. but what if I actually wanted them to play at two different set time? Like, you know, one at 10:00 a.m., and maybe again at 11:00 or maybe at a totally different stage? Is there a way to do that? It feels like I would have to create an entirely new band or something, a new record. That's turning a relationship into something a little bit more complicated than just a simple one to many. So, let me actually show you on the tablet what I mean. Okay. We're starting off with, we have our stage records. And I'm only representing it as one stage box, but this could be any of the stages that we have. And then each of these stages has a specific time we can book them for. So like, 10 a.m., 11 a.m., 12 p.m., etcetera. Sure And then, for each of these time slots, you could have any sort of band playing there. So, let's say we had you know, our first band playing at 10 a.m., but then for your second band, you want them playing at 11 and 12. Oh, okay. Yeah, you're right, this is getting more complicated as a data model. So this is clearly not how we represent something in sales force. Right. Instead of now having a one to many relationship, we have a many to many relationship. Where a stage can have many bands But bands can be playing at multiple stages at many times. Right. We're no longer tracking you know, what stage are the bands playing at, but it's more-so what time are they playing at those stages. Because now there's another unique classification there. Mm. So we've added this sort of like intermediate object. Exactly. And what we'd call that intermediate object in Salesforce is a junction object And what a junction object does is it represents every unique instance that we relate a band record to a stage record. Okay, that makes sense. But what would, this isn't how we draw our scheme in SalesForce, so, what would this actually look like in SalesForce? Right. Before, we had just stages and bands. Right. And the relationship had that little line with the three forks at the end. Right, our stage had many bands. But now, we have stages, bands and this junction object called Set Time. Okay. How do you think that this relationship will look, when mapping it out? Well it seems like each stage has a bunch of set times, so I want the relationship to go like that. And each band can sign up for multiple set times, so I want the fork on that end as well. So I guess the forky end goes on set time for both of em? Yep. That's right. Cool. So this is our junction object. Looks good. Let's build it. Okay. We want to make this junction object called set time. Right. Because we want this menu to menu relationship between stages and bands. Mm-hm. And cool. Okay, I'm going to go into Schema Builder. because I want to see what we're working with now. And obviously right now we don't even have this set time object, and band is related to stage. So, is it just as straightforward as this looks? I have to delete the existing relationship between band and stage and then, you know, sort of create this new stuff? Yup, just create that new object with those relationships, and it's as simple as that. All right, let me give it a shot. Alright, so first thing I need to do, I'm guessing, is delete this relationship between band and stage. Right. And if I right-click here. Okay. Delete field. That's was pleasantly expected. yes. I want to delete the relationship. Gone. Band is on its own now. That's sad. But band you'll be friends again soon. So then I'm going to create a new object so that I can, you know, make this whole thing happen. Right. A new object to be able to track not only the relationships but maybe other details about, you know, what time they're playing and what the status of it is, or something like that. Okay. So set time. Now, this is different because before we've been naming everything like the band names have actual names, attendees have real names. Mm-hm. But this set time, we're not going to want to have to name every time. Yeah that feels silly. And so that's when you can change the data type of the name from text to an auto number. And the auto number is just an automatically generated number. Okay. Following this sort of. [CROSSTALK] Just increments up by 1. Exactly, yeah. So, display format. So can I just like, ST? Yup. Will let me get, okay, [UNKNOWN]. That works. And then are those curly braces? Curly brace. So this means it's going to start. At zero. Er, well, give it a starting number of one. Okay. Like that? Nope, just one. Okay. Yep. And then it'll increment, every time you create a record it'll. [INAUDIBLE] Exactly. And then Save. Okay. Now, I can add my relationship fields. Right. Let me think about this. Set Time is the child of both band and stage. Right. So I need to have Put the fields on set time. Exactly. Okay. And you can't really have a stage without set time, so should that be master detail? Both should be master detail, definitely both should be required. Okay, so we filled that out, and Save. And now the next one for bands. Hey, that's pretty cool. Yeah. Our relationship here looks like our relationship there. Yep. You've built your first junction object. Junction objects are useful when you want to have a many to many relationship. You've seen one to many relationships already, with festivals and attendees. In fact, you could say that a festival can have many attendees. But you wouldn't necessarily say an attendee can have many festivals. Then we got to this situation with stages and bands. Once. One stage can have multiple bands, and one band can not play at multiple stages. This is a many-to-many relationship. To make this relationship happen, we needed to create the set time junction object. Now let's think back to Facebook, who uses Salesforce to manage some of their hiring processes. I'm going to give you a few situations, and I want you to tell me which ones would require a junction object? This first situation would require a junction object. Since applicants can be interviewed by many employees, and an employee will interview many applicants, this is a many to many relationship. The second option would not require a many to many relationship, because it's a one to many relationship between the job application and the feedback. So, no junction object is required. This last option would require a junction object. There's going to be multiple positions on multiple sites. And this would require a junction object. So, we have our Set Time object, and we've created that relationship between Set Time to Bands and Stages. Mm-hm. Now, that's great, but there are probably a few other things about Set Time that we want to track, like, for example, we took that Pic-less field that was a list of times and now turned it into this whole object, so we probably want to track what times these bands are playing at. Mm-hm. Or, maybe the status of what's going on with the set time link? It was cancelled or confirmed or whatever. Yeah. So we can do that right there from the Schema Builder and keep building out our object. I added fields to my Set Time object. Great. I added the tab so I can see it here, and I have clicked in, and I am ready. I'm going to start entering some records. Sound good? Sounds good. Alright. What time shall our first band play at? Oh, I mean what stage should our first band play at? [LAUGH] let's put it at the Udacity stage. And I know that I can go into the page layout thing and add those other fields if I wanted but. Right. Not. Yup. Too concerned right now. Okay. And, what band should be playing? Search for something. See if they what about code? There's gotta be a code band. Code Against the Machines, what about that? Code Against the Machines for sure [LAUGH]. Right and save. So this is our set time record. Right For code against the machine, playing the Udacity stage. Right. So we can see how it links to both the stage and the band. Okay, so let's see what happens if I actually click on Udacity stage. So this is the stage record, and yeah it's not showing me any of the bands that are playing here. Which is unfortunately, because I would love it to. It feels like it should be showing me that. So it should be showing you that, and it could be showing you that. How do you think you could add it there? As a new developer, you might be tempted to memorize a certain click path in order to get some kind of process done, but it's not always a good idea. Instead, it's better to find the general area of where you want to get something done, go there, and then figure it out. Let me explain what I mean. The setup page is an important place to go. It's where you go when you want to customize your app. This Schema builder lets you visualize the objects and relationships and add fields to them. It's a good place to go to get the big picture view of what you're building. When you click on an object, you get to the object homepage, which is a good place to look at specific records. When you click on a record, you get to the record detail page. Which gives you specific information about that record. The Quick Access menu gives you handy shortcuts to customizing your application. And finally, there's the page layout editor which helps you select the fields and display them in the order that you want them. They'll run pretty quickly and you're not going to remember everything I said. Sales Force has a lot of ways to do something and if you click around, you're going to find it. If you don't, try clicking the help link or use the discussion forums Because this was a problem of what was visible and not visible, you need to go to the Page Layout Editor. So, Sam, I've thought about it. Yep. And I think that in order to, successfully from this record page, from this stage record page, and you can just see all the set times, I need to edit the layout. Yes. Exactly. That's fairly obvious in hindsight, but here we go. LAUGH So before we were dragging fields onto the page. Uh-huh. But now what were trying to drag on, is a list of related records. Okay, so I should click Related List over here. Exactly. Okay, good. Set times, and I'll drag it down and that's lovely. Awesome. Click Save. Don't forget that guy. Thank you. You've added or moved Related Lists to this page layout. Yeah, I always want to overwrite. We want everyone to see the set times. Yeah. Set times are important. Cool, set times. But that's totally lame, I don't care about ST 0001. Yeah. Can I get more information than it? So the auto-number isn't too useful. But we can also from the page layout modify what shows up in this related list. So let's actually go back into the layout, or page layout editor and fix that. So if you scroll down to the Related List, you'll see that little Wrench there, and that allows you to customize what columns show up in that table. Okay, so we're on the Stage Record. So what would you want, if you're looking at a stage, you'd probably want to know. What band is playing. What band, What time they're playing. Yeah. What day they're playing. The status. Yeah. So basically all those fields. So Band, Band Name. And you definitely want to leave the Set Time Name there, even though it's not too useful for us, because that's going to be what allows you to click into the Set Time Record itself. It will link you to that record. Okay, cool, Save. I knew this time. That is much better. Code Against the Machine and of course we haven't actually specified a day or time. Right, so, let's go. Let's do some cleanup. Yeah. Let's go fix the Set Time Record, add those fields to the Page Layout, and we're going to have the same problem with not having a related list on Bands. So, let's also do this on the Band Record also. Okay, sounds good. Sam, we did it! Nice. [SOUND] We've got our two set times, one band, code against the machine, playing at 11 a.m. on Udacity Stage and 6 pm. on Stageforce. Sweet. All right, so this is starting to get a little hairy. We've got all these stages and all these bands and all these set times. Yeah. And this band is playing multiple times. This is a lot to keep track of. Right. And I think at real concerts or real festivals, what they do is, they hire someone, they have a stage manager. Yeah because, I mean, you can be booking these people at multiple stages, multiple times. There's a lot to manage to make sure the scheduling and everything goes to plan. But, instead of creating a Employee object or something like that to relate as stage managers, we can use the User object, which is a standard object that already comes in the developer org. And it represents, you know, all the people that are actually logging into Salesforce and using your applications. So this is what real users would be doing in order to log into your application and actually use it. Okay. And so that object is already there. That object already exists. It's hidden in the background. We haven't seen it yet. Right. So if I go to Stages or something. Yeah. We want to relate the user to the stage object. So the stage would essentially be a child to the user. Where they're looking up to a specific user to. To figure out who the manager is. Stage manager is. Exactly. So I'm going to use my little friend on the right. Yeah, the quick access menu. I haven't used him in a while. [LAUGH]. That's nice. Okay. new field. Exactly. because the object already exists. It's a relationship. It's a relationship, and it's going to be a lookup. And, mainly because you can't actually do a master detail to a user object, that's just one of the requirements in sales force. But also, we already have all of those records created, so we couldn't even do a master detail if we wanted to. Okay, so, it's related to, user. Right. And, of course, the next ritual. So, you want to change that to say Stage Manager instead of User. Okay, that makes sense. Okay, so we've added our user field. Right there, yeah, sweet. Stage manager, look up to the user. Great. Cool. So, let's go back to the Udacity stage and make you the manager. Yeah! OK, Udacity stage. So there's the Stage Manager field, you can just double-click it. Okay, so, I can double-click here. Use my magnifying glass friend. Sweet. And, it already knows, I'm a user. That's, that's creepy Sam. I don't like when, Sales force creeps me out. How do they know that? Well, you're the logged in user right now, and you're the only user in your organization because you just created it today. Okay. And I don't have a role, but presumably I could. Okay. Save. Yeah. And we even could have created a filter to only show people by certain roles to show up in this lookup. Cool. Okay. So, we've done it. Great. I'm managing stages. You're the manager of the stages now. [LAUGH]. In this lesson, you learned how to conceptualize and create a complex data model with relationships. you learned the difference between a look-up relationship and a master detail relationship. You also learn the difference between a one-to-many and a many-to-many relationship. Going forward. In the next lesson, we're going to take all of the data we have in our custom schema and create reports to summarize it. Afterwards, we'll create colorful charts to give us real-time snapshot views of the most interesting aspects of that data. See you next lesson. Welcome to lesson three. In the last lesson, you've built out your data model by connecting objects with relationships. Before we talk about what you're going to do in this lesson, let's follow Samantha and Andy back to the music festival. So this festival was tons of fun but clearly at its core, it was a big business. Yeah. We had to buy tickets to get in. We paid for food. We bought a couple beers. We even paid to ride the Ferris Wheel. And some people were even paying to do arts and crafts. Music festival managers aren't just making money, they have to spend it too. Right! They have to pay for the bands, they have to pay the salary of their employees. Pay for equipment. So obviously, they're keeping track of all these revenues and costs. And these numbers are so important that they probably want to understand them quickly and easily. And in Salesforce, that means visualizations like charts, reports and dashboards. In this lesson, you'll use Salesforce to quickly visualize your data using charts, reports and dashboards. Sam and Andy are going to help you with that. So, it seems like if you're a music festival manager, there are a ton of opportunities for visually conveying information to other people. Totally. I mean, with all of the different things that you're tracking, maybe you want to track things that are over time, or maybe you want to track just the distribution of a specific thing. Like VIP tickets versus general admission, or money over time, or something like that. Exactly, and just like whenever you're charting anything, there are different types of charts that you might want to use in order to display that information. Yeah. Or, maybe we just want to create reports on it. Alright Andy, what do you want to build, or what kind of report do you want to make? I really like those little needle sort of, you know, the one that actually shows up in your car dashboard and says like, oh you spent this much. And if it's green you're really happy, but that would have to do with, you know, have you made as much money as you were hoping for? So, I think you're talking about an odometer in your car. Yes. And then what you're talking about in Salesforce would be a gauge chart. Okay, let's make a gauge chart with a needle. Yeah. So, in order to do that for total revenue on the entire festival, we need to go down to the attendee and create a formula field first on how much each attendee spent. Because we know how many tickets we have, or how many tickets they purchased, and we know how much a ticket costs. Remember they also have different ticket prices, so like the V.I.P. ticket will be like a $100 and general admission $50. Exactly. And so that's probably why a formula field would make the most sense in order to store that data around that conditional use case. Okay, so add a formula on attendees to figure how much money each one's spending? Yeah, let's start off that. Okay, let's see if I remember how to do this, let me go to Attendee, New Field, Formula, Total Spent, Return type; currency probably makes sense. >Yep, yep. Alright so we want to add our formula and I'm trying to figure how to do this, like, you know, 50 times ticket sold, Right. Or 100 times ticket sold, but it depends on the ticket type. Yeah, so before this we've been dealing with pretty simple formulas where it's just addition or multiplication. But in this case we're adding a little bit of conditional logic, where we're trying to figure out if it's one value, do this, if it's another value, do this. Mm-hm. So, let's go to the advanced formula tab, and then look at some of the functions we have available to deal with that kind of stuff. On the right hand side, we have all the different functions you have available. If you click on that little pick list, you can even change it to functions on specific things. In this case it'll be a logical function we want. Because we're logically trying to figure out if one thing or if the other. So, immediately it's like if statement makes sense, right? But if you didn't know what you needed, you could Google it or go to the forums. All that's totally fine way to find it. Okay, what does this part mean? The if logical test value if true, value if false. So that's a little sample of the syntax of how to use the if statement, and what the logical test means is you provided some sort of function that will be true or false. Like ticket type equals VIP. Exactly. Okay. And so, if ticket type is VIP, it'll. Do this first thing. Do the first thing, which is Like 100 times the number sold. Ticket. Number sold. And then, if it isn't VIP, then it'll do the second parameter. Okay. So, 50 times tickets sold. Yes, so that would be the general mission. So, that's what I do. All right. So, I'm going to highlight this logical test. And delete it. Is that okay? Yup. And, insert the field. Okay. So in this case, I'm checking if ticket type, which is way down here, is equal to VIP. In quotes. In quotes. And the quotes are for? because it's a string. String. So just some text. So if the ticket type is VIP, and the total spent is 100 times the number of tickets sold, which is a field. Exactly. And then the value, false, let's say, you know, is $50 for, so it'd be the exact same thing, but it would be 50 times the tickets purchased. Okay. And you don't have to go through inserting the field that way, you can just type it out, or copy and paste it. Can I like, hit enter here, and make it a little neater? I don't know, it's hard for me to keep this all in line. Sure. Okay, so this should work, let's check syntax. Uh-oh. Field type, field ticket type C is a picklist field. Picklist fields are only supported in certain functions. So I think that there is a special function that's only for pickles fields, but I can't remember what it was. Maybe we should, copy and paste that error into Google and see if it tells us what that error is? Formula for pickless field. Right here, awesome,. Ellen Williams. So, she also is writing an if statement that's using pickless values. And so you can see here, if is pick val, which is the function that you need to use, that's the, stage name is the field, and then pending is probably the pickless value. So if the stage name is pending, do this. So we need to use that also. It's funny that she was dealing with stages, too. [LAUGH] [INAUDIBLE] So let's grab from the functions on the right, and over here. Uh-huh. We can grab text. ISPICVAL. Yep. ISPICVAL. There it is. Okay and where to do we want to put this if? In that first, yeah, over the Ticket Type VIP. Okay, then like, pick this field. It's going to be ticket type, and the text is VIP. Yep. Alright, let's check the syntax now. Awesome. That's cool. Alright. This formula's a bit of a beast. I would not have come up with it by myself. But I guess Google was a good, good tool. Is that something you find yourself doing a lot when you're developing? yeah. I mean, because, we're not supposed to remember everything. And so, definitely whenever I run into errors, I'll Google the error itself because a lot of people have ran into the same things before. There's also in the upper right hand corner these Quick Tips for getting started, seeing samples, more examples. I mean, there's a lot of tools available if you are new to formulas. Cool. Formulas can be as simple as like ticket price times quantity equals total cost. But they can also be powerful and really dynamic. While a traditional formula usually consists of solely numbers and mathematical symbols, formula fields can manipulate a bunch of different data types, like dates, for example. Your festival object has a start data and an end date. What do you think will be the significance of the formula, end date minus start date plus one? End_Date minus Start_Date plus one would actually give you the length of the festival. Why? Well, let's think of a one-day festival that starts and ends on the same day. N minus start would give you zero, you'd add one. For longer festivals, the same logic would apply. But the key thing to note here is that you would use a formula to do something very powerful that you may not have expected. You can create formulas and expressions made of a bunch of different things, like fields, numbers, dates, operators, functions. Also, depending on how complex your formula is, you can nest or concatenate them, as much as you need, to obtain the appropriate result. If you're into formulas, check the Quick Tips and Getting Started help links. If you're getting syntax errors, Google for techniques of what you're trying to accomplish. Now let's go back to Samantha and Andy to add some more formulas to your Festival app. Alright, now, let's check and see if this formula actually works. Alright. And then we can make our little, our little odometer thing. Yep. Let's go look at an attendee record to make sure that it's actually doing its job right. Johnny Concert? Let's go back to Johnny. Wow, that is so cool. Okay, Ticket Type, VIP. Tickets Purchased, 2. Total Spent, $200. Nice. We didn't even have to tell sales force. It just knew. I mean, I guess we did. [LAUGH]. But, still figured it out. Okay, so, good. We've got one, each person, we know how much they spent. Yup. Next we want to know, at the festival, how much money have we collected. Yeah. So, in order to be able to display that, we need to create a report. Okay. So, I'm going to click Reports. Yup. Think I'm figuring this out, Sam. [LAUGH] And we want to create a new report. So, I'll click New Report. What do I do next? So these are mainly all off of the standard objects, but we want to use our attending object. Makes sense. So. I'll quick find it? Quick find it. Activities with attendees. So, those are part of the solution Yeah. package. So, definitely not those. I, I don't know if you remember earlier when we were creating the attendee object, how those little check boxes at the bottom of the edit screen. It sounds vaguely familiar. Yeah. So one of them was to be able to report on that object, so we'd need to check that box. okay. So I'm going to go to attendees, and view the object itself. Yep. Now a little bit different from before, we're just going to edit the object completely. So just click that little edit button. Oh, yeah, yeah, yeah. This looks familiar, right? It does. Yeah, so right there, optional features, allow reports. Makes sense. Save. And then Now I think, yeah, I'm just going to go through and do this for all the other stuff we might want to remember. Sounds good. So like what, festivals, bands? Festivals, bands, stages, sounds good. Okay, I enabled reports. Yep. I just want to make one of these charts though, make my Gauge, my Gauge Monitor. [LAUGH] Well, we're almost there. Okay, so, New Report. Now I'll search for attendees again. And there it is. Festivals with Attendees. Yeah. Oh, Create. Alright, and this is again? It's a lot to look at, at first. So, think of a report at it's lowest common denominator. Mm-hm. It's just like a spreadsheet. Okay. So down here in the little preview area. Yeah. This is going to show you some of the records. Not all of them. Like, right now it's showing festival name, attending names. It's not showing you all of them. It's just doing a little preview of what the report would look like now. Okay. So, on the left side bar, you can drag all of those different fields, which are fields on festival and attendee into your report, so we can see summarized data about those two objects. So, what would dragging a field be? If I dragged in. Well, what's something we care about in our Gauge report? Money. Right. Total Spent. So, grab that off of the Attendee object. Okay, and there's just a few places where I could drag it, does it matter? you could put it anywhere. And you could keep dragging and dropping, reordering this as you go. Okay. Okay, I get it. So this is basically a spreadsheet and I'm just choosing which columns to show. Exactly. So let's pick a couple other fields like. What are a couple of other fields that you might want to show in this report? Like maybe they wouldn't necessarily come up on the Dashboard or the graph that we're trying to show, but if you were to hand off this report to an executive or a manager, what are things they would care about seeing? Ticket type. Are they buying VIP or general admission? Yep. Maybe number of tickets purchased, or I guess you can infer that based off of ticket type. Yeah Let's not make them do that. Maybe the purchase source, cause they care where most of their stuff's coming from? Sure. Sure. But yeah, you can keep modifying this, like, Save As, do a couple different reports showing different data if you had a lot of different fields. Okay, so should I save this now? So yeah, let's save it for now. but we want to keep going. So what we're doing here basically we're, our goal is to make this, this you know gauge this little odometer looking thing. Mm-hm. But, as long as we're making this report, we're just, kind of, figuring out all of the information that might be relevant to convey. Right. Okay. So the great thing about reports is, they don't necessarily have to be turned into charts. You can keep them as reports too. but before we can turn it into a chart, we have to change the report type. because right now, if you see next to the preview we're set to the tabular format. huh. And the tabular format is the simplest type of report, which is what we're looking at right now. huh. Just simple like a spreadsheet. But you can't actually turn that into a dashboard. Okay. So, if we click the other report types. Summary Summary, which is really similar to tabular, but it just adds a little grouping for you to be able to more granularly categorize the data. Can I click it and see what you mean? Yeah. 'Kay, so what do you mean by grouping? Like, what could I group on? So, maybe one thing that we'd want to group by, instead of doing it the way we have now, is if you take that Ticket Type field, just grab it from the header, and then drag it into where it says Drag Field Here. Uh-huh. Oh, cool. And so now what it's going to do, yeah. It separates all of the different ticket types to, these are all of the ones for our VIP. And then it'll give you a little subtotal for how much has been spent on VIP and then same thing for General Admission. That's really cool. And there will be a grand total at the bottom. Okay there is no grand total. Well, there will be, but this is just a preview. okay, so that's pretty cool. that's summary, what were the other ones? So the other ones are matrix, which is really similar to summary, but you can also create groupings on the left-hand side. So, that's why it's a matrix, you can do it along the top and the side. Okay. And, then joined is kind of just a culmination of a bunch of reports that you can then just be able to show different types of data in different ways, but have one huge report. Okay, okay. So, how do we, how do we go from this summary report to that, our nice little gauge dashboard? Yeah. So, what you want to do is we want to click Save One More Time because when you run the report, it doesn't actually save it. Okay. After it saves, click on Report. Okay, so here's our report. And we've got our VIP ticket type, total spent for each person. You know, I would have liked a sum total down here. Yeah, I totally forgot the last step. So, let's go back into the, our Report Editor by just clicking Customize here. Okay. And it will take us right back to the view we were in before. So what we care about is the total spent column, right? Um-hmm. So let's actually drag that to the end, just so it kind of keeps that separate and we can see the total on the right. Okay. And then click that little arrow, and then what we're going to do is we're going to want to summarize this field. Okay, that makes sense. And then click Sum so it'll create a total for each of those. Yeah. And now we can see it's going to sum up all of the VIPS. All of the General Admissions, and we'll have a grand total at the bottom. Okay, so I'm going to save and run Report again. Yes. All right. We've got $14,600 bucks from VIP tickets and then $28,000 or so on the General Admission. Nice. Okay. That's cool. So now if I go to the bottom, okay, keeps track of the total amount. And I'm guessing this is, I mean, I know that this is the number that somehow has to feed into our little, our gauge thing. Exactly. So now that we have our report done with, we can go to create a Dashboard off of it. Okay, how do I do that? So, if you go back to the top, one of the tabs is Dashboards. So, we're going to want to create a new Dashboard. And a Dashboard itself is a layout for a bunch of different dashboard components. And so the report that we just made is going to create one dashboard component, which is one Gauge Chart. Okay. And Dashboards can be a culmination of several dashboard components so you can see snapshots of a bunch of different stuff at once. Okay. And if I, if my, Intuition is right? Yeah, intuition, that's the word. I'm going to drag some things. Yeah, so drop that guy in, looks just like a little odometer or gauge. Okay, so like a data source here, okay. So the report that we created is a data source and there are a couple different data sources you can create, but that's the easiest one to make, which is point and click. So, I'm going to click Data Source, open Reports > My Personal Custom Reports. Oh, wow, this is actually really easy. Isn't this exciting? Yeah, I know, the anticipation is killing me. [LAUGH] Hey, cool. Alright so I obviously want to change some of these things. I want to set some milestones or something. So what should we do? So, the first thing that we need to do, is scroll up and click the Wrench. Oh yeah, always the Wrench. So what we're going is setting the different areas of the gauge chart so it shows red, yellow, and green. Gotcha. So what's our goal, Andy, for the event? well we've, we're kind of making this up. Let's say the goal is $200,000. Sounds good. so then that's, well that'll be the yellow to green threshold, let's say. So that we then, if we make more on that, we can still see it go beyond that. I'm going to make this one 300,000. Okay, and so then that red would be 100,000. Yup. Oh, cool. So usually these thresholds would be based off of real metrics. Yeah. In this case we just made it up but you can see where the progress is on the right. And there's actually, it turns into a smaller number in order to make it fit. And so it says 100, 200, 300 but you can see the sum of the total spent is really in the thousands here. Now if you go to the Component Data you can change how it's showing this gauge. I can do Whole Units, and then it overlaps and it looks crappy so we'll do, I think thousands is fine. Thousands looks good. you can also change the value so maybe you don't want track the actually total spent. Maybe you just want to spent, see how many different records there were. if you, I mean we don't in this case. No But I'm just saying, like there, there are option here for you to be able to work with the same rapport but display different data. Okay, cool. And so let's pretend, if this were a real festival. The, this first threshold, 100,000, would be like, that's your cost, that's just recuperating your cost. Maybe 200,000 is your goal, and then that's a bonus or something. But really, immediately, we see off of those like couple hundred records, hey, we have a lot more to go before we hit our goal. Okay, that's pretty cool. So essentially, I mean, when we're making this all of our attendees where going to cloudstock. Right. If we had had multiple festivals, I assume, I don't think, we didn't do anything to say, hey, you know, keep track of, make sure that these attendees are going to one certain festival. Right. Yeah, so, we would have to add a filter into our report. Uh-huh. To be, especially for just one festival with CloudStock. So. We could say total CloudStock revenue. Yeah. This is really total of all festivals, as is. As is. But, yeah. So let's go into our report. Okay. And modify that. Alright! So I'll call it my festival dashboard. And then Save. Or Save and Run? Save and Run. Yeah! You can totally see how once we had a bunch of these it would be really awesome to see all the information about our festival at a glance. Yeah, sure. So we want to go back to Reports and Modify. Yes. 'Kay. This one? Total revenue? Yep. Since that's the data source for the dashboard. Exactly. And so we want to click Customize again to modify this report. And so at the top where it says to Add Filters click Add. okay. So festival, oh, new to, and even new I want to filter on a festival. So, you want to add, if you click the little arrow next to that. Yep. Festival name? Festival name. And then Cloudstock. Mm-hm. And that's not going to change this becasue all of are attendees are already there, like that but. Right! But if you would have associated anyone to Ruffle Blueser. Mm-hm. This would eliminate that. So, what else do we want to make a report on? I think it would be nice to, as a way of gauging in the future how many V.I.P verse general admission tickets to sell. That we sold over time? Well, keeping track of that, so that you know maybe for a concert in a year from now. I'll be able to say historically this many people buy VIP and I'll be able to sort of, you know, allocate the space appropriately or something like that. Okay. So yeah, tickets over time. Yeah, so that's a really similar chart to what we've already made. So we can actually just keep using the same report and then save as at the end Okay. to have a completely different report. Cool. So we have our grouping here already by ticket type. But the other thing that it sounded like was really important was the over time thing. And so, we have that one field. What's that one field that we have on? Purchase date, I think? Purchase date, exactly. Yeah, so, we'll want to group by purchase date also. And so we can create another grouping. That we can drag straight into our summary report. Cool. Okay so let's go down to Attendee > Purchase Date. Well let's think about this really quick before dragging it in. Do you think that you'd want to group by purchase date first? Or do you think you'd want to group by the ticket type first? So my gut says I should group by, by date first? Because I'm, when I think about this, it's thinking like how many tickets were sold this month and then within that month, how would those tickets distribute? How many were each? And you're right. You should be grouping by date first because that's the overarching categorization. Okay. So. Grab the purchase date field and then drag it above. Above. Ticket type. Oh, cool. Yeah, but, the thing right now with purchase date is it's everyday. Everyday. And we don't want that. We want to do it by month. Right. So, if we, click that little arrow, and then Group by Dates, or Group Dates By. Yes, that's awesome. Calendar month. Alright, so October had 20. One which is VIP, that's awesome. Okay. So again this is just a preview. So don't freak out if it doesn't show all of the records. because I know sometimes people do. Okay, should I hit Save and then? Yeah click Save always. As. Save As, yeah. That was close. Okay, Total revenue over time. Yeah, I'll say by monthly. Oh, by month. Yup. Save and Run? Save and Run. Oh, that's so cool. So we've got May 2013, we had 14 VIP tickets and 17 General Admission. June, a lot of people bought tickets. All right, this is very cool. So now I, I mean I want to make a chart. I'm going to fool around. We can actually create a chart straight from the report. Okay. not all chart types are accounted for in the report itself, but what's great about creating a chart directly from the report is if you put it in multiple dashboards, it can have a uniform way of showing all that data across all those different dashboards. Makes sense. So, if we click Customize and go back into the report. We can add a chart type straight to our report right here. Oh, nice. And so, what do you think? Bar chart? That probably sounds like it makes the most sense. Bar chart makes sense, yeah. So, on the X-Axis. I want to, I want to vertical of a bar chart. Okay. So X-Axis I want to be Purchase Date, yeah, and Y-Axis I want Total Spent, yes. And so, click this Group By field here. And we probably want. Ticket type? Oh, cool. Okay, that's very cool. But, what's really great, is we can also change how it looks. So maybe if you wanted to stack them, so they're in one. Uh-huh. Versus the other. Oh, nice. Yeah, sure, let's stack em. So, really quick, let's just look at formatting, and see if there's anything we want to change there. I give it a title. We also probably want to enable the Hovers. So that when we hover over any part of the chart. Yeah. We actually see how much was spent for any individual. Cool. Hit OK. Awesome. So there's our little preview right there based off of the preview data. Uh-huh. But if we now Save and then Run Report, then we can create another dashboard component off of this. Wow, that is awesome! So looks like in June we were selling a lot of tickets. Actually in June, June was interesting, because not only did we sell a lot of tickets, we sold about the same as in July, for general admission, but VIP's were crazy. There must have been a special or something. Or maybe just the people who are really into the festival, like buy early or something. Yeah. They, they get to be VIPs. Yeah. Alright, that's pretty cool. So now I can, I'm guessing I can figure out how to add this to the dashboard. Well, yeah. I think. Try it out. Alright. You already saved it [LAUGH]. Kay, so saving was not the right idea there. But I'm so terrified of messing up that I like saving a lot. [LAUGH]. Okay, dashboard. going to have to Edit. Alright, so, I want to make my bar chart. I'm going to drag this over. Not sure if I need to do that. My Data Source is total revenue by month. Okay, that gave me a graph but, this doesn't have the, like the blue and the green sections. That's, that's making me sad. Should I, what should I do? Help. Little wrench. Little wrench. Always little wrench. Little wrench is such a, a good tool. Okay So if you notice that little check box in the upper-left. Use chart as defined, that makes sense. Okay, so I used the chart that I made in the report, and it gave me my favorite thing. [LAUGH] Very cool. Maybe we should edit the title and then Save and Run this dashboard again? Sure. How do I run a dashboard? click Close. Yep. Save and Close? Yep So this is not what a user would see, what we were just looking at? Right. That was the art That was the editor. This is what a user would see. Yeah, this is what a user would see. This is a little prettier. Alright, this is very cool. So we can track Revenue by Month. We can track Total Festival Revenue, and. What do you think? It looks really good. Yeah. but I don't know if a bar chart would of been the best way to display that data. Like, can you think of another type of chart that we could have used that might of been better? You're right I think tracking things over time, a line chart might be better. Maybe with two lines, one for. Yeah, sounds good. Alright, so I changed it to a line chart, and I think actually in hindsight, I may have liked the bar chart more. Yeah. But this is, this is good, and there was even an option for a cumulative, so I could have kept track of the total amount of money I'd earned. Yeah. Up to every certain date, which is pretty cool. Yeah. Alright. This is pretty cool, Sam. We've got all these charts, and let me put them in our dashboard. And then what else could we do for a music festival? Well, I mean, there are so many different chart types, right? Yeah. Like we haven't used pie chart yet. Yeah. You could probably have a distribution of all the different types of music. Mm-hm. That were playing at the festival. Mm-hm. Maybe a percentage of how may are Bossa nova? Right. [LAUGH] [LAUGH] I don't even know who Bossa nova is. I know. Well maybe we like I would like to know, for the different stages, who's racking up the most maintenance tickets, cause you know maybe they need to get their act together or something. Yeah, and I mean that's another pie chart we could make. Is distribution of priority of tickets. Like how many are marked as high priority versus low? Right, well let's let's make one. Okay. Alright, so I want to make a pie chart showing the distribution of musical genres, so I made a new report on bands, and I added this genre column. Right. I'm going to have to make it a summary. Yep. And I want to group by genre, right? Oh, okay, I didn't mean to do that. It's okay. It's okay. And you will probably want to show, I'm mean if this were a real report. Other fields about the bands that are playing. I would assume. Okay. So drag a few of those guys in there too. So I'm going to add my chart. going to make it a pie chart. Values will be record count. Yep The wedges will be genre. Just knows. This is really good. Oh, and then they will hover and you said you wanted to show percentages, right? Yeah. Very cool. And then I'm just going to run the report, or save it first to run the report and then add it to my dashboard. Sounds good. And Sam, I'm sorry, but it looks like we're only going to have 6% of the bands at our festival will be Bossa Nova. That sounds about right. [LAUGH] 30% rock, 20% electronic quite a bit of reggae and even 14% salsa. Pretty cool. You've made a few reports and charts and put them into a dashboard. Let's take a minute and discuss the kinds of charts that you can use to visualize your data. Let's take a minute to discuss the different types of charts that are available to us. Bar or column charts are good for comparing amounts. Line charts are good for showing changes over time. Pie charts are good for showing a proportion of a single value. Doughnut charts are like a pie chart, but also displays the total amount itself. Funnel charts are often used to represent stages in a sales process, and show the amount of potential revenue for each stage. Scatter charts show the relationship between two sets of data. See if you can choose the best chart for the following scenarios. Often there's more than one choice for a given solution. These are just what I chose. How do yours compare? Aright. I'm really, I'm really in to this dashboard thing. We've got our, our nice pretty visualized data. Awesome. I suspect that there is a way in Sales Force to, kind of, get this functionality, you know, filtering data, things like that, but in the app itself. And, like. I could imagine maybe, there's someone at the festival whose, whose job is to organize the electronic music bands, or the Bossanova bands for you, and that, that person might want to just look at bands of a specific genre. Yep. Is there a way to filter data like that. Yeah. So, that's actually a pretty easy functionality to create. Okay. Lets take a look here. So what we're looking at right now is a List View of just the recent bands. That's what comes up by default. And if you click that Go button, it's going to take us to the All list view. So that's showing us all the bands completely. But like you saw from that little pick list, the only option we have is All. So, in order to create a view to sort by genre, we have to create a new view. So click that Create New View Link. And so this is going to create a list view of any filter that we define. Actually going to do it Bossanova bands. [LAUGH] That's a small list. It is a small list. Select a banner. All bands. You want All Bands and then we want to choose a genre field. And then equals whatever, and so you could make these pretty complicated with filters on like dates and this date but also this name and this genre and get really specific. Like if we have multiple festivals, it could even be genres but only at a certain festival. Mhm. Okay. And so I'm going to, let's see I'm going to show the band name and I'm going to show the manager phone number and maybe I want to know their Twitter handle so I can Tweet them in all my PR stuff. Yeah. And I'll make it visible to all users. Sounds good. Hit Save. Anyway, with this set, there are only three Bossanova bands, so, this manager does not have a lot of work to do, but that's okay. [LAUGH] So I really like where we're going with this. You know, we can really visualize our data and get a feel of what it would be like to use the app on the day of. Yeah. So I want to think more about that because, I mean, having this visualization is nice. Mm-hm. But it's actually, it's not that clear to me what I would actually be doing on the actual day of the festival. Right. And you know, we haven't completely added functionality into it yet, even. Right now it's just static data and it's showing us information, but it's a little bit of calculation based off the formulas that we've made, but we haven't added too much human interaction pieces to it, you know, that actually. Yeah. Streamline processes. Okay, so, can we do that? Yeah, let's do that. Cool. In this lesson, you learned how to create reports and charts and dashboards. And really to wrap that all up in a nutshell, you learned how to present data visually, to people in a way that they can understand it. Dashboards especially allow you to see exactly what you want to see, when you want to see it, where you want to see it. In the next lesson, you're going to learn how to automate manual tasks using workflow rules and approval processes. It's going to be a lot of fun. See you there. Welcome to Lesson Four. You've done a lot so far. You created an app and a database, you added fields and objects, and you connected them all with relationships. You took the default UI and you modified it, created ports and dashboards. Yeah, your app looks pretty snazzy right now, but the underlying app just doesn't do quite enough yet. Let's go back to the music festival with Samantha and Andy and figure out what you need to do next. So we've already talked a bit about the planning and the business sides of the festival. But then there's actually running the festival. Right, because in my experience, there's a ton of things that can and do go wrong, that usually get fixed immediately. Yeah, like at a festival, there could be broken microphones, blown speakers. Bands might be running late. Right. And ideally, the solution to these problems would be as automated as possible. Yeah. And then SalesForce, we would use things like workflows or approval processes to solve these kinds of problems. In this lesson, you'll use workflow and approvals to automate manual tasks. You'll learn how to automate sending an email, updating a field, and creating a task for users. To do that, let's go back with Samantha and Andy. We've got this really cool thing. This dashboard that shows all this data about things like money and the bands playing. And this is interesting. This state about the tickets, the open maintenance items that need to get fixed. Yep. And so, you know, we've thought about how to collect the data? But really, is people doing these things? Right. We need to tell them, what to do. So, we need to automate, actually notifying the people involved with the maintenance tickets, so they can get. Started you know, fixing those problems right away, yeah? I mean, so, can we make it so that you know, a ticket gets created and then immediately a technician gets alerted or something like that? Definitely. So, what you're describing sounds a lot like a workflow process. this is taking like something that's a manual process and automating it using a set of actions. So, in the case of maintenance tickets. Maybe you want to update a field, or send an email to this maintenance worker, or give them a task. You can do all that using, just point-click configurations on your workflow. Cool, let's do it. Yeah. So we can get to the workflow in the setup. So if we go into the setup and then type in workflow into the quick find, we should be able to create a new workflow right here. Just click on Workflow Rules. What is workflow? And so, yeah. Here breaks down the different actions that we can do, and like certain tasks that you might be able to automate. But, we don't, we don't need to go through this. We can just do it ourselves. Yeah, that's what you're here for. To explain these things. don't show me this page again. Actually. Maybe. [LAUGH] When I'm not here. Yeah. Great. So, the first thing we want to do is create a new rule. But, before we create that rule, let's think about what we're trying to automate. So, I want to automate the whole repair process. Mm-hm. You know, you file a maintenance ticket. And then I want to automatically alert a technician. Right. And so, a technician is just a user in our organization. So we have two options. We can assign them a task. Mm-hm. And so when they first log in to Salesforce, on their home tab they'll see all the open tasks that they need to complete. Cool. And then we can also send them an email. So automatically generate an email with information about that maintenance ticket. Nice, let's do it. So, great. So I'm not seeing anything that says, you know, create new workflow. So, what should I do? So, the new rule button is actually creating a new workflow. And what that means, when it says new rule, is you're going to set up a set of criteria that'll cause this to happen. Okay, a trigger basically. It's basically, there's another thing in Salesforce called a trigger, which is what I'm trying to steer away from. Okay. But. A trigger is just a workflow made of code. Okay. So, what we're doing right is we're creating a situation that will only fire when a certain set of criteria is made. And that's why it's called a rule. Okay. And so in this case, let's say this is going to be on the maintenance ticket object because it's going to be when a maintenance ticket is created. That's when we're going to fire this rule. So, Maintenance Ticket, Next. All right. So I guess I'll call the rule Alert Technician. 'Kay. And I want to evaluate the rule when the record is, what does this mean, evaluate the rule? So, it's only going to run this rule When you, The rule means the work flow, the series of steps? The work flow, exactly. So in this case, what we're going to eventually do is send an email and a task to a technician. But this is asking, when should we do that? Should we do that every time a maintenance ticket is created? Every time it's created and every time it's edited? Or, every time it's created And it meets this rule criteria down there. It's edited but it's edited in a certain way. If it didn't meet the criteria first, and then it meets this rule criteria after it's been edited, fire it. Gotcha, gotcha. So, in this case, I think we would want the last, the last of the three. Which is, every time it's created and if it's edited to then meet this Criteria. Like I wouldn't want to send an email. Or try to send an email if the technician didn't have a valid email address or something like that. Yeah. Alright, so I'm going to run the rules of following criteria are met. So the technician has an email address. Is what I'm going for. Right. Okay. So, I see maintenance ticket technician, but I really want the email field. Yup. But I don't see that here. Is that, should I just click technician, or what am I doing wrong? So, with the way formulas work, and how they can grab fields off related objects. Uh-huh. Unfortunately, you can't grab the user's email. Okay. But, that's only from this pick list. Instead of using the, run this rule for criteria met, change that pick list to, if the formula evaluates to true. And this'll be another place that we can create a formula, in order to add some logic. I've seen this before. Yeah. Cool. So if the following formula evaluates to true, should I go to user? So we want to still go in maitenence ticket. Okay. But we can treverse through that technician field. Oh cool. In order to grab fields off of the technician. Technician, nice. Okay. So this is the field that represents the email address of the technician. Exactly. And how do I check to see if it exists or not? So, we can first add an if statement like we had before. Okay. So paste that technician email. I'm going to do sum logical test with technician email. This is another one of those. There's a fancy little method out there for checking if it's null. Okay. So, you can actually see it right there on the right, is null. Is null. But I want technician email in this place where it says expression. Exactly. So I'm going to cut and paste. Value if true, value if false. So, we can just those parameters manually. We can put, if the value is true, set it to true, if it's false, set it to false. And so, if this if statement evaluates to true, then the workflow will run. and then the formula, okay, the formula value is true. But isn't this going to be a problem? So this is saying, if there's no technician email, say it's true. But we want, if there is a technician email. So switch it around. Oh, okay. Cool. So just make it false and true. Yeah. That's clever, Sam. Good work. [LAUGH] So this highlighted business would give me this true. If there is an email. Yes. Okay. Cool. So, let's, let's continue. Oh, I'm going to have to hit next a bunch. Nope. Just Save and Next. All right. So, you just created the workflow rule. So, now it's going to fire every time maintenance ticket is created or edited, if the technician didn't have an email but now it does. Okay. So now we need to add work flow actions and what work flow actions are, are simply the things that are going to you know, fire as soon as that criteria is met. Can we add an email? Yeah, let's do that. So this is going to email our technician. It's going to to immediately email them for records created and they have an email. So this thing can be email technician. Yep. Email template, so what's that for? So, in Salesforce you can create e-mail templates that use merge fields, similar to what we've already seen in our formulas. Okay. And so it auto-populates with fields off of that object, so you can say something like, Dear Bob. Technician's name. Yeah. Okay. That's pretty cool. and, have you kindly made this template already? I have. Thank you, Sam. Yeah. So pick the Maintenance Notification, not the solution. Okay. And recipient Type. What's this all about? So we can dynamically assign who the recipient is based off of, you know, maybe they're part of a queue and we wanted to go to a maintenance queue. Mm-hm. Or maybe they have a specific role. And so, we're trying to dynamically determine who should receive it by role. Okay. But in this case, we could use the related user. Which is the mobile technician that we have associated with the record. So, we'll use technician. Yeah. And then from current user's email sounds fine to me. Yeah. And Save? Sounds good. All right. Let's try creating a maintenance ticket and see if this works. Sounds good. So the technician I'm guessing will be me. Yeah. So in this case it has to be you, but I mean, usually there'll be a bunch of people in an organization, so you could add any user. Okay. the stage will be the Udacity Stage, let's say. Status, New. Priority high and let's say that the description is that everything is completely broken. Got your work cut out for you, Andy. I know. This is bad news. So save. So you should be able to see the tasks that we've just created from this page. But we'd have to add that related list of the activities and activity history onto the page layout in order to be able to see that. Okay, so I'll edit the layout. All right, pop quiz, Andy, where's that going to be? I'm going to click Related Lists over here and then drag down Open Activities and Activity History. Just for good measure, I mean, once you close tasks it'll start showing up in the Activity History instead of Open Activities, so good to have it all there. Sure. Now I'm going to Save and not forget to Save. Cool, and there's our new maintenance ticket. Awesome. Assigned to you. Yeah. Due today. Not started yet. So if I were a user and I wanted to find my tickets, how would I do that? Yeah, you can see all your open tasks straight from the home tab. Okay, so home. So, at the bottom of the home tab, there's this calendar, and it talks about all of the events or meetings that could be coming up. Right there. There's your open task. Very cool. Okay, and if I, oh, I don't even need to, to click on it. I hover and it tells me the subject, the due date, priority and that kind of stuff. Yeah, and you can even mark it as complete right there. Oh, cool, but I won't, because I haven't yet. Mm-hm. I'm going to check my email and see if I actually got an email. Hey, maintenence ticket assigned to you. Very cool. Hello Andy Brown, that's my name. That's very nice. I mean, this ticket has been assigned to you. Everything is completely broken, the priority is high. That, it's pretty cool. Is it cool that everything is broken? Well that's not cool. You need to go fix it, go fix it. You just made your first workflow. As you saw, workflow actions fire depending on some kind of event or trigger. When Barack Obama was campaigning for the President of the United States, he used salesforce. How might he had used workflow rules in his campaign. Let's say someone signed up to volunteer for his campaign. Maybe an e-mail would be automatically sent to the new volunteer. Or they could create a set of tasks to ramp up the new volunteer. Or possibly they could use the volunteer's location to decide which campaign manager to notify. Now Samantha and Andy will show you how to use approval processes, to define a sequence of events that involves human interaction in the decision making process. All right, so we used a workflow, to, you know, automate these manual tasks, tell people what's going on automatically. What's next? What, what should we build next? So, in our flow, we have handled, sort of, the maintenance side of things. Mm-hm. But, what about the scheduling stuff? I mean, we kind of built that out, but then, let it be. Yeah, so scheduling, I imagine would look something like, I dunno, whoever's doing the scheduling for the band says, hey, I really like this band, let's schedule. Book him on the stage. Right. And then the stage manager probably gets all upset because they're like hey, you didn't tell me. Or, you know, the concert, the festival promoter's like, woah, woah, woah, what's going on? You three's already playing at that time. You can't have that time. Yeah, yeah, I can't do that. Okay, so we need some way to get these people talking to each other. Making sure that nobody's doing anything crazy. Right. Okay. So I imagine that would be the stage manager handling all that. Okay. So, similar to how we could assign tasks and things like that to a maintenance worker, we can do that to a stage manager. Sounds reasonable. And we could do that, like what we're talking about right now. You know, approving these, book bands at certain set times. Mm-hm. Using something really similar to a workflow roll, called an approval process. Okay, so this is the [SOUND] something you see with the stamp of approval before it can move on. Right, I mean, it's just like a workflow in the sense that you have automated actions, but it involves that stamp of approval and that personal interaction in order for it to complete the cycle. Makes sense. Yeah. Okay. Alright I'm sold. You want to make an approval process. What are we going to do? Help me out here. Well before we jump to make the approval process we need to think about what are we actually trying to create the flow for. Okay. So we have our stage managers. Yeah. And they need to approve whether or not bands can be book at certain set times. Okay. So we want to create an approval process on set times. Set times, makes sense. And when a booking agent tries to book something, the stage manager has to sign off. Exactly. Cool. Okay. So, I guess I'll just search for approvals or something. Yep. It's in the set up. Okay. Okay. Workflow and approvals, cool. Approval process. It's recommended that I follow the following instructions. I'm not going to do it though. So. Rules are meant to be broken. Yeah. Manage approval processes for set time right? Exactly. Okay, create new. Yep. Click that guy. Ooh, I have a choice of wizards, a jump start wizard, or a standard set up. Do you have a preference? I use jump start, it's quicker. Okay. Okay, name for the approval process? Stage Manager Sign Off? Yeah sure. Stage manager approval, whatever. Approval oh yeah they're called approvals. [LAUGH] So approval assignment email template. What are we doing with that? Are we even setting an email? So we could if we wanted to, but we don't have to so in this case it's okay. Okay, so we've got our specific entry criteria, use this approval process if defined criteria are met. So this is really similar to the workflow rule, right, where we're trying to come up with some certain criteria. Uh-huh. That this should only fire this process if. Something happens, it's true. If there's a baseline. Okay. And so when would we not want it to go for approval? Like, when would we be like, this is bad data. This shouldn't be under approval, because it's not complete. There wasn't a, a field miss, there's a field missing? Exactly. And so, what's the most important field on set time that would, has to be there, in order for it to be something we should review? Well, judgi- oh, time. Yes. So, we shouldn't be approving any bookings if there isn't an actual time for them to be booked at. because then it's incomplete. So, use this approval process if set time is equals blank and just kind of just leave it blank? Is not equal to blank. Because if. All right, Sorry. Not equal to blank. Yeah. So this means if, if a time is set, then we need to see an approval process. Yeah. In order to set an approval process, you have to push the Submit for Approval button, but if they push that button and there is no time set, it shouldn't fire this approval process, because it's not ready to be approved. Gotcha. So you can leave that blank. Blank. Yeah. Makes sense. So in workflows, we were able to say whenever an entry is created or whatever, we're not doing that here, and that's because we're manually hitting the submit for approval button. Exactly. Okay. Okay, so select approver using the options below. Who should this approval request be assigned to? So this again is something that would be a lot more dynamic if we had a lot of users in our orginization that had roles. Okay. You could assign it specifically based off of the role hierarchy in the company. Because maybe you want certain managers to approve it. So that would be the hierarchy field, I assume? Yep. Or you could, you know, choose that Approver manually. Assign it to a queue. In this case we're just going to automatically assign it to ourselves since we're the only user that could approve anyway. So what does that mean. Who should I? Automatically Assign Approvers, and then just choose Yourself. Save? And Save. So, I just want to call out, that that's really not the most realistic, as far as, you know, we would always be the approver. The real dynamic, you know, power behind approval processes, is that you could get anyone that needs to approve it, based off of their role, or. Their position in the company, yeah. Mm-hm. Alright. So this is explaining how you're going to build out the approval process. So this is another one of those setup windows that, if I weren't here right now, this is how you'd teach yourself how to do it. Sure. But let's just go to the Approval Process Detail Page. So here is our stage manager approval process. And if I scroll down, so I've got these initial submission actions, approval steps, final approval actions, final rejection actions, all these different things. What's, what's going on here? So actions and approvals are the same thing as they are in work flows, you know, creating an email, or sending an email, creating a task, updating a field. Okay. But the great thing about approval processes, you can add in actions throughout all the steps of the process. Okay. So initial submission actions are the actions that are fired immediately after someone submits a record for approval. Okay. The approval steps are the pieces of the flow that, you know, happen as it's going down the line of approvers. Mm. Cause you could have one approver, just one manager. Or, you could send it down a list of managers if you wanted a bunch of people to approve it. Sure. Then there's the final approval actions, which is after either the last person approves it. Mm-hm. Rejects it, or maybe somewhere along the way, someone was like, recall this approval, like, I want to take it back. Okay. And so you can set up. all your actions. Actions for all the parts of the flow. Very cool. Okay, that makes sense. So, for this approval process that we're doing it looks like when we submit the first time, we lock the record. Yep. So nobody else can play with it. No one else can modify it until it's either been fully approved or rejected. Makes sense. Okay. And we can do, looks like we can hit other actions there? Right. Okay. so, let's think about this. What are we going to want to do here? Okay, so in this case, when a new set time is created and you know, we've added a band or a stage, we probably want to change the field once it's been set to in review, set the status of it from New to In Review. Okay. So, let's do that. Yep. Field update. Change status to in review? Is that okay? Yep. And the field update is status. How very cool. So specifying a field value, in review. And then Save. Okay. That makes sense. So, now that we have it changing that status field, it'll notify everyone, hey, this is why the record's locked. It's in review. The next piece would be waiting for whoever was approving it to actually say whether they approve it or not, so there's going to be a related list on the record where they can do it from there, like straight from the record. Oh, so the manager can do it. The manager could approve, yes or no, or if we had that email template set up, they could also approve via. From the email? Yes. Cool. Okay, and approval steps, so this is just somebody saying, this is the part of the process where somebody says, looks good. Yeah. So this is talking to whoever needs to approve it, and see how it says step one? You could add a bunch of approvers if you really wanted to. Okay. But we don't, so now we can final approval actions. Right. Alright. so looks like by default, it locks the record. Yep. And we want to, I guess, change the status again to Confirmed? Yeah. Sounds good. All right we did that. Okay and then we have Rejection Actions and Recall Actions which sounds similar to me. But I guess there's a distinction. So, I would say, I mean. We'd probably want to keep using that status field to delineate where in the process it is. Yeah. with Final Rejection, I would say that would probably be cancelled because we're like, no we don't want this anymore. But Recall, maybe we'd send it back to New. That makes sense, okay. Alright. We've got our actions all figured out, based on what the approval says. Yep. So what should we do next? Test it out. Sounds good. Alright, so, I'm going to go to set times, to try and test this out. Before we go to test it out, don't forget to click Activate. I always forget to do that, especially on work flows and approvals. After activating, you cannot add or remove that's fine. Okay, we are activated. Set times. So should I create a new set time? So you could create a new set time, or, we could just use one of the ones we already created. Okay. Send it for approval? Sounds good. Alright, so there we see it. So in the Approval History, we saw when you submitted it for approval, Okay. Who its assigned to. And then they can come here and approve, reject or possibly reassign it to someone else to approve it. And this is just visible to me because I happen to be, the approval, the approver as well? So depending on your security settings. huh. You might not be able to see it, but honestly, if you can see this record, anyone should be able to see where this is at in the Approval Flow. Okay. Gotcha. Okay so now, I should have gotten a notification, and now I can approve it, right? Right. So first, look at the status. In Review. It moved into Review. Okay. That's pretty cool. So sweet. So now, should I go to Home? Well, you can improve it right from here. Oh, right. Here? Yeah. Cool. So you can leave some comments with it. Do you approve the set time? I approve. So you can see the Record's still locked. Now that it's confirmed, you can unlock it whenever you want. Very cool. Alright. I don't want to unlock it. All right. I want it to be a secret. Lock it up. Okay. All right, Andy. That was a lot of clicking. What did you think your first approval on workflow? It was a lot of clicking. I thought it was pretty cool. I really liked that workflows, you know, add so much efficiency. This one event causes this, causes that, causes that. That's very cool. the benefits for approval processes was a little less clear. Approval processes are really similar to workflow, but, it was a little bit inauthentic in the way that we built it, because, you know, we were the submitter and the approver. Right. I guess you're right. If this were a real music festival, we'd have, you know, however many hundreds of people and they're all depending on each other and things need to get done and need to get done quickly. And they might not know who they're sending stuff to. Right. Because you don't know everyone that you work with at a huge company. So it really helps you streamline the process of getting things approved. So, I'm a huge fan of all this efficiency improvements we've gained. The only thing that would make this even cooler is if I could do it on my phone. And we can. So let's, let's do it. Cool. Congratulations, you created your first workflow rule. So that events can fire actions automatically. You've also created an approval process to define a series of steps that require human interaction along the way. Your app is doing some amazing things right now. What's really cool is when you see that on your phone. In the next lesson, we're going to take this amazing web application that you build and do just that, put it on a phone or a tablet. We'll see you there. Welcome to lesson five. You've come a long way, and most of the legwork is done already. If you think back to lesson one, and there was that green button that said Create an app, lots of things have happened since then. But what we didn't tell you is when you created that app, you also created a mobile app. In fact, everything that you’ve done so far is available already on a mobile device. When you added work flow rules and approvals. When you added charts and dashboards. All of that now is instantly mobile. Samantha and Andy are going to show you that mobile app and how to add even more cool features to it. One of the neat things about mobile apps is they're inherently social. I'm always looking at my phone to see who called and texted me, but also for things like Facebook posts and to see what popped up in my notifications. Salesforce has something like Facebook for the enterprise called Chatter. Chatter allows you to follow not only people, but records. You can form groups of people and work on records collaboratively. You can follow bug reports, or you could follow cases or really just about anything you want that interests you. All right, Sam. We've got a pretty cool app going. Yup. We can automate stuff on the day of the festival. Problems are going to come up and they're going to get addressed [SOUND] like that. Yeah. Because you've got all these slick workflows and approvals going. Nice. I'm pumped. I'm pumped too. But the things we've been working on so far have mainly been focused on, like, what are you going to be doing? Or what's that guy going to be doing? But there's nothing, you know, connecting everyone and getting them to collaborate, do stuff together. Mm hm. like, like a team want. Okay. So, I mean, think about just first of all, if there were multiple people working at the stage The udacity stage. Yeah. That totally could be. How would they be able to communicate between each other around things that need to happen or things that have been happening or scheduling or whatever? Email. Email. Sucks, right? I gate getting a million emails. It sucks yeah. So what if you could add something like a Facebook feed to the top of this record so that people could collaborate right from this record and it would all be limited to this screen. So then I don't have to check emails, save stuff, whatever. What if? Well. Let's do it. [LAUGH] Yeah [LAUGH], no ifs. Okay. Right. Yeah. Okay, so, I assume we can do that. We can and that's using Chatter. Okay. So, what we can do is go into the Set Up and add or enable this object for Chatter. So, I should not just click on Chatter over here. No, because that's going to take you to your Chatter profile. All right. So, I'm going to edit this object. What are we doing? So you could edit the object, which would remember that little third checkbox that we hadn't checked yet? Yeah. That would enable us to be able to use chatter on this. Okay. But since we're going to want to do a little bit more than just enable it, let's just go into the setup and configure chatter completely. Okay. Cool. So, our setup link. There we go. And I've become a huge fan of this little search box. Oh man, life before that search box was really rough. Who wants to navigate all this nonsense arrows and business? Alright, so chatter. Chatter mobile, new. Is that what we're doing? No. [LAUGH] Under build > Chatter, and then Feed Tracking. Okay. Okay, so just to give you a brief synopsis of what we're looking at, this is showing you all of the different objects that you have within your org. Both the standard objects that are included, and the stuff we've created. Mm hmm. Now what we want to do, is we want to enable our stage object for feed tracking, so that people can collaborate on a stage record. Okay. And so what this means, Enable for Feed Tracking, means it's going to put a Chatter feed at the top of our stage record, for people to either follow the record if they want to or just, you know, make post-songs record. Okay. So, we want to look for the stage object over here. Stage, over here? Yep. And so if we enable this for feed tracking. Mm-hm. We can also select whatever fields we want to show up in the feed if they were to change. Okay. Like for example, if we were to choose the stage manager field. If we checked the stage manager field, whenever the stage manager gets changed. [CROSSTALK] Mm-hm. Or reassigned. That's going to automatically post to the chatter feed, hey, the stage manager's changed from. [CROSSTALK] Cool. Blah to blah. Okay, so, I don't know let's follow the stage manager. And if the size of the stage changes, he'd want to know. Yeah. I don't really think anything else would change enough to need it. That looks good to me and then just click Save. So you can configure this for any of the objects in your organization if you say, just want to get updated or collaborate on any of your custom schema. Mm-hm. Yeah. Okay so we've enabled Chatter. What can I do now? Go back to stage? Yeah, lets go back to the Stage Record. Alright, cool, we've got this little Facebook looking thing going at the top. Yeap, so now we can not only you know, chat with other people in our company, like collaborate on a stage, but we can follow the records. So if there are any updates or post to it, it'll go straight to our feed. Cool, so I just added a stage as a friend basically. [LAUGH] More or less, Andy. Okay. Cool. Well, why don't you try writing something on it. And just you know, seeing what that looks like. Alright. Okay, so that's cool. It actually worked, and we put the picture in, but. Right, and so, in the future, when people come back to this, they'll see what you posted and when, but also, if you go to your Home tab, anyone that is following this record would see that post come up in their feed. Oh, cool. So, you can see, right here. Yeah. So any information that I've decided was relavant to me will basically just always show up in this feed. Right. One other thing, remember we added that thing earlier to do feed tracking on specific fields. Mm-hm. Why don't you just, you know, just to see what that look like, try it out. Okay. So change maybe the crowd capacity to take a thousand more people. Andy Brown changed Crowd Capacity from 5,000 to 6,000. Really useful, right? That is pretty cool. And anyone following this, again, would see that too. Now that you have a chatter feed, let's talk about publisher actions. Publisher actions allow you to do things directly in the feed. There are four general types of actions. Create Actions let users create records. Log a Call actions let users record the details of phone calls or other customer interactions. Update actions let users make changes to a record from the records feed. Custom actions allow you to create your own actions programatically, but we won't cover these here. Be careful about creating too many actions. You really want to just have the ones that you do most frequently. For example, which of the following tasks would be good publisher actions? I said that you would want to be able to make a maintenance ticket that's something that you would be doing a lot I imagine. But you wouldn't add a band to a festival because that's not really possible. Bands get added to set times. This last one is debatable but I personally wouldn't make this a publisher action since it isn't something I'd be doing very often but maybe you did. Alright. So it's very cool that we have all this social functionality. I like that. Yep. what should we do next? So, similar to how we have this, You Can Make a Post, or Post a File, or Create a New Task. We can create our own actions that we can surface in Chatter, to make our lives easier to do, you know, a bunch of things that we're doing all the time. Okay. Using Chatter. And so, the cool thing about doing that is when we do these actions, it actually posts to Chatter at the same time. So we can track when these actions are happening. Sounds good. So, what's something that we might want to do, related to stage? Something that might happen pretty often in a music festival. I mean, we might want to change the bookings of the bands, or something like that. Update, so one of our set times. Can we do that? So, updating set times, no. Creating set times, yes. Okay. Why, what's the difference? So, updating set time would be something that we would do from the set time record. Mm-hm. But we can create set times. Right. From the stage itself. Okay. So the way we do this is, if we go into the Object Set Up Details Page. So just navigating to Object Set Up. There you go. I mean in the quick access menu. Yeah. We can go right there and then create the action ourselves. Cool. So if we scroll down one of these related lists is Button Links and Actions. And so that will allow us to create an action that we can drag onto the page laypout. And then access from Chatter. Okay. So, buttons, links, and actions. A new action, I'm guessing? Yup. So, there are a couple different types of actions we can make. One is creating, like, a child record. Mm-hm. Now, what's great about this if you choose this is you can, one, it'll automatically relate the child to the parent. Uh-huh. But you could also pre-define fields if you wanted to, things like that. Okay. or a couple of the other actions. Log a call, we could use some code if we wanted to put a visual force page in there. Or, update the record itself, not necessarily a child record, but update like the stage. So, okay, the stage but not update the child record. Yeah. But I can create a child. Create a set time. Yes. Okay. So that's what I'm going to do. Target Object will be Set Time. Label would be what? Let's call it Add a Set Time. Oh, this is just what's going to say. On the action, exactly. And then we don't need to choose that. If we choose something there it automatically names it for us. Oh, yeah. Yeah. Okay, so it's good? And so now this is the mini page layout, so when we have, you know, a new record import form. Mm-hm. it's going to ask us what fields from set time do you want to show up on this form when you're creating the child set time. So probably everything, I would guess. Oh, yeah, yeah. But, I mean, if you had an object that had a lot of fields, you probably would [CROSSTALK]. You might just want to get the. The main fields. Exactly. Okay, but we don't have a lot of fields. We'll do date, status and time. Andy, your UX skills are impeccable. [LAUGH] All right, Save. Yep. All right, and as I mentioned, if we wanted to predefine fields, this is where you would do it. Okay. But in this case, we're pretty much done. Other than, why don't you click on the Stage link to go back to the stage object? And why don't we add this to the page layout so we can see it in Chatter. We've created our action, but it's not going to actually show up on the page yet. Got you. So, if we scroll down to the Page Layout section from the Objects That are Detailed page, this is exactly the same thing. You know how we click on the Edit the Page Layout from the record. Mm-hm. This is the other way to get to it, but from the set. Edit. So, we click Edit here. So, over here we have Actions. There, you're way ahead of me, man. [LAUGH] I'm staying there, I think, figure this out. Yeah. Okay, so, oh, Add a Set Time. So, this Publisher Actions area is where you want to drag it, so let's put it in there. Oh. It doesn't like it. So we have to override the Global Publisher layout first. There's, right now, you know we saw those actions already. Mm-hm. Those are the, that's the global layout. That's just what everything automatically has. But if we override that layout, we can add in our own custom actions. All right. Layout overridden. Adding Set Time. And, put it closer to the left, so we see it. Oh, yeah, yeah, yeah. Maybe after Post. Awesome. So, now that we have that in the layout, let's check it out. So, I'm visiting the Udacity Stage, and it says, Add a Set Time. All right, yep. That's it. Oh, that's cool. Okay, so, I forget when our festival was, November 29th? Yeah. So, we'll have it set on the 30th. It's New, and the time will be, let's make it 7:00, and the band, right? Let's pick someone new. Yeah. I've had it with these, these three boring bands. What's the word? Try the Main Ten Ants. oh yeah, I love them. Okay, and Create, and it worked. Very cool. Awesome, so now, the Set Time record's created, and people will know, hey, Andy created this at 6:16 p.m. Mm-hm, cool. The first time I developed a mobile app and put it on my phone, I had this really exciting ah-ha moment. And I don't want to delay you from your own ah-ha moment too much longer. But I do need to tell you, that the Sales Force mobile app is available as a download to your phone. Or, you can navigate there with your mobile web browser, and you'll be redirected to the web version of the mobile app. The best part about it is that the sales force mobile app is free and available for all organizations. Let's go use it. Alright, Sam. So chatter's cool. I'm into the social thing, but I want to make this thing mobile. Alright. You promised me that I can. You already did. So I have this thing called an iOS simulator, and it lets me show you what this would look like on an iPhone. Sweet. And right now it's not that impressive. It looks like a crappy website on an iPhone. What is this? A website for ants? [LAUGH] And that's bad. The main ten ants maybe. No. [LAUGH] I can zoom in, but still this is kind of, you know, not that impressive, so what can I do? All right, so you could install an app right off, you know, the app store into your phone. Or you could just navigate to a new URL, that will pull up all of this data and all of your applications in a mobile web app. Okay, what. So. What is this mystery URL? Sales Force One, yow. Okay. Alright so, don't delete everything, just at the end of this URL, we'll delete everything back to dot com, so just keep going back. Okay. Yep, and then, there you go and then /one/one.app. w, I mean, o-n-e? Yep. One.app? Yep. Oh man, that is cool. Okay. Alright, so first what we're looking at right now is. That's our chatter feed. Okay. But this whole thing is pulling up SalesForce one, which is. I'm going to like this, sorry. You're going to like your own post? Yeah. Wow. Is it, is it lame? It's okay. It's socially acceptable in the corporate world. Okay. All right, but, what this is, is it's a mobile representation of all of your Salesforce data in one application. And so maybe you didn't realize this the whole time we were going through all of our app building, but you simultaneously built a mobile app that's completely functional with everything that you've already done. And you can see its service in a phone. Yeah. That is really cool. So, let me poke around a bit. Right, so, I was clicking around. I clicked here. It seems like I can access a bunch of my objects. Yup. clicked here, and this was interesting. So, what's going on with these guys? Yeah, so, remember earlier when we overrode the global action layout to be able to put in our create a set time action? Yeah. This is the global layout that you'll see from anywhere inside this mobile app, if you haven't overrode the global layout. Okay. So you can create a Chatter post, create a new contact, maybe create a task. All of these things are actions that are quickly available to mobile users to do from anywhere in the app. Okay. So presumably that means. The the action I made, the make a new set time. Yep. I can do that from my phone. Yeah. Super easy. So how would I do that? Okay, so close the global actions. And if you scroll down. You can see that we can click straight into that Udacity Stage record. Like we saw earlier. Mm-hm. But instead of going that direction. Let's just use the mobile navigation by clicking that little icon in the corner, yep. Mm-hm. And then scroll up. Oh. To the Show More. Click that guy, and just go to the Stage tab, and we'll go straight to the record this way. Okay, the Udacity Stage? Yep. Now, plus has at a set time. Yeah. It's pretty cool. Okay, so if I hit add a set time, as I expect, has all these fields. So say it's just December 1st. Sounds good. status is new. Oh, cool, it has the automatic thing. Yep. Nice. Time. I really like how it automates the pick list. It just knows. Set the Udacity stage, and let's pick a band. Yeah, let's go with U3 in. Alright, so what we're looking at right now is the Udacity stage, you know mobile page layout. It shows us all the fields that we saw in the computer. Mm-hm. Right? Mm-hm. But, we can scroll left and right. And see different things on this. So in this case, on this first window we can see the Chatter feed. And so this is the set time we just created, and here's the set time we created in the app earlier. Mm-hm. Now if we scroll to the right, we can see the related lists of all the things related to this Udacity Stage. Uh-huh. So like the set times we just created. Makes sense. Cool. Well, Sam, I want to say thank you. I feel like I've learned a lot and I have built a really cool app, and it's on my phone. that's pretty exciting. Yeah. I guess, all that stuff we learned about. All the workflows, the approvals, the, you know, dashboards and charts. Is that all in the phone too? Yeah. So everything we built today is totally accounted for and works both in the desktop or mobile app. Cool. So you simultaneously built two apps today. That's really awesome. I guess my last question is where do I go from here? I mean, I'm hooked. I'm into this. I want to build more stuff. What should I do? So I mean, we've only scratched the surface of stuff that you can do with point and click tools, so you can learn a little bit more about what else we could do there. Mm-hm. you could maybe read about Apex and Visual Force, and you know, get into the programmatic code side of things. Okay. Or you could take the skills that we've learned today and then build your app. What do you want to do? Let's do that. I want to build another app. Alright, let's do it. Congratulations. You created an app and you went mobile. It's pretty exciting. But really, it's just the tip of the iceberg, there's so much more you can do in Salesforce. I'm really excited to see what you're going to do in your final project. Are you ready to start?