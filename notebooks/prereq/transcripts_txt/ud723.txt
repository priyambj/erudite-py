Welcome back. Now you've learned the fundamental process of prototyping. We're going to take this lesson to talk about where to go from here. We'll talk about how to continue to iterate on your prototype using the same tools, or new ones. We'll also talk about how to bring in designers and engineers either as a sole entrepreneur or as part of a company. And finally we'll talk about how to present your prototype and talk about it to potential shareholders either within your company or outside it. Before we talk about how to move on to high fidelity prototypes, and bring new people in on the creation process, I want to step back for a moment and talk about what you can now do. You've learned the fundamentals of an iterative process for making a better prototype. By repeating this cycle, you will arrive at a great prototype for a great app. And you'll accrue feedback, both positive and negative. Also, remember from the product design course, you may use your design sprint skills to create new features or parts of your product. We've only gone along with you for two iterations of this process, and it's important to give yourself room to iterate, learn and grow. Many great apps went through 5, 10, 15 cycles of this process before being built. These cycles of prototyping allow you to fail quickly and get those bad designs out of the way. Remember that every time you go through cycle, there are a few steps you need to follow. Define what information you are looking to find. Modify your current prototype to match whatever feedback you've already gotten. Put your prototype in front of three to five users. Collect their feedback. And then analyze the feedback to see whether you got the right information. As you get better at this process, you'll benefit from learning more tools in order to build the right prototype for the right step in the process. We'll spend the next few videos talking about those tools. All right, so we've brought back in Jonathan, to talk a little bit more about how to move forward with InVision, making better prototypes. To start with, how would you go about making a higher fidelity prototype, than our current sort of clickable prototype in InVision? Sure, there's a couple of ways that you can do this Jay. The first way is, we have this option called overlays, so you can make a modal window or a drop down menu. And you simply basically need to mock up a section of your screen, or an image of the section of your screen, and upload that as a separate screen. And InVision will allow you to use that screen as an overlay on top of any existing screen, so that would be one method. Another method is you can use advanced animations through animated gifs. An animated gif we accept in InVision, so that you can demonstrate in advanced interaction. Right, so as an example, our current like navigation drawer, we could use that as an overlay and it would just sort of show up actually on top of the other screens. Sure, that's a great example. Perfect. So what are some other tools within InVision that we can use to sort of make better prototypes, what other options are there? Sure, there are a number of different options in InVision that allow you to share out the project. To see the workflow or the progress of your screens as you move it through, the time or the life cycle of your project. We also have a feature called boards that allows you to showcase your designs in different formats. So for example, if you have a prototype that you have in a website. But then you also want to display it in a mobile phone or a tablet, you can display all those in a single ward. Right. Okay. That makes perfect sense. And then are there best practices for doing user research with these clickable InVision prototypes? That's a great question. The best practice is to turn off hotspot hinting. That's an advanced feature, when you share out of ShareLink. So when you click the ShareLink button, there's an advanced option that allows you to then turn off hotspot hinting or prevent hotspot hinting. Mm-hm. This allows a user to then, view the prototype either on a mobile device or on a desktop computer And click around interact. But they're not prompted with your hotspots, because otherwise, you'll get feedback that may not necessarily be natural or organic. Right. because you'll have maybe a tiny hotspot. But if it's brought out in blue and the user is like, oh, well, clearly that's a thing because it's a bright blue square over this image. Exactly. Yeah. Preventing those sort of prompts or tips to the user is always best, because you want the user to give you the most natural feedback that they would otherwise, give you in a normal environment. Right, you don't want to optimize this app for being shown in this format, you want to optimize the app for being used. Exactly. Awesome. Thanks for coming in and giving us so much insight. Thanks for having me. So to talk about other tools that you might use for prototyping, we've brought in Cody from Pixate. Hi, there. So Cody, what is Pixate? Pixate is a prototyping platform definitely used for more intense animations or detailed animations, interactions also. But it's all done natively, so on the device that you're prototyping for, you get the same effects on scroll views, on the animations, anything that you would normally see in an app, we can reproduce through Pixate. Perfect, that's wonderful. So it sounds like it's good at these sort of higher fidelity prototypes. It's good at these micro-interactions and getting things right when you're doing some small part of the app. Right, it definitely focuses on reproducing a real experience within the app, as opposed to, maybe ones that are more, you know, like paper for instance, or anything like that where it, you don't get the full feeling of it. What you can do is, when you prototype through Pixate, you can basically hand this over to someone, a developer, someone maybe you're selling the app to, and show them exactly how you expect it to work as the designer. So a tool like Pixate would make it much easier to have a design consultation, we'll be doing later on in the lesson. So Cody, why are micro-interactions important for a prototype? Micro-interactions are really important from the design aspect because you want to show exactly the animations, the movement of the different elements within the app to give everyone a better idea of what you're trying to build and what you kind of envision as the designer. So what kind of questions do you get from entrepreneurs about your product? A lot of questions we get are related to what to do with it once you've created a prototype. I feel like that may be kind of a pain point for some people, because they hear they have this design and they can show it to whomever. However, they get to hand this over to a developer now, and show them exactly the animations they're looking for. And the developer, for the most part, can translate that over to code, and then generate the app from there. Okay, so once you've built the prototype, you get a lot of questions about what to do with it, and your suggestions are pretty much, have it built. Mm-hm, that's correct, yeah, just build it. Just hand it over to the developer and build from there. We want to work on obviously a lot of ways to improve that process, like giving in code export or, you know, other features like that, which we're kind of working on alongside other features. Ultimately, right now the best way to do it is to just show them. Okay, perfect. So we've covered what you do once you've gotten the Pixate prototype. What is the process for getting in to the Pixate prototype? Let's say we've got people who have an InVision prototype or have a set of screens that have already been made, what do they do to get that into Pixate? Ideally, the best way to do it is, so the way the Pixate works is it works solely with assets, assets being images or soon actually video, and things like that. What they'll want to do is take that information or those images they have through InVision, those screens, and transfer them into Sketch, Photoshop, anything like that, and then from that point they can put it into Pixate, create them as individual layers and start playing around with creating those interactions. Perfect, thank you. Thank you for coming in Cody. Not a problem at all, thank you. One of the main things professional prototypers and UX engineers do is build out prototypes in code. Often, we use things like Framer.js, Sublime Text, Android Studio, or Xcode. With these tools, we can make prototypes of arbitrary fidelity. This is really useful when you have a particular feature that needs to be seen to be understood. Often, users will have trouble understanding such a feature from a low or medium fidelity prototype since it doesn't always come through in those mediums. By building out a minimum viable version of that feature, we can test whether it makes sense to build a production quality version later on. Another use case that makes code prototypes vital is dealing realistically with user input. We use this when making prototypes for Google Maps, we want to understand how the changes impact a user's ability to find the information they're looking for. Building a prototype that leverages real data and user input can provide valuable insight into how a user approaches the app. Remember, that Jeremy wanted to type his information when presented with our inVision prototype. So Carl, you've been at Google for awhile now. Six years. And it sounds like. Wow six years. And it sounds like prototyping has changed over that time. Can you just sort of talk a little bit about how that's happened? Yeah, prototyping has evolved quite a bit in my tenure at Google. When I first came to search, for instance, almost three years ago, we were focused heavily on creating web products specifically for their desktop users. Google's shift has grown significantly over the last few years. And we've gone mobile first. And so as a result, I've had to evolve with the times and have also shifted my development practices towards doing full time Android development. Mm-hm. So you now sort of lead a team of Android developers. That's right. So I lead a team of four people, specifically looking at search, map and identity products across Google. Awesome. And I know you've worked on some things in their earlier stages, that's one of the joys of prototyping, you get to see these things before they happen and some of them never do happen. But can you tell me a little about working on material design? Sure, material design was a fantastic project to work on, we spent about a year ramping up on that before we ever released anything to the public. I think in its infancy we were thinking about it, we called it quantum paper, and we were really thinking about this idea that it was digital paper, and so we were thinking about how does digital paper do things like respond to touch. How do we show layers for instance, inside of that digital paper landscape. We made a number of prototypes across the early stages of that project. We even did some really ugly ones with some really bad electronic mesh-like touch responsiveness stuff. Mm-hm. That ultimately, we did away with a lot of that stuff in favor of a really simple UI and so that's where we ended going with the touch ripples, for instance, in Android. I think a much better experience for our users. It's a little simpler, a little bit cleaner and I think as a result a bit more delightful than some of the early mesh-tron like stuff we were doing. Right, that makes sense. And so some of these decisions you made to sort of scrap this version of a product and come out with this simpler one. Was that made based on user feedback? Was that made based on some other kind of feedback? Was that made out of the blue? Not really out of the blue. We got tons and tons of feedback. We as a group of designers and developers were sequestered for a couple of months working on the project. We got lots and lots of feedback from not only the executive sponsors of the project but then a number of design stakeholders as well as a lot of users that we did tests with. We did some guerilla cafe-style testing across the Google campus. We even brought in outside trusted testers to give us their feedback on the experience. So you mentioned that native prototyping has sort of come to the forefront at Google. That's right. Can you talk a little bit about why that is and sort of what you get out of that that you wouldn't be able to get out of just a web prototype that you've put on on a phone. Sure, one of the areas that I think we have focused a great deal of energy is actually in prototyping voice experiences. This is an area that we can't do a whole lot as far as the web side of things. For instance, we're limited by some platform vendors in the access that we have to their API's. Mm-hm. So going with a fully native experience means that we get a much wider set of tools that we can work with. So for instance, in the we get much tighter integration with voice components. Right. We can do a really beautiful voice experience, lot's of delightful animation around that experience as we bring that prototype or that application to life. Perfect, thank you. We want you to understand that you may have to outsource your development to a developer. As part of that, you should have a solid understanding of what it takes to build an app. Having a good foundation will allow you to make sound business decisions over time. You may also have big ideas for what you want your app to accomplish, so we want you to understand what comes standard in a platform versus what would need to be custom built. The latter will take a lot more work to implement. We should probably go over some vocabulary. Our next two text nodes will cover some basic vocabulary you should be familiar with before you talk with an engineer. So one of the things you'll do when bringing people on to your project, is have consultations. You might have a designer or an engineer come in to help you understand what would be part of your minimum buyable product, and what might need to go in a version two or version three. To do that, we've brought in James and Karl. Now guys, we have this app here, this is a prototype built out in envision. And the idea is that it is an essentially a to do list or calendar app. And I want to understand sort of what we would go about making first, if we wanted to make a version zero of this. So as you can see, we've got these sort of welcome screens, these sort of home screens. And as we go on we've got a bunch of extra features that I thought were really cool that we added on. We've got, you can view your tasks by the month or by the week, you can see an overview of what tasks you've completed, what proportion of tasks you've completed over time. You can also see tasks grouped up in certain ways, so you know all the tasks about cars or all the recipes you've wanted to make. And then you've also got sort of a profile and a timeline of things we've done. And then sort of general settings screens and a menu. Does that make sense? Mm-hm. Sure. So, I'm really excited about getting this built. First off, James, as a designer, what are the things that you would like to focus on in making this a better app right now? Color. I would probably change this color palette and then, I really like this overview screen, like this graphic is really cool. But I'd probably pull some colors from the images, like maybe from your title bar and use the Palette Library for Android to make it kind of more interesting. And I really like this group setting. And that's another place where I might change up the colors, I might use more interesting topography to make it more impactful of how many items I have in this automotive area, or books or whatever, because that's not that readable That makes sense. And Carl, how does that sound to you? Do you think that that would be a reasonable set of things to start working on as every one? Well, there's a lot here in this envision prototype. I think that we should probably talk about some of the core elements before progressing into building absolutely every screen. We probably want to talk about just the most interesting interaction elements. So for instance, I have to question whether or not we really need high fidelity graphs at this point. We're talking about building a to-do app. So, let's focus on the core elements of managing to dos. Okay. So if I'm understanding you correctly, we want to at least have as our first bit, building out, making a to-do, checking off a to-do, things like that. Yeah, that's right. And do you think that it's worthwhile for us to build out those small features? This stuff is really cool and we wanted to include that in the app in the end. Ultimately, we can make the app as big and featureful and fancy as you want. The thing that we have to do though is express the core elements first, the core functionality. What are users actually doing with this app? And in this case they're managing their to dos, they're managing a little bit of their life. So we have to make that easy. We have to bring that to the forefront. There's a lot of extraneous views here that maybe don't support that core work flow. And so let's, I think it would best for us to focus on the core elements going forward. Okay. Now James, with what Carl just said, that we want to focus on the core elements, what would we be able to work on? What would we be able to use your time on, to make these core elements a little bit better? Right now, that core element if I'm understanding it right, we would want to have this screen where we have these to-dos and be able to check them off. We would want, sort of our screen of actually making a to-do. And then we'd want something like I don't know, a calendar or something, to help manage their life. Okay, so if we're focusing on those three screens, starting with this general overview to do screen, I would focus on the transitions between that screen and the creating a to do, just to make it more instructive and make more intuitive for the user. For this calendar, probably a similar type thing, and just focus more in making it glanceable and more easy to read for, this is the to do I have, this is what I need to do at this moment, or for this day. So even if we're just building a small feature set, there's still stuff for you as a designer to work. Oh definitely. Okay, so, you know, we've been talking about this small feature set, and I'm not sure if this is actually a set that we, I have the ability to pay you guys for yet. I have a relatively small budget for this and I want to make sure that we can get this done within that budget. Well, I think we should adopt a philosophy of launch and iterate here. That'll give us the agility to move where our users are going with our software, and allow us to really focus on min viability first. Okay, so I think we probably have enough to pay you guys to make this initial minimum viable product really good, really beautiful, and actually functional. And then from there we can use the rest of my budget as the users dictate. I think that's a great idea. Perfect, so that's how a consultation session might go. You'll have some concerns from either side and you'll have to balance them. And at the end you'll hopefully have a sense of what is the minimum viable product you'll be building. As you go through this, you'll have multiple consultation sessions at each release of the app, and it might be valuable for you to bring these concerns in every step of the process. So, we just saw what an outsourcing conversation might look like when it includes the entrepreneur, a designer, and a developer. I want to pull out a couple of parts of that conversation for us to focus on. The first is a tendency towards scope creep. Scope creep is whenever the first version of your app isn't the minimum viable product. Scope creep is bad. It gets in the way of launching and iterating, which means that you're spending a lot more time building things than building the right things. As an entrepreneur, you have to make sure that your team isn't introducing scope creep. But you also have to make sure that you aren't introducing scope creep. Scope creep affects both time and budget. In the consultation we just saw, Carl did a very good job of managing the scope creep. And he was the one who suggested that we pare down our V1 of the app. In real life, that job will fall on you. This idea of scope creep is especially noticeable in the poll between the developer and the designer, James wanted to spend some time at first working on the overview page, making it gorgeous. Carl noted that was actually a waste of time for this minimum viable product. Another tension you may experience, is a designer wanting to build things custom without thinking about how long it will actually take to build them. As an entrepreneur, you need to be balancing budget with the time spent by your contractors. A good rule of thumb is to launch your minimum viable product without anything custom or fancy if you can avoid it. Once your app has started getting feedback from customers, you can make it as fancy and beautiful as your designer wants. Until then, stick to the default components. So Carl, one thing I wanted to ask you was, if I'm a solo entrepreneur, how would I go about finding an engineer to help me work on these projects? Finding an engineer can come in a myriad of different ways. You can always place an ad on something like Craigslist. There's the tried and true LinkedIn, or even a site like Stack Overflow does a really good job of representing developers. Of course, if you're a hackathon attendee, maybe you'll be assigned a team mate. So, that might be just a serendipitous meeting. Of course, you can always go rummaging around in cafes or coffee shops and looking for people with laptops as well. Okay. And how would I go about choosing an engineer if I had two, three people answer my Craigslist ad, how would I go about choosing who I want to work with? Choosing who you work with is, something I think that's dependant on what your end goal is. If you're looking for, maybe a web-based project, then you want to focus on the specific skill set. So you're looking for somebody with a background in HTML/CSS and JavaScript. If you're looking to go full-fledged mobile, maybe native experience. Then you're looking for somebody with iOS development experience with Objective C or Swift, or even in branching out into Android as well, you will need somebody who has, experience with that SDK and with Java. How would I go about working with an engineer? When I've found one that I want to work with, how do I go about actually asking them for help? How do I go about getting use out of them. Sure. >From my perspective, I like to get involved as earlier in the project life cycle as I can. Getting me involved means, showing me a lot of the design work that's happening. Explaining a lot of your thinking. As your feature set is evolving through the design process. Mm-hm. I am going to want to understand what you're end goals are. I'm going to want to understand what you believe is the minimum viable product. And I'm going to want to understand what your longer term goals are for your project. Right, and so naturally, you would want to be involved as early as possible and that would be the way to get the most use out of you, but there's also this pull of, if I'm the sole entrepreneur, I might have a limited budget. I might not be able to pay you for the entire life of the project. Yeah. So in that case, would it make more sense to just take you on at the end when I can actually, just ask you to build the app and that's all I've got money for? Well, the app experience can be as big or as small as you want to make it. So bringing me on at the end would be okay, but I think we lose a lot of the context. A lot of the decisions that are made through the prototyping phase, through the design phases, I think can inform upon how the product is built. So again. And I would want to come on a little bit earlier in the product life cycle. Now that said, if you do leave it towards the end, then you're going to want to have a really well-defined spec, a really fleshed out idea of what you want build. And then you're going to want to be able to talk to that engineer about the budget. Mm-hm. You're going to want to talk about the feature set that you're asking them to build, and then you're also going to want to to set some realistic delivery dates. Right. And of course, one common thing is if I'm an entrepreneur who doesn't have a background in coding, then what's going to happen is, I might set these unrealistically. It might not occur to me that thing X is going to take a lot longer to build than thing Y. I might assume that they're going to take the same amount of time and set, give you these delivery dates that are for this one, totally doable and this one, way unrealistic. Yep, and that's why I like to get engaged to a project early on, so that I can set some realistic expectations as well. I do think that it's important to involve your developers in that regards, so that we don't end up with something like feature creep or scope creep within the project. It's very easy to become quite enamored with a particular interaction or a set of screens, that maybe are not core integral to the experience. Mm-hm. But we believe in launching and iterating. So, striving towards that, I mean, viability, and then involving the developer early on will help you establish what that looks like, and help you craft a plan of execution. Perfect, thank you very much. You're welcome. So one of the important parts of code prototypes is that it's often useful to build out specific features rather than the whole app. Our app has a couple of places where a code prototype might be useful. We're looking for something where the behavior might not be clear to a user from our initial prototypes. Along with places where users are inputting information into the app. So, what features of our app should we prototype in code? Awesome. We've identified three places, where app design could use a high fidelity code prototype. You may have found one, many, or none of these. First, as James said, our apps new event functionality could be usefully prototyped. This part of the app uses user input, and could behave in a couple of ways. When a user presses the FAB to create an event, some animation happens, which we could ask a designer about. And then again, once the event is filled out and saved, something happens to transition the user back to the main screen. We need to define these animations, as well as how the event goes into the list of events. Does it always go in at the top? Does it slide in somewhere along the way? Does that addition to the list get animated in any way? These are important questions to answer. Secondly, our overview page could use a code prototype. Right now, we have sort of a placeholder graphic that shows completed tasks versus created tasks versus snooze tasks. But this graphic would presumably change when a user actually makes, and modifies, and completes tasks. What would that look like? We'll need to find that out over time. Finally, many calendar and to do list apps rely on notifications for communicating with users, when the app is not the active app on their device. What will these notifications look like, and when will they be triggered? Code prototypes could help us answer that question using user research. The second and third options are defiantly things that we would want to work on, after building a minimal viable product for our app. The new event however, is central functionality and should be built out immediately. So one of the brilliant things designers do is produce designs. They can also help you with one of the other more important parts of the process, which is choosing between those designs. So, Jonathan, what are some best practices for making decisions between designs using user feedback? Sure, I like to think of it as three sort of different general areas of your designs, when you're thinking about how to structure your app or your website. So we have information architecture, which is sort of the way that things are structured, and the sort of the flow. There's also interaction design, which is whether or not it's easy to find a button on your page or your app. And then there's also the design element or the visual design. The visual design allows a user to give feedback on the appeal, or the color scheme, or other elements within your design. So thinking a bit within these three general areas gives you sort of the ability to sort of ask the questions that you want to get good feedback from your design. << Okay, so as an example we had feedback in our original paper prototype that our structure was confusing, you just couldn't actually check things off in that from information architecture. And then we also had feedback that the frequent action button was good size, and so that would be like interaction design. Exactly. And then we also had feedback that our check boxes were hard to find, or not visually appealing. And so that would be visual design. Correct. Yeah. All those elements combined together I think are essentially the concept or some experts call the conceptual design. But all those aspects are fundamental to the design of your app. And you want to be thinking about all three as you are developing your app. Okay. So let's say we've got a designer who's given us two different visual designs for an element. Let's say they've given us a button that is designed one way and a button that is designed another way. How would we go about using user research to choose between those? Sure. So you can do two types of studies. One, you can run through a group of users, like two or three users where you show button A then you show button B and you ask for them to provide feedback on that set. Then in a separate study, you can do it for a separate group of users showing button D, then button A. You can compare your notes from both of those studies to find out which is the best button to use. And do users tend to prefer the one they see first generally, or the one they see last generally? Or is it not as clear as all that? It's not always that clear and simple. Oftentimes you want to get a user's initial reactions. But showing them close together really helps give them a visual cue to telling you whether or not it's something they really enjoy. Okay. One of the things we just used as an example was there's button A and there's button B. What happens if the designer gives you five or ten button designs? Do you still test all of those at once or do you test just two at a time? Yeah, that's a great question. I think it's really important to be thinking about can the user achieve what you're intending them to achieve with your design. So, it can be ten buttons or it can be 15 buttons, but can they achieve what the intended task or objective is with your designs? So, if the designer presents you with many different buttons, it may be helpful just to kind of trim it down a little bit. But, if you have that many buttons in order to achieve the intended task, you may still need to test on all of those buttons being available there. So it sounds like it's best to compare these buttons in separate studies. It also sounds likes it's best to think about all three levels of design, when you're thinking about alternate designs for your app. Yeah. That's right. And I think you sort of hit the nail on the head when you say, thinking about all three levels. Thinking about all three levels really encompasses the heart or the concept or the conceptual design aspect of your app. You should really be doing something that enables a user to do something that they love to do. And that's really the heart aspect of your app. Something that I always really enjoy talking about too. Awesome, thank you again for coming in. I appreciate it. Thank you. We've a lot of design features in our app right now. Which ones might be something we should test variations on with our users? Our task checkboxes? Our language around tasks? Our goal for the app? Whether we are ready to build the final product? Or the presentation of our overview page? Check one or many of these boxes. There are a lot of philosophies around this, but in general, we only want to test things that we can have multiple options for, and that are not already settled. In this case, that means we could test our task checkboxes, the presentation of our overview page, and our language around tasks. To start with, we'll want to focus on those parts that directly affect our minimum viable product. In this case, that would be task event language and our task checkboxes themselves. The overview page is nice to have, but not a priority just yet. Now we've talked a bit about how to share your prototype with people who might help you build it better. One other very common kind of presentation is a demo of your prototype. These demos come in all shapes and sizes, from a 30-second elevator pitch to a 2-hour presentation. You'll want to spend some time thinking about how to best talk about your prototype and show it to various audiences. These presentations do have some fundamentals you can start with. Your elevator pitch can quickly explain what your app does, who you do it for, and why it is important. You've already made an elevator pitch if you've been through that course. But it'd be a great idea to take some time now to refine that elevator pitch. After all, if you've properly adapted your app using the marketing course, it's likely that the who has changed since you first made that pitch. And if you've been prototyping well, it's possible that the what has changed as well. Take a moment to revisit your elevator pitch now, and check the box when you're done. Wonderful. You should now have an up to date 30 second elevator pitch. It covers who, what, and why for your particular app. That covers the short end of presentations. So, let's delve into the longer ones. When you're thinking about a longer presentation, it's often best to start with the building blocks of your elevator pitch. The who, what and why for your app. And use that as a basic set up for a story. You'll have to tailor the story to your audience, but generally, you can talk about a group of people who have a problem, and then talk about how your app addresses that problem. To tailor your story to your audience. Take time to present to someone like the people you'll be presenting to and ask them which parts resonated with them. It's very likely they care about different parts of your app than you do. You can make a story around the development of your app as well. Your prototyping process has given you a lot of check points along the way, and a lot of user feedback to work with in building that story. Often, the story will look like we saw the problem and came up with the solution, that's your first prototype. When we tested that solution though, there were challenges pointed out to us by users. Because of their feedback, we developed our concept further and have arrived at this shiny new prototype. When you share your current prototype with an audience, be sure to share it natively. If you're building an Android or iOS app, pass some phones around the table with your prototype pre-installed. If you're building a web app, make sure your audience has laptops and can interact with it themselves. You'll know you've done this right, if people in the audience explore your prototype, find something they like, and show it to the person sitting next to them. Now, one of the reasons that apps have often failed is that they didn't respond well to their target audience. All of the audiences you might be presenting to are going to be well aware of that fact. And so, it will be an asset to you to present evidence from your user research. This is the secondary reason we've been saving all of this. It allows us to show direct quotations in text, audio, or video from users. If you can show that your prototype is changed in response to user feedback, you can show that your at least willing to adapt to the market. Which is key to having your app be successful across a more diverse customer group later on. What this looks like is largely up to you, but there are some big no-nos. Don't focus on all the ways in which you've gotten it wrong, instead make it clear that these are ways that your app has gotten better over time. Also, try not to show too many responses from the same user. It's very easy to focus on the most eloquent user in each test, but if you do, you'll be building an app for that user in particular rather than your target market generally. With as many prototyping iterations as you've been doing, you should have a wide range of users who have discussed your app. So here's another story. A while back I heard a story about some music tests that were being run, and it was for an interface for a washing machine or something. And there was some problem that users could encounter that was incredibly frustrating. It was a little bit of an edge case, but it was incredibly frustrating. They'd lose a lot of time and be really confused. Right. And the testers, the designers who were working on this project went to the engineers and said, hey, this is a big problem! Mm-hm We should fix this. And the engineers said, that's not a problem, people don't actually do that. Right, because engineers are smart. Right. And designers said, we've seen people do this. This is a big problem, we should fix this. And engineers go, all right, we'll put it in the backlog, which means they never actually get around to it. And so the designers went back to the users, and did a bunch more user tests, and recorded the users and took video of the users having this problem and then saying, what just happened? This is so confusing. And then strung, I think it was like 30 to 50 of these users having this problem in a row together, sat all the engineers in a conference room and played the video. And when you're sitting In a conference room watching a video of real people have real problems with your product, it's a lot harder to ignore those problems than if it's just some person saying they saw somebody maybe have a problem with this once. Right. So moral of the story, take video, show it to people. It's the most powerful communication tool you have. Right. Thank you. Mm-hm. Now, in addition to recording feedback on what to improve, we've been recording feedback on what parts of our app really resonate with users. This feedback is really vital to share in a presentation on your prototype. It will be one of your greatest assets. Nothing shows that your concept resonates with users quite like hearing or seeing one of them be excited when using your prototype. Because of this, it can be a good idea to get video or audio recordings of your user testing sessions. The one rule is to always, always, always get permission from your subjects first. We've said it before, and its really vital that you do this. Ask before you record and ask every user. What you need is a media release form that covers research use and presentation use. This is a thing you should look for online and then customize and run by a lawyer before you use it. Over the course of a few iterations of user testing, you should be able to find some users who absolutely adore your design. If not, you may need to iterate more before you're ready to demo your app. By putting together all of these pieces, you should be able to create a presentation about your prototype for any audience. It's important to remember though that you'll be making a lot of these presentations if you want to become an entrepreneur. Persistence will be key moving forward, both in improving your prototype and in improving your presentation. The important thing to remember is that nobody gets everything they need to run a business off of their first demo. And that every time you make a prototype that gets poor feedback from users or a presentation that doesn't wow your audience, you're learning more about the task, and more about how to move forward. So Paul, why is persistence important and how many prototypes can you expect to make if you're actually building out an app from scratch? A lot. Way more than you think you should or than you think is at all reasonable. Your trash can should be full by the end of the week, every single week. I'm not talking about full blown interactive JavaScript prototypes. That's going to take a lot longer. I'm talking about sketch prototypes. When you start, you want to focus on iterating quickly in the cheapest possible medium. And often that can be crayons, right? You go out to a, actually, every time I go out to a restaurant, I ask for a kids menu and crayons, if I see them. So that if I have an idea or I want to jot something down or whatever I have pen and paper there and I can sketch it out. Right. There are a couple different iPhone apps if you're doing mobile development that let's you turn sketches very quickly into kind of mock interact prototypes. Right. But it works perfectly fine just to sit there, and actually move the paper around to create the impression of interactivity. Right. And interactive prototypes are great because you can make them super, super, super fast and you can make them super quickly. Sketching out ten prototypes, ten full flows throuo your app should take you no more than an hour or two. And then you take those prototypes around to five different people in your office and walk them through each one. And now you have an amazing amount of user testing data that's going to be invaluable as you start to move into interactive prototypes or like click-through prototypes or full JavaScript interactive prototypes. And as time goes on you'll get faster at building these prototypes and at finding users to test with. Exactly, yeah. As you go on, one, you'll get better at knowing which interactions or how to represent interactions in paper. You'll get better with your tools, your interactive click-through tools. You'll get, if you start coding, better at JavaScript, or better at talking to the developers who are actually building the prototype about which things matter, to speed that up. Mm-hm. And as you get better at that, of course, you get faster. And so you can really tear through prototypes and just throw them out at the end. So one thing that's really important to remember about these paper prototypes and interact prototypes is that the first times that you make them, you're going to look at them and you're going to say, this sucks, this is terrible. This is not at the right solution, and that's fine. That's absolutely perfect. Your goal is not to find the right solution the first time, your goal is to iterate lots and lots and lots and lots and lots and lots and lots and lots and lots and lots of times and eventually find the best solution. Separate from that, as a designer, as a prototyper yourself, you're going to look at this and say, this is not the best thing that I could've made. Mm-hm. Your craft will not be very good. That's fine. You're going to suck at this for a long time, before you're good at it. Right. That's part of doing this. And because you're doing so many of these, you're going to get better really fast. And so the best thing that you can do is just keep going. Just keep making prototypes, keep sketching, keep making interactive prototypes. Mm-hm. You will get faster, you will get better, it will get easier. Just keep going. Well done. You've made it through to the end, and you've learned a lot about prototyping and user reasearch. Now that you've learned how to iterate, how to bring on team members and how to share your project, you're ready to do the work on your own app. Remember that this work can be done many times over to get yourself to a great finished product, and that you should expect to throw out many early versions to find one that resonates with your users. Once you've done this work, you'll still need to actually build your app. But that part of it will go way more smoothly with this prep work complete. By listening to users before you build the app itself, you can be sure you're creating a great experience for them. Now get out there and start prototyping. Hello and welcome to the Udacity course on Prototyping. In this course we'll be covering te fundamentals of making prototypes to quickly and effectively make choices about your app. This is a vital skill for entrepreneurs, project managers, and anyone else who wants to build an experience that will delight users. My name is Jay. I'm a Udacity instructor, and I'll be guiding you through the practical application of these skills. Later parts of the course will also feature Carl, a UX engineer at Google, and Johnathan, an Envision specialist. They will be helping you with the details of user research and medium to high fidelity prototyping. The art of prototyping mainly exists to make your apps better and to save you time and money in building products. You like having more time and money? You should be prototyping. Let's get started. Prototypes come in various forms. Some are paper, some are clickable screens, some are built using code. No matter the medium, one thing these prototypes have in common is their intended purpose. The core purpose of a prototype is to help you communicate the story of your app to your stake holders for feedback or research sessions. This stops you from wasting time building a really polished product that has really glaring flaws. Prototyping is not just specific to the tech industry. Product design companies and car manufacturers have been utilizing prototypes from the very beginning. Prototyping is a way to help you make the best decisions possible around the user experience of your product. Helps you make key decisions and help you build better products through moving through various stages, which we'll talk about later. It's been said that an estimated 50% of engineering time is spent doing rework that could've been avoided. What's more, fixing an error after development is up to 100 times as expensive as it would've been before. Customers who have a positive user experience are going to be more likely to stick with your products and become your brand advocates. Now let's take a look at the various stages of prototyping that we'll cover in this course. So we're here with Paul. Paul, why is it important to be able to throw away your prototypes once you've made them? I would say that it's important to throw away your prototypes because it makes sure that you're not invested in your prototypes. One of the goals of prototyping is that all of your prototypes are cheap and super fast. And so, thinking about your prototypes is throwing them away. Make sure that you're going to think about them as these cheap, fast, little things that you spit out quickly, get rid of, recycle, move on. Prototypes shouldn't be thought of as just an end into themselves. That's one of the things engineers kind of think about, not necessarily prototypers. For prototypers, prototypes are a means to the end of making good product. Being able to use your test, being able to demo, putting together a video for VCs, for example, that kind of thing. So the end goal is this prototyping process, rather than any individual step along the way. Yeah, exactly. The point of prototypes is to be seen and interacted with. But who should be seeing them? One of the most powerful concepts in answering this question is the idea of circles of feedback, loosely defined there are four of them. First, you have the product team. As well as other people within your company or social circle. These people are very easy to find and interact with but are too close to the project to give accurate feedback as a customer. They're ideal for low fidelity prototypes. Second, you have subject matter experts. These are people who know something about the market in which the product will be deployed. But are not working on the product with you. They are also good for low fidelity prototypes, and can give you decent insight into medium fidelity prototypes. Third are your customers, these are people who are in your target market, and who you can reasonably expect to want your app. They give great feedback once the prototype is of a fidelity they can actually interact in a perfect for medium and high fidelity prototypes. The last circle, only applies to some apps, but is really vital for those apps. These are your customer's customers. They're really important to get feedback from and are perfect for the same types of prototypes as the customers are. Let's look at an example to identify circles of feed back. Pretend for a moment that I was just making a service for college students to do their reading and turn in their homework assignments. Now it's possible that I'm doing this project on my own, but even then it's likely that I could find a friend or co-worker who has gone through the college process. That friend is someone I could walk to the app and it would be in this first circle of feedback. The second circle would be experts in the field. In this case, that would be college professors, educational theorists or UX designers. Third would be the college administrators. Does the prototype fit their needs? As people who would actually pay for the app, they would be the customers. Finally, we'd want to show medium and high fidelity prototypes to college students themselves. These students are out customers' customers, and if they don't like the app colleges will not buy it from us. So it's always important to test with all four circles of feedback. Again, this last circle only applies to some apps, but is really vital for those apps. Now this course is part of the App Entrepreneurship Nanodegree. Lots of entrepreneurs work in teams but many also work alone, so it's important to think about which of these circles of feedback you can access as an individual. To think about that, let's first look at how you access each of the circles of feedback. The first circle is pretty simple. If you work at a company, you can walk down the hole to ask someone or if you're working on your own, you can ask a fried to sit down on a couch with you. Since you only need 10 or 15 minutes of someone's time to get a good sense how they would react to your app, you can usually get it. Experts in the field are often slightly more difficult. To get in touch with, and are best reached by using Twitter, email, or phone. Look for experts that are in your area, or wait until you have an interactive online prototype like the one we'll be building with Envision. The third and fourth circles are often best reached through Guerilla prototyping. You can often find someone who matches your target demographic at a coffee shop, and it's possible to offer them coffee in exchange for looking at your prototype. Now, which of these can you do as a solo entrepreneur? That's right. A resourceful solo entrepreneur in almost any city can find and ask for feedback from people in every single, but does not have coworkers and so can't just walk down the hall to ask them. It's important to note that the research you conduct with your prototype doesn't have to be complicated, but it does have to be effective. To be effective, your research needs to answer whatever questions you ask at the beginning. This was a great insight shared by Tomer Sharon in the product design course. So what questions are those? The stage or fidelity your prototype is in will determine the type of feedback you ask for and the type of questions you ask. First, it's easier to get good information from qualitative questions rather than quantitative questions. For example, if you're presenting a low fidelity prototype, you're probably just going to want to ask very high level questions, such as, can a user easily learn and use this app? However, if you're presenting a prototype that includes microinteractions and is reflective of the finished product, you'll probably want to ask questions such as, how does this animation feel to you? Do the interactions get in the way of or improve the experience? Your goals are entirely different at that stage since you're moving to more of a finished product. I've put a list of useful questions to ask and answer for each kind of prototype in the instruction notes below the video. These questions will get you feedback. Valuable feedback is any feedback that combines a specific part of the prototype. With a positive or negative feeling on the part of the user. For instance, a user reporting that they are confused by the menu is very valuable feedback, as is a user being excited at how quickly they can achieve their goal. Specific suggestions can be helpful feedback, but are often not useful until you're working on very high fidelity prototypes. When you're first recording users' feedback, make sure to keep all of it that you can. We'll talk later on about how to go about doing this, and about what permission you need from your users. At the end of the lesson, you'll be looking for patterns in the feedback from various users on the same prototype. So detailed records are vital. Let's take some time to look at a blogging app we've designed, as well as some feedback on it. In order to look at which bits of feedback are useful. So, here is the app. What we're trying to figure out is whether this app design works as a blogging platform. Can users easily find blogs they want, and post their content easily? When we asked users to find a particular blog, or to post their own content, they were generally confused. Users had a lot of things to say about this design. I find this really overwhelming, and I'm not sure where to go. I really like the title. You should use Comic Sans for the font. I can't find a way to post here. Which icon is the blog I need? Remember, valuable feedback is any feedback that ties a feeling from the user to a specific part of the app. Now, which of these bits of feedback are useful for us? Most of this feedback was really useful. Feedbacks one, four, and five, all expressed confusion at the design, and a sense that the user cannot do what they need to do. Feedback number two, is a useful thought on a question we weren't hoping to answer just yet. Which is also awesome. Users will often bring to your attention things that you should endeavor to keep in your app. And its important to listen to them. However, feedback number three, is less useful. For two important reasons. First, as a low fidelity prototype, we haven't settled on a font yet, and so we can't make use of feedback about the font we've chosen. Secondly, this feedback is a suggestion. Suggestions are great at identifying places that need to change, but should never be followed blindly. For this course, we'll be working pretty extensively with the idea of a calendar and to-do list app. This idea has certainly been done before and you probably have some images in your head of what an app like this might look like. Rather than relying on those though, we'll be working from a set of mocks of the sort you would have developed in the product design course. As you go through this class, remember that each time you do something with our example app, you can do the same something with your own app idea which will help you get started on the final project for the course. If you haven't taken the product design course or haven't thought enough about your app to make some very rough mockups of the screens, you'll benefit from taking a detour to that class before you continue here. If you have, take some time to familiarize yourself with the mocks which we've included below the video in the classroom page. The app design starts on this home screen here, [SOUND] which is then connected by a menu to all of the other screens of the app. Currently, we have a frequent action button which connects to the new events screen. As you can see, we only have a basic idea of what should go where. We have a sense that there should be multiple screens but we don't yet have a sense of exactly how they relate or what the arrangement needs to be on each screen. Remember, you should be comfortable throwing all this work away. If we spend ten hours designing the initial prototype, we're going to have to throw ten hours of work away. If we spent ten minutes on it, that's an amount of time that's easier to get rid. And both will get a useful feedback at this stage. So one vital question to ask at this point is which circle of feedback we should be targeting? Since the current prototype is pretty sparse, it makes a lot of sense to target the first circle, just to be sure that we're going in the right direction with this. You need to make sure that you're going to the right city before you get directions to a specific address there. One of the most useful questions to ask when you're building a low fidelity prototype. Is whether a user can easily make the app do the thing it's supposed to do. This may sound like a very basic question, and it is. But it's actually the most vital thing to ask at this point. For instance, one of the things a user might want to do in our example app is check off a task they've completed. We need to think about how a user will achieve this task from the starting point of, I have opened this app. For a first time user, we may need to have an instruction screen, but in general there are three common patterns for dealing with user flow. The first is to have an app that does only one thing and so only have that one screen. A good example of this is your common calculator app. The second is to have a main screen that functions as a menu of options for various things the user can do in the app. And then have each task occur on its own screen. Finally, you can have the first screen of the app be a place where the users can complete the most common task the app will be used for. And have a secondary screen for the menu. So, in our case, we can't use the first pattern since our app has multiple functions. That leaves us with a choice between a user flow which starts on a menu screen. And having a user flow which starts on a screen on which the user can check off tasks. As time has gone on, the second pattern has become much more common. It is generally better to be able to isolate the most common use cases and have those achievable from the main screen like this. For the same reason, mobile notifications are best when the user can perform some action directly from the notification, without opening the app itself. So let's take a look at our blogging platform from before. We're heard from users that the original design was confusing to use, both for finding a particular blog and posting on your own blog. Since this platform has multiple functions, posting and reading, we will need to choose one of them to be the main function. And one of them to be the secondary function in order to decide which screen a user should start on. Let's pretend that we have decided that the platform should focus on posting your own content easily. Which of these two layouts would be better for that purpose? That's right, this layout on the left would be better if we have decided that posting is the primary focus of our platform. It allows the user to perform that action from the home screen while giving them the option to go to another screen to perform other actions. It's important to note that the design on the right is not a bad design either. But focuses on a different primary action, reading content from other sources. There are even platforms which allow you to do both on the main page, which is primarily useful for social networking sites like Facebook, Tumblr, or Twitter, where interaction between content creators is the primary purpose. One of the fundamental features of a prototype is that it acts vaguely like the final app when it's interacted with but is much simpler to make. This means that when we build a prototype, we need to think about interaction points. An interaction point is anywhere that a user might might press, scroll, or type in order to interact with your app. By identifying the interaction points for your app, you will identify where you need to link screens together and what work you need to do to build a prototype. For a low fidelity prototype, we only need to deal with interaction points that will move the user between the screens, not interaction points that will allow them to input content. For example, let's take a look at our calendar and to do list app. This app had a floating action button, or FAB, which we can expect users to touch and on the screen that opens, it has a number of other options. We can expect users to try to interact with each of them in the final app but since they don't add another screen, we don't need to deal with that functionality here just yet. On our menu screen, each item leads to a new screen. Fewer menu items means fewer screens to build but also a reduced functionality. Finding a balance there is vital, we don't want to remove an core functionality in order to have fewer interaction points but you can probably go without a terms and condition option in your lo-fi prototype. Now, let's take a look at our mocks and think about which places we expect users to be able to interact with on each screen. This is vital to the next step, where we actually build out our prototype. So, for each of the mocks you see here, how many attraction points are there for that mock. In this case, we're interested in interaction points that bring the user to a new screen. Wonderful. One of the first things you'll note about my answers is that two of them have a range of accepted values. That's because you can build a prototype which does or does not contain certain screens. For the home screen we certainly have the fav and the menu button. But we may also have an interaction point for any or all of the events themselves. That means we have a range of two to five interaction points for this screen. For the menu screen, we have six interaction points on the main menu. But could also have a settings screen, terms and conditions screen, logout screen or a profile screen accessed by the picture or name up here. That means a range of six to ten interaction points. The new events screen is the only straightforward one. You can leave this screen either by going back to the home screen or by clicking Create. That means there are exactly two interaction points here. We spend a lot of time looking at the basic theory of prototyping. You know enough by now to know that these things are only useful if you actually build them. So let's get started on that. The fundamental idea behind prototypes is that your making the fastest version of a thing that can get you the information you need from the people you need it from. To that end, it's useful to think about what the fastest possible prototyping method would be, since that's what you'll want for your first two prototypes. We'll be showing you two options, either of which work for your own app or our example app. Behind this curtain is your best friend, the tool that will allow you to prototype and pivot faster than any other tool. Get ready. Yeah, look at that. Sketching your prototypes simply on paper is the single best way to work on prototypes when you're starting a project from scratch, and it allows you to change course very easily. You can redo parts of your designs during user testing in order to clarify things that are being called out as confusing. These paper prototypes are going to be super low fidelity but they will give you enough of an idea of your app that their feedback will tell you if you're going in the right direction. There's one other method of fast prototyping that's behind this other curtain. Prepare to be amazed. [SOUND] Yeah. That's a printer. When you've gone through the work of making mocks for an app, you can build a simple paper prototype by printing out these mocks. If you have mocks from the product design course, this rap could be for you. Both methods will work for us here, and they will both lead to great user feedback. Okay, so it's now time to build your first prototype. Choose one of the methods we talked about in the last video, and build out the prototype for our to do list app. You can find the mocks for that app in the instruction notes below the video. Remember that this prototype doesn't need to look good. You want to be giving a general sense of what's going on with the app, but you don't need a final or beautiful design yet. You'll want to end with each screen on paper somehow, as well as a list on a separate piece of paper of which button leads to which screen. Check this box [SOUND] when you're done. Awesome. Now that you've got a prototype, let's talk a bit about how to find users to test with. Okay, so we've got our awesome prototype, and we've got our excitement. And we know what information we want to get out of the user research process. We're all ready to go. The only problem is we haven't found any users to test with yet. Where do we find those users? Remember the idea of circles of feedback? In this version of the app, we're going to target the circle that is closest to you. That means friends, family or coworkers. However, we don't want just anyone. Some people don't always give good feedback. For instance, my dad will pretty much always tell me that anything I build is great, so I can't rely on him for feedback on what's wrong with an app idea. Also, people who are technical or design focused will often delve straight into solutions without giving their raw reactions. This means that their feedback is often less valuable at this stage. The ideal person to ask for feedback on the app concept and execution is someone close to you who does not build app or design apps on their own. If you work in an office, HR and marketing can often give really good user feedback. If you don't, you can often find a family member or friend who is not in the business of building apps. Oh, and one more thing, be sure that this is someone you have easy access to. Prototyping is a fast process, and you'll want to get feedback as soon as possible. Ideally, this is someone you can talk to later today. A family member in a faraway land is not going to be quite as helpful as your neighbor who you can talk to now. Take a moment now to think about all the people in your life and write down at least one who you can ask for feedback from. Write their name here so you have a record of who you plan to ask and then check whether they're a family member, a co-worker, or a friend. Awesome, you've zeroed in on your user. So let's talk about how to get great feedback from them. Before you go into the room with your user, you'll want to figure out exactly how you want to record data from your interaction. Generally speaking, you have three options. You can take notes directly, which is the easiest to get users to agree to, and does a really good job of allowing you to pull out the things that sound important to you in the moment. Writing notes also means that you don't need to take time later on to sift through the feedback again. You can also ask for permission to record the audio of the conversation. In the next video, we'll introduce you to the concept of talk aloud, which will be key to user research, and also allow you to get great feedback through the voice of your user. This is great because it allows you to focus on the testing as its going on and sift through the data later. Additionally, you will often catch really useful snippets of things you did right. Nothing convinces investors quite so much as hearing a user be verbally excited about your app design as they're interacting with it. Nothing, that is, except for seeing that user be excited about interacting with the app. If you have the resources and are able to get permission, it can be really useful to record video of both the prototype as the user's interacting with it, and the user's face as their interacting with the prototype. This footage takes awhile to sift through, and so, is mainly appropriate for higher fidelity prototypes later on. But can be really useful in presentations to investors. I would suggest that for the sake of the first prototype, you just take notes. It's always vital to have a record but for the moment we're wanting to get feedback as fast as possible. Is it okay to just use a cell phone camera to record video of your users? Is there any minimum required video product? Honestly, the minimum required video product is a flip phone from the 90s. Okay. Right, recording video is the most important thing. As long as you have some kind of video, from some angle, somewhere, it works. Ideally you have a cell phone, a cell phone video is fine, laptop is fine. If you have a professional camera, feel free to bring it. But actually sometimes bringing a professional camera Is too much. Right. You don't need that quality, that high quality video, right? You're not making an Apple promo video. All you need is enough to put up on a conference room screen for somebody else to see, either a VC or a PM or your engineers. Right. Or even other designers. Right, because humans are really good at figuring out the emotional import of video, even if it's grainy and low res. Yeah, and if you do bring a big professional camera, it might make your test subjects feel a little bit intimidated. You don't need to bring lights, you don't need to bring a boom microphone or anything like that. Just have a little cell phone camera, prop it up on something. You can get one of those twisty tripods to stick your camera on. There are other little tiny flip cams, little video cameras, with actual quarter inch holes in the bottom to stick onto tripods. Those work great too, but the main goal is keep it informal so the people don't feel insinuated, but just collect some kind of video. Right. One thing to note is that audio is also really important. And so, cell phones generally do a pretty good job of recording audio, but it's worth checking the audio to make sure that you can understand what the people are saying. Again, you don't need a boom mic, you don't need to mic the person, but it's really useful to make sure that you can hear them. One thing you can actually do is buy a separate, higher quality audio recorder which tend to be fairly small and unobtrusive. Hit record, put it on the table, leave it there running, clap or something in the video to sync up the audio and the video. Mm-hm. And then just leave the audio out of the video recorder, and use the audio from the table recorder. Right. Which tends to be much better. Awesome, thank you. So Paul, what do you guys do to actually get out of the way when you're testing with the user? What questions do you ask them or what statements do you give them to make sure that they're comfortable just taking the product as it is? Mm-hm. So by far the most important one is to make sure that the user knows that we are not testing them, we are testing the software. We will actually often make that just 100% explicit, say we are not testing you, we are testing the program. If you feel like you're doing something wrong, you're not, our program is doing something wrong. Then we kind of step back and let them start using the software. The other thing that we do during tests which is really important is to have the user think aloud. So thinking aloud is a little bit different than just talking or just thinking, right? One of the great, best ways that I've found to get a user to think aloud, or to understand what thinking aloud is, is to ask them how many windows they have in their house or their apartment, and most people will say, four? And you go, okay, well hang on, walk me through the process of how you got there. And the user will go well, I guess there are two in the kitchen, then I turn left and there's another little one there, so that's three, and then I go upstairs and I guess there's a couple windows on the staircase. Okay, that's the process we want you to go through. We want to know what you're thinking as your thinking, what you're noticing, what you're understanding when you realize something we want to know that. And then as the test goes on, you kind of keep poking them and keep prompting them. Mm-hm. And if they start to get frustrated you go back and remind them again. This is great information for us, you're doing nothing wrong. This is exactly what we want to know, yep. I'm sitting here with Carl the UX engineer from Google. Hey Jay. Thanks for having me. So Carl, let's talk a little bit about how to get useful feedback from our users when we're sitting down with them to test. Hm, so sitting down with users, there's a variety of ways that we can go about it. I think I like to start out with when we're looking at paper, I like to start out kind of an informal setting. I like to leverage folks that are nearby. And involve them in the brainstorming process as we start to flesh out features through our prototype. Ok, and do you start with a task that you want them to do, do you start with just like a flow that you've designed, do you start with a blank piece of paper? Sometimes it's actually all three. It could be any of the above. There are certain times when you're trying to conceptualize new features, things like that. Simple sketching is the right place to start. Just drawing boxes and arrows and circles, and things like that on paper is a really good way to start, especially when you have folks that are in non-design roles. Making them feel comfortable with paper is a really important part of the prototyping process, but we want to collect as many ideas as we can. So, we want to make sure that we include those folks. So, paper sketching is a good way to start. We can then evolve into looking at specific tasks. So, we might choose to prototype a specific task. We might choose to look at holistic flow. We might choose to do that through a set of drawings or through high fidelity mocks, maybe that we print out. And then we can walk through specific screens within that flow. Awesome. So, pretend for a moment that I'm a user and I've sit down with you. How do you get me to give you the feedback that you need? So that's a great question. We like to be really, really specific about the feedback that we're looking for. We really want to make sure that we don't just leave an open slate, because when we leave an open slate, folks will tend to focus on maybe design elements. Oh, I don't like the color of that thing, I don't like the position of that thing. So we want to very specific with the feedback that we're looking for. The best thing to do is come up with a set of directed questions that will lead the user in the direction that you're wanting them to go anyway. Okay. Maybe through a flow or with a specific screen. Okay, so you'll ask me a set of directed questions and I'll sort of go through and talk about them. When I'm stuck or confused, you ask me to do a certain task, at what point do you intervene and say the button's right here? Do you ever do that? Do you say, just let them be confused and record that you're confused about where this menu button is? Actually it's a really good thing to record confusion, right? So when a user gets stumped, we want to do our best to help them move through the flow. But we also really need to capture that the user got stumped in that case. The value there is that we can understand why they got stumped. We can probe just a little bit more, understand the difficulty that they came across with that UI. Was a particular affordance missing, is there something that we can do, maybe highlight it with a different color, make it bigger, make it bolder, that kind of thing? But it also is good to nudge the user through a flow. Mm-hm. If they do become hung up, you want to progress through the entire test, right? You need to address all of the research questions that you set out with. Right. And so, letting your user get stuck and spin in a particular area or on a particular screen is something that we want to avoid. So let's talk a little bit about the questions that we might want to answer. We've got, you said we need to go through the entire set of questions, what kinds of questions do we want to be asking about an app. So we've got some design in our head or on mocks already. What kinds of questions do we want to be asking about those mocks, about that prototype? Sure. Questions will tend to be very specific to the prototype itself. And so you are going to look for things. Particular interaction questions might come out. Does the user know how to get from screen A to screen B? Do they know where to find button A? Can they complete a specific task or something along those lines going through a flow? Can they find something that maybe is buried three or four screens deep? Right. Those are the types of questions we want to start with. Okay, perfect. So in our example app, we might have questions like, can a user check off this task? Does a user know where the menu button is? Things like that? Mm-hm. Perfect. Yep. Hey you! Thanks for coming and joining us. Hey, thanks, [CROSSTALK]. Appreciate you spending some time. Have a seat, we'll go through our prototype here. So we're beginning a project here that is a bit of an event management app. Think about it like to dos, events, that kind of thing. I'm curious to get your feedback on the general flow of the app. But I'm also curious to get your feedback on some very specific things. So for instance, in taking a look at, you can see here that we have a screen where we can create new events. But I'm kind of curious to understand from the home screen, when you first come into the app, do you see something that stands out for you that would draw you to go ahead and create a new event? Sure, so there is a big red plus there and it's red. So I am looking at it and that matches a lot of other designs on Android that is a material design. I am not really familiar with a whole bunch of other places. So if I was at this screen, I would hit that plus and expect to create an event. I'm not sure whether that would necessarily create an event right here where it shows the date as the 25th, or whether that would create an event that it was left to fill the date, but that's what I would expect. Yeah, you know you bring up a great point, right? Sensible defaults in the creation screen would make a lot of sense for us. In that case, like inserting the date. Because we've come from a specific event, specific screen here that lists the date. Like on this screen, where it looks like this is a day view. Yeah, and so here the plus I would definitely expect it to create that default. Yeah, so the pattern there is a floating action button. We see that pattern actually repeat itself a little bit through the app here. One question for you, the footing action button tends to move around a little bit within the UI though. Would you consider that to be a jarring part of the experience? Or do you feel that you understand the action of the button irregardless of where it's positioned in the screen? So I see it in three places here. Here and here which are basically the same. There's no real difference there. And here at the bottom. And it's nice to get it out of the way here. I think that's sort of where I expect it based on using a bunch of other apps. And likewise, here, presumably, this screen is going to move up and down. And it will stay in this interface, the border between the header and the actual list of events. That makes sense to me. Yeah, we're contemplating implementing some really nice animations as you scroll through this screen, so it's possible that the fab might grow and shrink. It might disappear as you scroll up through the list, but we want to keep the context in tab headers as we progress through the views. Because it's important that you maintain that information, right, that you be able to swap between the week and month very quickly. Now in looking at the fab on this particular page, on the week page, one of the things we've seen in the past is that The fab can get in the way of some of the content. Do you feel that that's really a problem for us here? I feel like right now where it is at the bottom right, it's going to cover something. You mean it doesn't cover that much? Mostly avatars in this screen right now. Yeah. Also given how many items are being displayed and the fact that the user is going to have to scroll through but can see roughly three or four at a time anyway, it seems to make sense. It could not exist at all. But that doesn't seem like that would be better. Okay. So given that this is an event slash 2D management app, one of the things that we really want to make sure that users can do is actually check off and complete those tasks. Do you see a clear way to do that within these screens? Hm, I don't see anything that actually says that this is to-dos at all. Like all of this looks like a calendar and event stuff to me. Interesting. Everything here has a time, it looks like it all has places as well. The idea of there being, there's no checkboxes, no indication that these are things that could be accomplished as another to do list, so I don't see that. Interesting. And so, if I were to direct you over here to these check boxes, these UI elements. Do you feel that that's obviously when you walk through the screens here that was a miss, right? Mm-hm. How do feel that we can evolve that to make that a little bit more prominent, to make that functionality standout just a bit more? It's a core part of the experience that we want here. And so, we need to do a better job of showcasing that feature. I'm not sure that the circular check box would be as good as a square check box. Usually when we check off things in most applications, there's an empty square that gets checked, as opposed to a gray circle that changes color and has that in there. I think it's also a little bit deceptive how this is displayed. Very much as sort of calendar events that have locations and times, which to-do lists certainly can have locations and times, but the thing to do is often, by far the most relevant, rather than the time. And so, I wouldn't normally go through my calendar and check off the events that I actually went to. Whereas with a to-do list manager, having the check be more prominent than the time would make sense. Hm, interesting. So certainly it sounds to me like you feel that the affordance needs to be stronger, but there's also a question about whether or not we're actually managing to-do's versus calendar events here. So perhaps the to-do aspect of the app needs to stand out a bit more. Right, so this here, we have the exact same things. And this very much looks like a calendar. There's no way of checking something off. Absolutely. And this, we can check it off. What does that do? Does that remove it from our calendar? I don't know. Yeah, I think that's a great question to ask, is what would you expect to happen when you did check something off? Would you expect it to disappear form your calendar? Would you expect there to be an animation associated with that? Would you want to see it in place? Yeah, if I'm using some kind of a to-do list manager, I think I do want something to happen when I check it off. And that probably means striking it out in case it was an accidental check, snd I don't want it to just disappear immediately. Oh yeah, good feedback. Potentially it could move away and be left with an undo. But in this case, where these obviously are calendar-ish things, I don't want them removed from my calendar. I might want to go back and see them. Absolutely, I think maintaining some historical context here is really important to actually managing the set of events that are happening here. Let me ask you one question. In terms of gesture support for this screen, how would you expect a user to interact with this to check something as completed. Would you expect a tap, a swipe? With this screen, I would expect a tap to bring up a screen that has more detailed information, so something like this. Oh, I see. Like a detailed view. [CROSSTALK] With these filled in so you could. So tap might bring it up to edit it. I wouldn't expect you to check it off unless the tap was on, basically the check mark. Which is why it might be a good idea to have it larger. This is a really small target area. Yeah, and we really want to make sure that we have a 40 dip tap target. Making sure that we have 40 device independent pixels is a valuable part of touch responsiveness. Making sure that we have enough room for the finger on the screen. I'm not totally sure what a swipe left or right might do. It's possible that you could train users to do that but it's not super intuitive what the objective would actually be. Swiping up or down definitely should move through the list and we can see things that are farther down. So one of the things you also mentioned was that there was some consistency in the experience here. One thing though is that we're only allowing you to manage apps from the day view. Would you expect to want to be able to manage those events from your home screen as well? Or is that more of like a heads-up display? Oh, you mean here you can check them off and here you can't? That's correct. If to-do list management is really a top level objective, then probably doing that from home screen is really important. One of the things about to-do lists, is people just won't use them if it takes a long time to do things. So taking an extra tab to get through to a day view screen to manage a to-do list, might keep people from interacting with it. Yeah, that does seem inefficient. But again, here, if I tapped on any of these items, I would normally expect to be taken to an edit. Rather than able to complete. Also it's weird here that you can edit everything about this potential item except whether it's been accomplished or not. So here you have to actually be in this screen and see the list to check items off, it that's possible. Whereas here you can edit everything else, but not that. There isn't even a notion of delete yet here either, right? Right. Where would you expect to see delete? Would you expect to see that here with completion? Here in the edit UI? I would definitely expect it to be in the edit UI someplace, because when everything else fails, people are probably going to go look for it there. It also potentially is reasonable for a swipe gesture to move this off and delete it. Interesting, so maybe swipe one way to complete, swipe another way to delete? That is a method of interaction that for instance, gets used on inbox, and so I think this would be pretty familiar to a lot of users. Yeah, that in particular swipe affordance is quite popular in inbox as well, yeah. Great, well I really appreciate you coming out and giving us a little bit of feedback on the app. You've definitely caught some glaring issues for us. We definitely need to iterate here a little bit more. But I would really appreciate getting more feedback when we have iterated and improved based on the feedback that you've given. Would you be willing to give us more feedback in the future? Yeah, absolutely. Great, thank you very much. Thanks very much for coming in and sitting down with me, Parema. We're building a new app here for our company. We're looking specifically at the to-do and calendar management space. And so based on the flow that I've laid out here, I'd like to talk to you about a couple of different things that we're seeing with it. So obviously over here, we have a very clear screen for creating and editing new events. But I'm kind of curious to understand initially, coming from the home screen or the data glance screen, do you see an easy and clear way to create new entries? Yeah, is that using the floating action buttons? Perfect. So the floating action button is a pattern that we've established across our application here. So we have fabs in a couple of different places. Fab placement has been a thing that we've dealt with in the past, so I'm kind of curious to understand. On these two screens, we have fabs up near the hero section of the page. But over here, we've got our fab at the bottom of the page. Does the location of the fab changing, does that cause any issues for you or are you comfortable with that? I personally like it with the hero by the hero banner. I don't know why, because I'm able to see all the events down below, so and then looking over that, and then I have to go over and search for the floating action button. So, which is why I feel, it's actually kind of nice when it's with the hero banner. Yeah. You know even with such a strong affordance associated with the hero banner, we can still get at it here on this screen, as well. But there is no hero element to associate with. And so we still end up having to roll with it at the bottom of the screen here. One of the things too is that, one of our concerns is that with a fab of this size, right, that potentially it could obscure some of the information that we're looking at here. Now in this case, if we're just looking at that, it's just avatars of the people, but as you're showing through the list, there could be more valuable bits of information. Do you feel that that would be a real strong problem for our users, or they would be able to work around that with scrolling? I think they would be able to work around that, although it does look a little like blocking some of the content. Yeah, for sure. That might happen, but I think once you get a hang of it and once you're comfortable with the app, I think eventually users will get a hang of it. Okay, interesting, so I have one big question. Given that this is sort of a to-do in an event management system, do you see a clear way to actually say, I'm done with this particular event? Do you mean to say by just crossing it off, clearing it from the list? Mm-hm. And just marking. So I think it's these check buttons. Very cool, okay so you picked up that affordance quite quickly, whereas other participants we've had come through our study have maybe struggled with that just a little bit Why do you feel that that affordance jumped out for you so quickly? You picked up on it really. I think it's sort of like the distinguishing factor between, one of them was checked, and the other was not checked. Oh, I see. So, I figured okay, this event is probably over, or it's done. So you move on and check the rest of them. Yeah, it's interesting though that in this case, the affordance is just a gray dot. Exactly. So if you were to see three gray dots here and perhaps not the checkbox, do you think that that would stand out as much for you? I think that would be a little confusing to- Little confusing? Yeah, what does this button do? Maybe I would be curious to try it out and see what happens then. Interesting, okay. So you're willing to be a little bit forgiving with the application, try some things to learn what the pattern is. Yeah. Interesting. One other big question that's come up in previous feedback, is that we can only manage those events from this particular screen. Do you feel strongly that we would want to able to manage them from something like the home screen? The home screen is much more of an at a glance screen, and so we did not strongly associate event management there. Do you still feel that that's valuable, do we need to go that direction? Yeah, I think it definitely will be convenient, since it's listing out the details of the event, to be able to check it off. Or are you talking with respect to details that particularly need to be in the home screen, or just about having to manipulate, edit events? It's really solely just about manipulating or editing the events. Yeah, I think we could add something like just swiping the event and giving the user more options on what they can actually do, like what editing options they actually get while doing that function. Interesting. So if we were to add some sort of swiper or some other gesture of support to one of these screens, what would your expectation be that that gesture would do? If we were to, for instance, swipe across one of these things? From most of the apps that I've used, probably have a delete. As well as maybe a more that would take you to a list of functionality, like you know. Would you want to reveal like a hidden panel behind that thing? Or go with something that's a little more like Google's inbox, where it's just task completion? I think I would want more of a panel. I see, okay. That gives options, more options. You'd would want to see more options? Yeah, yeah. Interesting. If we did support something like just a gesture to mark a task complete, not a revealed panel. Would you want that particular entry to disappear, would you want it to remain on the screen? What would be a clear indication,, aside from just the blue checkbox that this event is done? I think that any event that's done does not need to appear on the home screen, so I'm just thinking why it would have to be on their home screen once the event is over. So I would only have checking it off, would mean it's going to disappear from the list. Interesting. Would you have that expectation of the daily at a glance screen? Would you want to see things that have been completed there? Because it sounds to me like in your heads up in our landing page, you don't want to see that. But you do want to see it here? Yeah, in the daily calendar, daily event list, I would want to see all the events that have been completed. And events that are coming up. Yeah,, I think in previous feedback we got an indicator that we would want to see that stuff in case we made a mistake. We accidentally swiped something that we didn't intend to. Okay, one last question for you, and then I'll let you get back to your work. So the one thing that we haven't talked a whole lot about is how we delete events, right? It's one thing to say an event is done, but I've just made a mistake and I've created one. Where would you expect to see delete come out in this UI? So I think delete would be when you swipe the event. Just have a red delete in there. Oh I see. So you'd want to reveal a panel? Reveal a panel that says delete and other options, potentially. But if we were to create an edit UI like this, where when you tap on one of these things you come to an edit UI, you would see the title of the text, the people. Would you expect to see a delete button on that edit screen as well? I would expect something like a console to say that oh oops, I clicked on the new event button by mistake. So I don't want to create a new event. Of course I know that the up navigation takes you one page back. But I think a console button to just go back to the home screen would be useful. Interesting, you want a stronger affordance there. Mm-hm. Okay, great. Well I really appreciate all the feedback that you've given us. This is really helpful in setting the direction and the tone for the next iteration. No problem Thanks for coming out and helping. Now that you've seen expert do user research, take some time to do it yourself. Go to the last person you chose in the last quiz, and sit down with them and conduct your research. It's very likely some of your feedback will be the same as the feedback we just got. But it's also very likely that some of it will be different. Remember, the important parts here are to avoid guiding the user too much, to make a note of where they get confused and to see how they go about doing the things you ask them to do. Check the box here [SOUND] when you're done. Awesome. At this point, you should have some feedback on the example app design. If you'd like, now would also be a good time to get feedback on your own app's design. Wow, that was a lot of feedback. That was a lot of feedback, but very good, constructive feedback. Yes, good constructive feedback. You know, we found some issues that we knew about, we found some issues that we didn't know about. One thing that strikes me here though is that maybe we went a little overboard on producing high fidelity mocks. Yeah, we definitely did, because we're going to need to change a lot of these things. Yeah, I think so. And man, I spent so long getting this little plus, or this little check marks to work right. I spent so long getting these fabs up. Wasted hours. Yeah, I think that we probably could have dialed it back just a bit, we probably could have gone with some wire frames to suss out some of the details that we were looking at. Particularly when we talked to Hugh and we talked to Parima, we talked to them a little bit about fab placement, things like that. Perhaps we could have done that with a wider frame. Yeah, I think we could of. And I think that would have saved us a lot of time, because we could've gotten this feedback faster and then not had to lose as much work as we're going to. Yeah, absolutely. One of the things we were sweating is we were talking about some of these mocks too is like the color and position of some of these things. And I think that was largely irrelevant to the feedback that we got. So I think that maybe some of those discussions could have waited until later in the cycle. They could have. Some of those things, some of the design issues are things that came up, like- Yeah. We had the check box. That we asked people to check off these apps. And Parema was able to find the little check box here very quickly but Hugh could just not find that there was something in this app for to-do list. Yeah. That's right. You know, I did find it interesting too, that we got contradictory feedback in that regard from both participants. They wanted to look at the home screen. Hugh felt strongly that he wanted to see past events or completed events, where as Parema didn't feel that she wanted to see them. She really want to see that be as clean and clear as possible. Right. So I think we probably should start annotating some of this stuff. We should. I think that one of the things we're going to have to do is probably dig into this screen a little bit. And we're probably going to have to add a stronger affordance for task completion. And yeah, it's clear that even if we had intended for the tasks to be swipeable here, that's not intuitive. Yeah, let's get you some post-it notes too. Yeah. because we're going to take a lot of notes here, because we're really going to have to focus on the next iteration here. We really need to settle in on a specific interaction, so that we can make sure that the next round of testing we get a really cohesive flow and that our users really understand that clearly. Right. So task completion was one thing and the other thing we talked about was whether or not we actually need a strongeraffordance here for completing tasks. This is a heads up display screen though. Mm-hm. So it is a heads up display screen and we had intended it to be sleek and not have all of these extra things on it. Yeah. It's an at a glance type thing. But if we also, we had decided originally that this was going to be sort of equally a calendar app and a to do app and so both those things should be doable from the home screen from whatever we screen we land people on. Well, actually Hugh had some interesting feedback there, though. Mm-hm. He was confused as to whether or not this a calendaring app or a to-do app. Right. We initially set out with the intent of doing, I think, a mash up of both. Yeah. But he was really confused because it didn't seem to be any task management here. There was, no what are we doing? That's true. There's a lot of who, what, and where. Mm-hm. I'm sorry, who, where when. Mm-hm. But now what. Yeah. We're really missing that what aspect. We are, and that's a thing that we just completely missed in the design process. We have options then to address that, we can either say okay, we need to re-emphasize that. We need to have these big, big check boxes here. Absolutely. Maybe even actually this shape here, just pasted in, as the way of doing it, because our icon is a check box. That is a thing that we clearly have in the design up here. But it's not a thing that we have in the design down here. Or we could do something like change this icon, make it just a calendar again. And that's, it's addressing a different problem, but it's one that we've already addressed pretty well. Well, but the thing that we really wanted to go after here was that strong marriage between to-do and calendar. And so I feel like if we abandon the to-do aspects of the app, then maybe we're not holding true to the true promise of what we intended to set out to do. Right. I do like your suggestion of re-using the app icon a little bit more. Hugh gave us some interesting feedback that he felt the affordance here for the checkbox needed to be stronger. He missed it when he first looked at. Pradema also had some issues with it. We were talking about these gray circles not being a strong enough affordance for a checkbox, I'm sorry. So I think we need to really strengthen this stuff. Right. We can strengthen that by making it larger, we can strengthen that by making it square, because again I expect radio buttons to be round and check boxes to be square usually. Yeah. One of the things that just came to mind is that perhaps we can take just this one screen and do a couple of iterations on that one screen and give those to some users for some very directed feedback. Right. On those specific elements. Mm-hm. Do they feel good about using this check box as that affordance? Right. Will they pick up on the fact that it is a way of completing the task? Right. So you're saying we can do user testing on just iterations of a specific screen rather than the entire flow. That's right. We can actually drill down on specific features, too. One of the pieces of feedback that we got was actually talking about gesture based support. Right, because we had one person who said that the swiping should be more options, and we had one person who said that the swiping should be delete. That's right, or complete. Yeah so, I certainly think that we should probably strive to keep our UI here very simple. So I don't know that Perdema's suggestions of revealing a panel behind these screens is really going to be the direction that we want to go in, but I definitely think gesture based support is something that we need to investigate with a higher fidelity prototype. Right, and when I'm thinking about that gesture based support, we can rely either on what we expect users to have already seen in other apps or we can have an instructional thing. We have this, mock over here, we have a place that we can have information that's just sort of an overlay on this screen. Yeah. We could have that inform users about how to swipe and how to complete a task if we wanted to. I think that's something that we're going to have to test a little bit more, too. Because anecdotal evidence suggests too, that some of these splash screens, that it prevents people from actually engaging in the app. Oh, I see. So sometimes they want a little more serendipitous discovery. Pradema for instance, was very willing and very tolerant of just playing with an app to see how it worked. Whereas I think Hugh was a little bit more regimented in his need. Yeah, Hugh wanted it to be, if it's a to-do list app, we should be able to check things off quickly. That's right. That's right. What were some of the other feedback that we got? Well, first off, we got some positive feedback, right? Yeah, that's always good. We got that the, when we ask people to make a new event, both of the testers they went straight to these fabs. Especially on these two screens, they just went straight for that fab. That's exactly what we'd hoped for and the affordances were clearly big enough for those. Yeah. Smaller than this affordance. Yeah, the one question that did come up is maybe this affordance is just a little bit too big. Yeah, because it might cover up. I can't see whether it's just one person going to this event or multiple because one of them might be under the fab. Yeah, that's right. So we might actually be having a little bit of an issue with hiding some of the data there. But I agree, that positive feedback is really encouraging that at least the users are able to pick up where the fat is and what it does. They all clearly understood that that was event creation. We also got feedback that was something we weren't looking for originally, which is both of our testers, we had them expect to be able to click on this and open a screen like this but that shows current details. Um-hm. And we actually didn't mock that up. That's true, we did not. One of the other things that just caught my eye in our design here and perhaps something that led to Hugh's confusion. If you look here, we call this thing a task. If you look here, we call it a task. But if you look here in this screen we call it an event. That's true actually. That is a thing that I hadn't thought about because as we were designing this we were thinking of those as the same object. That's right. We were thinking this is a task/event. And I guess we don't communicate anymore. That's a thing that we expect. We sort of had an expert blind spot there. Yep, yep, that definitely happened. Well we're going to have to correct, rectify that. Mm-hm. Maybe involving a tech writer in this project would be a good idea if we have access to one. Right. But, that might cost a little bit of money, so maybe we should just keep an eye for consistency. So, as another option we might be able to present the same flow with maybe all of these say events, or all of these say task, or some other word that might communicate all of that and just see is Hugh able to figure that out, is Pardema able to figure that out, is anyone else that we have in our office able to figure that out? Yeah, I think that's a great suggestion, not only testing some of the UI components, like for instance where the fab was, or whether or not there's a hero element. But testing the language of the app is a really important part of bringing the highest fidelity to our experience. We really want that measure of consistency through our app for our users. Right. All right. So wow, we've got a lot of feedback and we've got a lot of things that we can iterate on. I think right now it's time to take a quick look at this feedback and think about what is actionable. So, we've gotten a lot of feedback now from a couple of different users. Next, we need to figure out if the prototype did well or poorly. Remember, we don't need to have users love our app design as a whole at this point. We are working with a low fidelity prototype, so our goal is simply to get a sense of whether the story of the app makes sense. Could users go through and actually make sense of the app? Could they do the things we wanted them to? When considering whether the prototype got us the information we needed, we need to look at whether we have answers to all the critical questions around our app's story. Questions about how to fix flaws in our app, after we have found them, may also become critical. The only way to find this out is to look at the feedback we got from our users. Here I have the notes I took from the conversation with Hugh and Poornima about this, and it looks like we got pretty solid feedback on that. Both of them jumped straight to the floating action button, and were certain that it did the right thing. We can call that part of our app a success. Now, I've given you notes on the questions we asked in our research in the previous node, and another copy will be in the instructor notes for this node. For each of these questions, mark which ones are critical for our app structure. This is one of my favorite parts of user research, because it shows just how much of the process you can go without, if you're in a rush. Of all these options, the only two that we thought were going to critical when we started, was whether the user can create a new event, and whether users can easily find a way to check off tasks. Once we identified that you had trouble finding the way to check off a task, that also elevated the question of whether users would like to be able to check off tasks on the home screen to critical. There are a couple of informational questions which you may consider critical, as well. Knowing how to make the check boxes stand out as well as figuring out where to put our delete buttons are important parts of the story. Given all this feedback and that we have data on every critical question, the main task of our app. And the things in the way of those tasks. It looks like our prototype was a success. We haven't decided whether our design was a success though. To do that, we need to be sure we have enough data Now that we've got a sense of our critical questions and that they've all been answered, we need to consider how many times they've been answered. How many users do we need to test with to feel confident in our results? Luckily for us, it turns out that we really only need a few people to get good data. Each prototype should be shown to three to five users, in order to catch most of the issues in the design. One of the most fascinating articles in user research by Jakob Nielsen, shows that on average a study of 3 users will find upwards of 60% of the issues with your prototype. A study of 5 users will average upwards of 75% of the issues. In either case, that's enough to get a sense of how the prototype did, and further research gives vastly diminishing returns. The art of prototyping is not the art of extensive QA. It is a waste of time to find 100% of the issues in an app design that you plan on throwing out. When you have three to five users being asked the same questions, you start to see trends. User B will probably find some of the same flaws as user A, and these flaws should be counted as more glaring. When you're thinking about how to weigh data from various users, it's useful to go back to how critical the question was. If a critical part of the app is going wrong for multiple users, you have a problem. When you're thinking about how to weigh data from various users, it's useful to go back to how critical a question was. If a critical part of the app is going wrong for multiple users, you have a problem. If a less critical part of the app is going wrong for multiple users, you're probably still fine and can iron that out in meeting fidelity prototypes. So, for our app, we'll want to bucket feedback from all of our users. In to some style of yes or no by question. That will allow us to actually make a decision about our app moving forward. You'll note that we've only done research with two users for our study. That's because when we include your user testing, we'll have a full study of three users. In the next node, we'll decide whether to make another Lo-Fi prototype, or whether to move on to a medium fidelity one. Okay, so we've done a little bit of user research. We've gotten our feedback from our users. And we've pulled out the bits that are useful. And we've just now talked about how to bucket the feedback from multiple users. The final step is to decide whether we want to make another low fidelity prototype or whether we want to move on to making a medium fidelity prototype. There are really two deciding factors here. First, did we get feedback that answers the question we started out with? Second, does the feedback overall say that we're going in the right direction? If the answer to both questions is yes, we should make a higher fidelity prototype. If the answer to either question is no, we should make another low fidelity prototype, incorporating what feedback we can from this one. It's vital to note that the second question is very subjective. For some prototypers, it's important to have 90% positive feedback to feel like you're going in the right direction. For some, you only need 50 percent positive. So with all that in mind, do you think it's better to move on to medium fidelity prototypes, or do you think it's better to do another round of low fidelity first? Well done. In this case, we've chosen to move onwards because the only substantial negative feedback was that one of our screens was redundant. However, either answer would have been okay. There's no right answer in prototyping. All we can do is make something better than we did the first time. Whoa. We made a prototype. It gave us information we needed. Well done prototype. You rock. Unfortunately, as we said at the beginning of this lesson, prototypes should exist for exactly as long as they are needed, and we don't need you anymore. [SOUND] And, we're done. Now that we've gotten feedback on the overall structure of the app, we'll go into Envision, getting a deeper input from Jonathon on how to make interactive prototypes. Welcome back. We've just finished taking in user feedback on our low fidelity prototype, and we've made the decision to move on to a medium fidelity prototype. Now that we've made that decision it's time to learn about medium fidelity prototypes, interactivity, and what tools are available. To do that we brought in Jonathan, an expert on interactive prototypes. So what is a medium fidelity prototype? And how does it differ from a paper prototype, like the one you've been working with? The main difference that is relevant for us at the moment, is the idea of interactivity and clickability. When we worked with the paper prototype, we had to indicate to users what happened when they clicked a given button, and we had to be able to guide them when they were confused by our layout. For our next iteration, we'll be building a clickable interactive prototype. That means, that we could hand a user the prototype, ask them to do a task and then get out of the way. When they click on the screen, the app will move to the right place. When they reach their destination, it should be clear. It's important to remember, that this doesn't mean that we have a beautiful or well designed prototype yet. We don't have animations. We don't have perfect lines set up. And we don't have a final look for the app. In fact, for our medium fidelity prototype, it's possible to simply take your paper prototype, draw it in marker on a piece of paper, and import it into a prototyping software. The key here is having primary navigation points, which enable you to get feedback on whether a user can achieve your intended task of the app. So if we're considering something that looks very similar to our paper prototype why would make one? For this, it's important to go back to the idea of circles of feedback. Our paper prototype was a thing that we could show to people who were near by and who we knew. The medium fidelity prototype will be something we can show to subject matter experts and users as well. By expanding our net we can gather more information on the apps experience from each of these vital perspectives. With an interactive prototype we can ask users to complete tasks and see how they go about doing it. We can ask them to explore the app looking for a certain functionality. And most importantly we can get out of their way and see the raw reaction to the app. So we're here again with Paul. Paul, why is it important to have interactivity in your prototypes? So it's important to have interactivity in your prototypes because one thing that I often see in demos or in presentations is that I want to say hey, here is my prototype. And unfortunately, this doesn't give you a really good understanding of how somebody's actually going to use your prototype. I'm not the user, you are not your user, right. And so if I use this prototype, I am an expert in it, I know how to get good results. If I do this. I take this. The person, right, and you can actually use it and play with it and interact with it. You have never seen this before. Right. So you're going to be a much better representation of how an end user is actually going to use this. Right. Right. The other thing, if there's really nobody else around what you can do is get really drunk and then use your prototype and that's going to be actually a fairly good approximation about some random person on the internet, using your device or using your website. Hm-mm. There are actually a few different services that you can go online and find where you will have a usability expert get drunk and review your usability and send you a report on it. Awesome. Thank you Paul. You're welcome. Well that sounds great, but how will be go about building this interactive prototype? We'll need a tool to build it. What we're looking for has three key aspects. First there's interactivity. We only want tools that allow us to build a clickable prototype. All the better if that prototype can be interacted with on the target device. This is the fundamental part of medium fidelity prototyping so it's non-negotiable. We also want something that is fast. We are busy entrepreneurs, and we don't have time to waste on learning a complex tool for this task or on building a prototype in a time consuming way. This is fundamental to all prototyping, remember. We always want the fastest version that will meet our requirements and get us the info we need. Finally, we'll want to be able to get that info from the right people. Sometimes, the right people for the job are far away, which means that we'll want a tool that makes it just as easy to get feedback from someone halfway across the globe as someone halfway down the block. So, we've talked a bit about what our tools needs to be able to do. What tools are out there for us to use? Most people who make prototypes for a living work with a lot of tools. And many of them are very well tailored for a particular kind of prototype. Some of the tools people use are Keynote, Powerpoint, Interactive PDFs, Balsamiq, Pixate, inVision, and our good old Pen and Paper. Don't worry about trying to remember all of these. The point is to give you a sense of what's out there. In the next video, we'll talk about what tool we'll be using for this lesson and why. Each of these tools has various strengths and weaknesses, and each of them will become a part Part of a mature prototypers tool kit. Let's get a sense of how each tool matched up with our requirements right now. Keynote is a common tool for when you want to present a low fidelity prototype to a group, often within your company. It's very fast to work with but it's hard to get remote feedback with and is non interactive. PowerPoint is a very similar tool and it's used for the same reasons. Again, speed is a strength here, but there is no built in feedback and it's not interactive. Interactive PDFs made with Adobe InDesign are a common choice for designers who are workshopping user experiences. They are interactive and once you've put in the work to learn the software, can be made relatively quickly. However, they have no remote feedback options. Balsamiq, with a Q, is one of the faster prototyping tools, which allows for easy iteration but doesn't have built in remote feedback tools. Some people combine Balsamiq with the user testing framework to handle that portion. Pixate is a prototyping software targeted at high fidelity prototyping. It does interactions, and a lot of its power is in the way it deals with micro interactions and animations. We'll revisit Pixate in the next lesson. For now, it's a bit slow for our purposes. InVision allows you to create interactive prototypes quickly, and has a couple of dedicated tools for getting remote feedback quickly and effectively. And finally, our old friend, the pen and paper, is super fast, but doesn't allow remote feedback, and it doesn't allow interactivity. Wow. That's a lot of options. However, by making a list of what we needed in a tool, one of them stands out for our current purposes. InVision is the right tool for us, right now. I want to delve a bit into the strengths of the tool to make clear why we're choosing to use it. First, I want to take a look at interactivity. We've already mentioned this is key for medium fidelity prototypes. And it turns out that inVision has a concept of Hotspots, which maps directly onto our concept of interaction points. To make our prototype interactive, all we need to do is take our list of interaction points and make a hotspot for each of them. That bring us the speed. InVision allows you to simply import your mocks or wire frames into the tool, which combines with that hotspot idea to make building these prototypes a very fast process. And then, it's main strength, Remote Feedback is key to this tool. We'll talk more later about what this looks like. But for now, all you need to know is that inVision allows us to do user research like we did with Carl, but with someone half a world away. We can do that either in real time with a LiveShare or asynchronously with a Share Link. That's pretty great. In the next few sections, I'll be covering how you'll create your very first prototype within InVision. By combining the core aspects of speed, interactivity, and remote feedback, you'll see how your static images can be brought to life through the InVision platform. The five steps we'll go through are create an invisionapp.com account, create your project and select a device type, upload your Wires, JPGS, or PNGs into the project via drag-n-drop, browse, InVision Sync. Link your screens together, and finally, how to invite collaborators into your project. To create an account, go to www.invisionapp.com. Click Sign Up Free in the upper right and fill out the account creation form. Then click Sign Up Free. For being a Udacity student, you'll get three months free of our InVision starter plan. Just go to www.invisionapp.com/udacity and enter promo code udacity. Now complete these three fields and click Sign Up Free to create your account. Once you're done, check these three boxes. Once you've set up an account, you'll want to create your first project by clicking the large pink plus button on the projects page. It title your first project and choose a project type. It's not so important, which project type you select at this point, because you can always change your project type later on. For this example, we'll select the Android mobile project type. Let's review how to create a project and select a device type. Click on the button needed to create a project. Great, you've click on the pink plus button. You've created your first test project and you've selected your project type. Now create a dummy project by filling in the title of the project and select a Mobile Android Project. Once you've done, click the check box to continue. To upload wireframes, JPEGs, or PNGs simply drag and drop your images directly into your browser window, or you can simply click Browse to select screens you would like to import. If you find yourself manually uploading screens one by one, it may be a long and cumbersome process, so you may consider using EnVision sync as a method for automatically uploading screens for you. EnVision Sync can automatically detect changes to the screens that you've saved on a local folder on your computer, and automatically import those into EnVision for you. The advantage of using EnVision Sync is that you can automatically have those screens uploaded into EnVision so you don't have to manually upload them each time you want to create a project. Once you've finished uploading your screens, you'll see a thumbnail preview of all of your screens uploaded into your project. Now that we've uploaded a few screens, let's make a click-able prototype out of them. To do this, simply click on any screen within your project. This will bring us into the console mode. The console mode has four options at the bottom. Preview, build, comment, and history mode. For this section, we'll only focus on the preview and build mode. Click on the build mode to begin creating prototype hot spots. In the build mode, go ahead and use your cursor, and drag and drop. Over an area of your image to create the hotspot. This will open a window where you can choose the destination for that hotspot. You can choose a gesture or a transition. Once you've created that hotspot, go ahead and hit Save. And to preview whether or not this interaction works, I'm going to go back to the preview mode and there you have it! I've just created the very first hotspot. At this point, we've created a prototype that has interactivity. The hot spots that we've created will allow anyone viewing our prototype to interact with the images as if they were the real thing. It's important to note that while there is some level of interactivity, we don't want to add too many interactions at this point. Remember, the key here is having primary navigation points, which enable you to get feedback on whether a user can achieve the intended task of your app. Now, let's share this prototype with someone. There are three ways to do this. First, you can select the Share Link button. This allows you to generate a unique URL that anyone can view. Your project screens can be viewed on a desktop or mobile device. Anyone with this link can view, interact with and comment on your screens. You can email it, SMS it, embed it or even download it for offline viewing. Simply copy and paste this URL, and send it to your participant. Second, you can add someone to your project as a collaborator. Adding a collaborator to your project effectively gives them full edit access. This enables to view, interact with, comment on the screens, edit and add and remove screens as well as edit and add hotspots. To do this, simply click on the plus sign in the upper right of your project home view. Adding a collaborator will give that person full access to your project. Third, you can start an instant LiveShare event. A LiveShare meeting enables you to have a real time collaborative discussion with anyone with Internet access. Participants of your meeting can draw, add comments, and view your project in a one-time event. You can have unlimited participants in your meeting, and you don't need to book your meetings in advance. Plus, you can have as many LiveShare meetings as you need. Simply copy and paste this link and send it to anybody you want to participate in your meeting. You can turn on a VoIP call here where people can join a VoIP, or you can have them dial into this phone number for a private conference line. In the bottom left, you'll see that there's a group chat window. Participants can turn on the drawing tool, where you can draw over your designs, or you can turn on a whiteboarding option. Any of your designs can be saved to a Snaps folder or emailed to all of your participants on the fly. We've just made an interactive InVision prototype. Well done. Remember though, the vital part of prototyping is iteration and constant improvement. We got some feedback at the end of the last lesson, and we decided on a few potential changes. It's now time to implement those changes in our interactive prototype. Jay Can you remind me what those changes were? Yeah. The main feedback we received revolved around the task functionality not being clear. Carl suggested making the main screen be our day screen which had the checkboxes. We also decided that it would be best to have those checkboxes have some higher visibility and visual weight. Finally, we decided that our wording around task and events was unclear. Remember, we had intended for them to be the same object, but we've used two different words for them. So when you've identified a problem point in your app, how do you go about figuring out what the best solution is for that? So the first thing to realize is that to some extent honestly there is no best solution. There are lots of best solutions. Mm. and your job is just to find one the fastest you possibly can. Mm-hm. So the best way to do that is actually through quantity rather than quality. Don't necessarily focus on finding the best solution, just come up with the first thing that you think might be better. And then come up with the next ten things that you think might be better. Mm-hm. And then make prototypes of all of those. Again, we're going for fast and cheap. Mm-hm. So that this is a really quick process. Make ten prototypes, test them all. Mm-hm. And see which is better. Okay. Then do that three more times, or four more times Or five more times and eventually you'll start to settle in and really understand what people care about and what's the best- Mm-hm. What really is valuable to them. Right Changes on your screens based on the feedback you've received is fairly easy. You can quickly draw new versions of your screens using paper and pen, or use a design tool you feel most comfortable with. Once you've edited your screens and saved them as JPEGs, PNGs or GIFs, simply upload the screens to Envision once again to replace your screens. Or, if you're using Envision's sync tool, simply save your screens with the same file names as you had before in the screens folder of your project. Envision will automatically handle the version control of your screens for you. So now it's time to actually implement the changes we talked about in the last video. To start with, I'm going to open the create screen in an image editing software. I'm going to use Paintbrush, a free image editing software for Macs, but feel free to use whatever software you like. So for me, I will go up here, go to open, and browse my way to the correct screen. So now that I'm here, what we're seeing is that we have this event language here. And everywhere else in the class, we use this language of task, so the first task for us will be to change this event word to task. Now, it's fairly easy to do that in a program like this. I am actually just going to copy this, command c, command v and cover that up. It's not the cleanest, but it works. And with, as with all prototyping, what works is what you should be doing. So let's move this event word from the screen. Now, we need to add the task word to the screen. So this won't be ideal, but it will actually convey the information we're trying to convey. So, now that I've done that, I can save and then I can close out. If we wanted to upload this, that my prototype was now using it, we would press this plus button. See how it says drag and drop? We can simply go up to create, drag that and drop that. And because it has the same name, we now have task over here. Any time you're uploading a screen to your InVision prototype, which has the exact same name as a previous screen, it will override that screen. So, now when I go into this screen that we've just created, then I go to the build mode, you'll see that it already has these hotspots, and so it already knows that it's supposed to link backslash close when I press the create button. Now let's think another thing. If we want to have these check boxes show up somewhere and they need to be good, well, the first place we encountered check boxes was this calendar day. So let's open up this calendar day in our image editing software. So as we can see, it currently has these check boxes, which are these grey circles, and then they turn into blue circles with checks in them. That was confusing some of our users so, again, we're just going to cover this up. There's no need to be fancy with it, and then we'll replace that. So I like Paintbrush because it comes with this nice tool for just putting out rounded boxes. So I can just make this square check box. I'm holding the Shift key down to make sure that it's actually square. And then I can switch over to this copying tool again, grab that, and copy it on down. I'm going to try and line these up, but they won't be perfect, and that's all right. Again, you want the least time spent on your prototype as possible. So again, we've cleaned this up, it's much better, we have these check boxes, let's save and upload that screen. So again, click this plus button, and move the calendar day on over. So by doing that, we've now got these check boxes here, and we've now got all of the hotspots already there, so we can click on this and go to the week or the month, create an event, go back to this drawer. The final thing we wanted to do was make sure that the home screen had these check boxes, and we can do that in one of two ways. Either we can take our current home screen and add the check boxes, or we can take a look at this calendar day, see that it has all the same information as our current home screen, but also as check boxes, and say, well, maybe we don't need actually this home screen anymore. So instead, I'm going to go through the hotspots we already have and change them so that rather than pointing at home, they point at calendar day. To do that, I'm first going to go into this view part. Then I'm going to click on build mode, and that will bring up all the hot spots. So the way I've done this, home is the one that currently points at the home screen. We want home to point at calendar day, so we just change that, click save, and now if we go back to our preview mode click on home, it'll bring us to calendar day. There are two other places we'll need to do this change, so lets move on through. The first place is in your sign up screen. Usually when you click this create for create an account, it will link you to home or to your walkthrough. You can change that to calendar day if you'd like. If you haven't pointed me in the walkthrough, then you have to change this to point to calendar day, and again, every time it's very simple. Click on this, click on the drop down, go to the right screen and then click save. See, here's our home, we don't actually have to change anything from this home to root from the prototype. All we need to do is change the things that would otherwise point to this home screen. So going through this, it looks like there aren't any other places where we know we need to change the hotspot. There are places where we might have to change the hotspot. Depending on how you implemented this new screen, this create might go to link back, close, or it might currently be pointing at the home screen. Similarly for this back button up here. Check those before you move on. The last one is this sign in. Very often this will be pointing towards home, and you'll want this to be pointing towards calendar day. With all of that done, we can go to our preview mode and click around to be sure that we've done this right. So let's try signing in, and wonderful, now we're on this screen with the check boxes. That's what we wanted. If we take a look at creating a task, we now see that it does say, in fact, task. It's a little bit spaced weird, but it took us five minutes to do. Wonderful, mow your test project should have reacted to all of the feedback we got in our first round of user testing, which means, of course, that it's time for more user testing. Now that we've completed making our prototype we'll want to gather feedback using Envision. There are two methods for gathering feedback on your designs. First I previously mentioned the share link. Share links are a great way to gather feedback on your project. You can also generate specific share links that only display specific screens in your project if your trying to obtain targeted feedback. Another way to gather feedback is through a live share meeting. Live share meetings are instant meetings where you can share your designs with unlimited participants in a live meeting. The meeting is free, and is similar to a GoToMeeting, WebEx, join.me or Google Hangout meeting. In live share meetings, you can see all participant cursors on screen. You can activate a drawing mode, where everyone can draw over your designs. Participants of your meeting can also leave contextual comments, which get saved instantly, just like they would when viewing and commenting on a share link. You'll recall in lesson one, that according to Jakob Nielsen's research with only 3 users, upwards of 65% of the issues in a prototype can be uncovered. And with only 5 users, upwards of 75% of the issues can be found in a prototype. It won't make much sense to do more than ten research tests on the same prototype because of the law of diminishing returns. The key to effectively applying Nielsen’s research, is getting the feedback from three to five users early on, and continuously iterating on changes, as you’ve made incremental changes to your design. So after you’ve made your first round of feedback, make the changes you’ve received to your designs. Then, go for another round of three to five users. After each round or iteration you'll find that your designs will improve efficiently. So we've now made some changes to our envision prototype. We've add in the check boxes and we've changed our home screen. Now in order to do user research with it we've put it on a phone and we'll bring in users to test with it. Johnathan, how do we go about putting it onto this phone? It's simple Jay, all you need to do is click on the Sharelink button, and click SMS. When you click the share link button, you'll have an option to choose how you want to share your project. Simply click the SMS button, and turn the phone number that you'd like to send a text to, and it'll automatically send the text directly to your phone. When you open up the text, it'll have a link that'll allow you to download the prototype directly onto your phone. And now we're going to bring in Jeremy to start testing our app. So welcome Jeremy, thank you for coming in and talking to us. Of course, I can't wait to see what you've got. Yeah, so what we've got here is essentially, a to do list, slash calendar app. And I'd just like you to take a look at this, and try to make a new event. Sorry, a new task. Okay, so looking at the homepage, I see I've got this sign in button, so that's a nice different color, very obvious. Let me hit it. All right, so now I'm in the main screen of the application and I see I've got this big button right here. So I bet that creates a new task. All right I've got a new untitled task, see if I can get a name, or is this the prototype the text fields are- Yes, the text fields aren't working right now. I can see you want to be able to use them you want to be able to type in things. So, I want to click through all of these and then, hit the big create button. Yep, awesome. Okay. So, you've made a new event. That's awesome. That was very clear. Now, can you just sort of navigate through the app. See if there's anything that makes sense to you as an extra feature. See if there's anything that you want to explore. How would you go about exploring this app, first off? Well, let me just scroll down, all right. So I've got my list of tasks, there's nothing else down there. Let me see if I can move back and forth through the days, I presume in the full app that would work. In the full app that would work, but right now we don't have that? Well the only other thing that I see to explore is this menu button up at the top, so let's see what we've got. Okay, we have a bunch of different options, should I just pick one or? Yeah, sure, just explore a little bit. One thing that I want to see especially, is your reactions to certain of these pages, so you know the overview page, the calendar pages. Well let's check out the overview page first. Okay, so I have this list of, I assume these are different collections of tasks that I've done stuff with in the past. And then some graph of I guess, how often I've used things, how often I've completed things. Would this be a useful thing to use as somebody who's going to use to do apps? Not really, I don't particularly care about when I completed tasks, I just want to look at my current list of tasks that I have to do. Awesome, so can you go back and find your current list of tasks? So, I think Home, probably take me there. Yeah, so this is everything I needed to do today. This is kind of my primary mode of interaction with a to do list app, I think. Perfect. And if you wanted to check off a task, say you finished your meeting with Jacqueline, how would you go about doing that? Well, it looks like there's this big empty box, which I imagine is a check box. Okay. Yeah, and in the final app, when you click that, that would check off and something would happen there. What would you expect to happen when you hit that check box? I would imagine that it would just kind of like animate out of the list and other events would slide up and slide into place. Awesome, thank you. So you've given us great feedback. I appreciate your time. Absolutely, this was fun. Perfect, thank you Jeremy. So we just got some feedback from Jeremy about our app. One of the things I wanted you to note about this is that he didn't have trouble with some of the things that we had trouble with in the first iteration of user feedback. He had no trouble finding the check boxes. There wasn't any confusion around task versus event. And he seemed able to navigate around the app pretty well. However, there were a couple of things that we noticed were a little bit wrong with the app still. Jeremy wanted to actually input his data into the app. And Jeremy noticed there were a lot of extra things in the app, that maybe weren't tied to the core aspects that I was asking him about. These are things that we'll look into in the future and as we continue to iterate are things that you would solve. So at the last company I was working at, I was helping set up their user testing program. And one of the products that they were testing for was a desktop control software. So it helps you use your desktop. And we realized very early on, that obviously we're not going to be in the room when our user starts to use the software. We're not going to be able to give them instructions. We're not going to be able to tell them how to use it. So we also had to use some machine learning algorithms to help detect what the user intended to do and have the software respond appropriately. And we realized that the machine learning algorithms were very finely tuned at first to us. We would say, we would do a certain thing and it would get it every single time. And we would give it to somebody else and they would inevitably do something different and it wouldn't work at all. So, what we ended up doing is creating a tutorial video, and this was, our idea was that this is a prototype of the actual video that would ship with the product to explain to a customer or a user how to use it. And we ended up user testing those in parallel. So when you bring a user in our user testing lab, we would sit them down, say we were going to show them a video. We are going to then give you a set of tasks with a software and see how well you do. And then all the, we're not testing you, we're testing the software, all of that. And the we would sit them down and we would shut up. The tester would shut up, roll a video, and be very careful not to actually put their hands out or show them, how to use the software, and then we would test them. And so by optimizing those in parallel, we ended up getting much, much better performance, and a much better prediction of the eventual user's performance, than we would've if we had demonstrated how to do these. Because we know how to trigger the machine learning algorithms. Right, perfect. Thank you. Great job. Let's review what we've done in this lesson. First, we made an interactive prototype using InVision. Second, we changed it in reaction to our first round of feedback. Next, we shared it with subject matter experts and users. Finally, we got feedback using our interactive prototype. In the next lesson, we'll talk about how to bring your prototype to an engineer to think about getting it built. We'll also talk about how to continue to iterate your prototype through the rest of the process. Finally, we'll talk about using your app prototype to talk about your app with investors or other people interested. See you in Lesson Three.