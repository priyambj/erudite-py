The first app I ever made was for a bar crawl, for a birthday party with a friend. It was 2009, it was still just really cool to see your own name in a smart phone. So it had a little picker view inside it, when you shook the phone the picker view would cycle through everybody who was there and kind of randomly stop. And I put a little button int he corner, so that you could put your thumb over it and shake it, if you're holding it right then it will come up with the birthday boy. Whoever's name came up had to drink, so in the end we could set em up, it was good fun. The first app I ever built, well I actually started before there was an SDK, so in 2007 when the iPhone came out there was a pretty good jail break community, and we were sort of swizzling all the API's. And I had been an audio developer on OS10 for years, so I ported one of my commercial apps to iOS and it was just super exciting because this was basically a full desktop operating system on a mobile device. So the first app was called Idrum, and we actually did 23 of them with different music artists, and what not and it was really exciting. We had two of them available the day the app store opened, because we had a pretty good running start so. The first app that I built was called ATOM and it stood for the Alpha Tau Omega Mobile application I built for my fraternity in college, and as fraternity brothers we were looking for a way to communicate and broadcast messages privately in a way that was kind of like Twitter. So that's what we did instead of carrier pigeon, or email or anything like that. We used this atom map to communicate. Soon, very soon you're going to have a similar story that you can share with your friends and family. Hi, I'm Jessica Allman, and I'm going to be here to help you walk through the process of building an app from scratch. Now, this course is going to be a little bit different than what you've previously experienced in Udacity courses. For one, you've already got the technical traps to build this app, but you might need a little bit more help with maybe a processor or method for doing so. And, that's what I'm here for. So, to do so, we're going to be asking you a series of questions, to help you start kind of thinking like a developer and asking questions that they would be asking. And we hope that you really do think about and answer these questions, recording your answers either in a blog or on the forums. Or if you're a little shy and don't want to post it publicly, maybe in a handy notebook or on your own computer. Let's take a look at how we're going to build an app. We'll start things off here in lesson one where you'll brain storm ideas for your app, and you'll also build a skeleton UI, and kind of start looking at some APIs and libraries. Now, if you are in the iOS developer nano degree and you were following along with the intersperse lessons, you can skip this lesson and move on to lesson two. Because in lesson two, is where were going to start choosing an idea for our app, thinking through features, building through a paper prototype, and then actually building and testing our app. We'll do lots of user testing in this phase, to help us find bugs and also make sure that people want to actually use your app. Then, in lesson three, you'll reflect on the process. And you'll think about those things that maybe you'd do differently, or you could do better. Because as developers, if we're going to get better, we have to think about those things that we're kind of not so great at. Now, also this course is only going to teach you to build an app. We're not going to talk about monetizing it or building a business. If you're interested in that, Udasity has an entrepreneurship management nanodegree. Which is a great option, if you're a budding entrepreneur and you want to make a business out of an iPhone app. There's a link to it in the instructor notes, if you want to go check that out. Now as we continue, this is going to be a wonderfully messy and creative and awesome, but sometimes frustrating journey. And, it's often said that the journey of a hundred miles begins with a single step. So, let's take that step now. So, you're ready. You're eager to get started, and you can't wait, and you've got nothing. Nada. Zilch. Zippo. I mean, this is your first app. It has to be amazing. Right? I mean yes and no. I mean, your first app is going to be amazing, obviously because you're building it. But it doesn't have to change the world. It doesn't have to be some groundbreaking thing. Take that pressure off yourself and keep some of these key principals in mind when you're brainstorming? For one, what I just said. Your first app doesn't have to change the world. You don't have to think of some revolutionary amazing thing that's going to feed children and be awesome. Just don't worry about it. Two, find your motivation. Find something you're passionate about and you actually want to work on, because that's going to make the process much, much, much easier. Otherwise if you're working on something that you're not so into, you might just stop halfway through because why continue? Then, keep it simple stupid. The simple kiss method. Don't think about a ton of features and try to conclude everything, because your just going to probably end up with a clunky app that nobody's going to be using. Then don't worry if your idea already exists. That actually just means that there's a market for it and you know people want to use it. Most importantly, this is your first app, not your last. So, if it's not your crowning achievement, that's okay, because there are many iOS apps that you will build in the future. Now, you're going to move forward and start brainstorming some ideas for your app. Now I would recommend that you always keep a piece of paper, or your phone, or some note taking app handy, because you never know when inspiration might strike. Let's go think up some ideas. So personal motivation for an app has really kind of guided my learning, as far as iOS development goes. One of the first apps that I really wanted to build was an app for reading comics. When I started reading comics on my iPad, there weren't a ton of apps that were really good. So, I started looking into what the problem entailed and it included things like opening up zip files and reading byte data. And without that motivation for developing this tool for myself, even though it may not be useful for anybody else. I never would have gathered that knowledge and learned all the different things about the lower level development that I otherwise wouldn't have So, one way I get ideas is to check out the featured apps on the App Store. And I download almost all of them, because you just get great ideas. There's so much creativity in the community. So looking at other people's apps and other companies' apps, you'll just find things that you would have never thought of on your own, and things that sort of inspire you to take your own work to the next level. Now you might be going through these exercises, and they seem pretty logical to you but you're still staring at a barren desert of zero ideas. That's okay, seriously, it happens to the best of us. And when this happens to me, I actually go outside. I go for a walk or swim or I just sit in the park. And I find that just being outside really helps me get creative, but this might not work for you. You might want to browse Reddit and look at funny pictures or get inspiration from friends or family. If you don't have any ideas right now, the important thing is just do whatever works for you. Find some way to get into a creative mindset and really just start brainstorming. Don't worry if your ideas are stupid, don't worry if you don't think you can implement them. Write anything down because you'll never know what might come of it. So, when I need to get creative and I'm feeling like I'm out of ideas, a lot of times I'll look at other media, like video games, or movies, or television shows, or just go for a walk. Because a lot of times, staring at Xcode, and trying to get creative is the exact wrong approach. When I'm trying to get creative in building an app, I usually look to others instead of myself. So, I'll ask my twin brother or my friends or family and just figure out what problems they're going through and figure out if there's a cool, mobile way that we could solve them, and then start building an app from there. Having a problem to solve helps me get in a creative mindset. Because sort of defining the problem gives me sort of the space that I'm working within. Chances are I know how that problem has been solved previously and I'm unhappy with those results. So I have that, that gives me the components that I'm working with, the components that I want to change. All right, so by now you should have a fairly decent sized list of apps that you might be interested in pursuing. See if you can whittle that down to about three that you would be super excited to work on. And, once you've done that, it's time to get feedback on these ideas. One of the most important parts of iOS app development is to get feedback early and often. So lets do that. Go ahead and post your three app ideas to the forum along with descriptions on what you want them to do. While you're there, respond to two of your classmates posts and give them feedback. And then, while you're waiting for feedback, share your app ideas with your friends and family. What do they think? Now go forth. Give feedback. I mean it. Shoo. Get out of here. Get out of class. Go talk to people. See what they think. It'll really help you decide what you want to pursue in the end. Now that you feel you've gotten good feedback on your app ideas, you might find that one's emerging as a clear winner or you still might not be able to decide. Either way, it's a good idea to research and vet multiple app ideas before deciding on one. You never know when you might run into a dead end and not be able to continue. In the next few nodes, we're going to start thinking about UI elements and web APIs and libraries to use, for each of the three app ideas that you have. Thinking through this for each of them will help you have a better rounded picture and make a more informed decision when you're ready to start development. First, let's start thinking about UI. The following series of questions will help you start thinking about how users might interact with your apps. When you start working on your app, one of the worst things that you can do is re-invent the wheel. And by that I mean, by using code that's already been written by someone else. The beauty of the internet is that there's a plethora of information about there that you can take from. >From Apple libraries that let you use features on the device, to web APIs that allow you to access information on other sites. So it's going to be your job as a developer to really scrutinize any web API or library that you find to really make sure that it meets the requirements of your apps. Let's sync up again with some of our pros for some tips and tricks on how to choose the best API and library So when you're looking for a web API, it's a lot like looking for any other framework that you might bring into your code. You want to see if it's well supported, when was it last updated. If it's a GitHub project, you can see when the last commit was. If there's people that are making pull requests, if it's actively used by other developers, all these things would be great signs that this API outside of what it's functionally doing is a good call. And then you want to make sure of course that it can do what you need it to do. And testing around with it, playing with it, you could play with a couple different options and find one that works, and that's how I choose web APIs. That's the same way that I choose frameworks. So for finding and vetting libraries, I tend to first go to the Apple libraries. They tend to be much better documented and more highly optimized for the hardware that you're working on in iOS. One of the libraries that I first investigated for a video player app was the MPMoviePlayerController, which is a simple implementation of a view controller for playing a video. It's very quick and easy to get up and running, but it doesn't really provide anything else. I wanted more features that I could add. I wanted a new interface. I wanted to be able to play with the video even more. So I looked even further, and Apple provides the AVFoundation library, which allows audio, video, audio-synthesizing, video effects, all these different tools that MPMoviePlayerControllers don't provide. And they allow you to create a much more rich user experience for the people using your app. I used this on an app at a previous company, and it allowed us to create this user interface that was unique to our app, that you can't find anywhere else. Congratulations! You've made it to the end of lesson one. You may not have realized it before but being creative actually takes a lot of work. This may have been the most difficult point in the class. Now in the next lesson, you're going to choose an idea, and you're going to execute on it. Come check it out when you're ready. Welcome to lesson two. Now, at this point you should have a list of ideas and hopefully you have a preference for one that you might want to build. If you don't, that's all right. Keep thinking about it, because we're almost at the point the point where you've got to choose. In this lesson, you'll develop a feature list for each of your app ideas and then you'll finally choose one. Once you do, you'll build a paper prototype, you'll start developing it in Xcode, you'll find some bugs, you'll squash those bugs, then you'll probably find some more bugs, and then you'll fix those. But then that'll probably create some more bugs and then you'll probably just want to throw your computer out the window, because screw it. But we'll have some tips and tricks to help get you through that, when you get to that point. I'll also still be prompting you to reflect on your experience and I hope you keep doing so. Particularly in the forums, because both you and your fellow classmates will probably need a bit of encouragement in this development stage. Let's get started Before you can officially choose an idea for you app, you need to start thinking through the features you might want to include. But, how do you do that? Consider the following questions. Does your app have competitors? What features do they use? What about your users, who are they? Why don't you ask them what they want? And lastly, what are some features on unrelated apps that you really love? Do they have a place in your app? Compile a list of features to include. Don't worry about being selective at this point. Just jot down anything that you might want to add to the app. You'll refine it later, and then check this box when you're ready to continue. By now you've got a pretty good feature list for each of your app ideas. And you might be tempted to include all of the features in your app, don't. Seriously. It's much better to implement one or two ideas really well than to implement all of them poorly. To help whittle down your list of features you can use the following ranking system. Now, required features are those that have to be included. Your app would not function well without them. Reasonable features are those that you can implement, and you know that you want to. Ambitious features are then you're nice to haves. They would be cool to include in the app, but you're either not sure of your ability to implement them or you have absolutely no idea where to start. So now go ahead, go through each of your feature lists and mark each item as required, reasonable, or ambitious. If you'd like, share your list with your fellow classmates and see how they've ranked their features. Check this box when you're ready to continue. [SOUND] It's the moment of truth. It's time to decide. You vetted all of your ideas and hopefully a clear winner has emerged. If not, that's okay. Take your time, mull over your choices, decide which one you'd be most excited to pursue. And then come back to class when you're ready. Seriously, don't rush the decision. Really think about it. So, you've chosen an app idea, you know what features you're going to include, and you also know which APIs and libraries you're going to make use of. So, now it's time to make a paper prototype. I like to do this using actual paper, but you can also do it in Storyboard or using Photoshop, or any number of prototyping software suites. Link to some in the instructor notes below. The point of this exercise is to define how users will flow through your app. And if you're drawing them by hand, you don't need to be Michelangelo or Davinci. Just get your ideas down on paper. Will they start with a login in screen and then move to a custom set of user information? Or perhaps they'll start with a list of some kind and then they can log in later to save it. Now, you want to be as detailed as you can here. I mean, what happens when a button is pressed? And where are you going to be pulling information from? The more information that you can include here, in this paper prototype, will help you down the road later. As you may have noticed, user experience plays a huge role in this step. And if you'd like to think a little bit more deeply about it, Udasity has a great course on user experience design. It's called UX Design for Mobile Developers. Lessons one to three are what's most relevant to us in this course. So if you'd like a link to that class is included in the instructor notes below if you'd like to work through some of those exercises. Now that you've completed your paper prototype, it's time to, you guessed it, share it with your friends and family as well as with your fellow classmates on the forum. Now the important thing here is to put the paper prototype in front of people, and to not say anything. See if they can figure out how the app works without any guidance whatsoever from you. Make particular note of where the app might not feel intuitive, or where a user might get stuck. For example, what screen do I go to? What button do I press? If they're asking those kinds of questions, you definitely want to fix it before you go into final development. Jot down any notes that you might have in this box below, or, even better, make note of it on your blog. You've got your building blocks in place for your app, and you're almost ready to jump back into Xcode and start writing it. But, by now, you should be able to give an estimate of how long it's going to take you to complete it. Which is good for whatever career path you might decide to pursue, whether you're going to work for a company or you're going to be a freelancer. For companies, project managers, like myself, are very grateful for those that can accurately estimate how much time it will take them to complete something. And if you're a freelancer, you need to be able to accurately estimate how long its going to take you to do something or else you're going to get totally screwed and not get paid enough. Go through the list of features that you plan to use in your app. How long do you think it will take you to implement each one? Be generous with your estimates here, and make sure that you're including debugging time. It's actually where you'll probably spend the majority of your time. And here's a hint. It will take you about twice as long as you think it's going to. But, if you're not sure at all how long it's going to take you to complete this app, think back to the portfolio apps. How long did it take you to implement features for MemeMe, or OntheMap, or VirtualTourist? You're doing something very similar here. You, essentially, have a specification, you know what APIs you're implementing, you know what features you want to include, and you're going to build your app to that specification. So use past experience as a guide. Okay. So you've got a time-line in place. And, now it's time for you to follow it. And this might seem a little asinine, but trust me, it's a great learning experience. Even if your actual time to completion is way off from your estimate, you'll still have a better idea as a developer how long it takes you to do things. There are great time-tracking apps, like Toggl, for instance, that help you keep track of how long it takes you to complete a given task. There's a link to Toggl in the instructor notes, if you want to check it out. But maybe it's not your cup of tea, and you have some other methods for tracking your time. If you do, please share those thoughts on the forums, because both myself and your classmates would really like to hear about them. At this point in the process you might be thinking, all right I'm ready to go. Let's do this. But there might be a small voice in the back of your head or perhaps a very loud one that's saying, wait. I'm not a graphic designer. I'm not an artist. How am I going to make this app actually look good so people want to use it? To which I say, don't worry. There's a lot of great services out there that provide high quality images and graphics that you can use in your own app. First, you have your basic Google image search. Now anything that you search here will bring up a lot of results. So you'll need to be wary of any copyright restrictions. But, given the right search terms, you can find some real and free gems. iStock photo and 99 Designs are also great options if you're looking for more professional high quality graphics. However, these services do cost a bit of money, but they're usually pretty reasonable. Maybe there are other services out there that you've found that you are going to use in your app. If you find those, I encourage you to share them with your fellow classmates on the forum. I'll actually be interested to see them, too. And now we've reached it. It's the moment of truth. It's time to build your app. I don't really have much else I can say here, except go do it. But our pros have some tips to get started, so let's check back in with them. I start with a model, that I think it's good to figure out your persistence, figure out the objects that will be in the model, write it and test it. Once your model is in place, it's tested enough that you're confident in it, it's just much easier to proceed from there. So, once I have everything all ready to build a new project, my first step in Xcode is File new project. [LAUGH] So the way I started out, when I have an idea, is I want to sort of validate the core proposition and just verify that I can actually build it. So I just dig in as fast as I can, I don't worry a lot about code quality. I don't worry a lot about what the final app is going to look like. I just want to validate that usually its inspiration and that's what keeps me coming back to finish the app. So, when I'm starting to build the app I think the most important thing is to get from a to b as quick as you can. I've done a lot of different projects and where I usually get stuck or stalled is when I try to optimize for every little corner case that might happen, so taking what your idea is and trying to figure out how to get to stage one, version one of the app, just have something that you can use and that's usually what I try to build first. I take a lot of time to read the documentation and to make sure the tools that I'm going to be using to make the project are the right tools. Sometimes you find that the tools are no longer supported and you have to pivot and find something new. Sometimes you find something that just came out that's better and easier to implement. Sometimes you find the documentation is really hard to read, and you have to take more time to just decipher what it is. When I'm starting a new project from scratch, I think of, at first I try and make a minimum viable product. I think of the simplest version of the app that I can possibly think of, and then I build that. Now along the way, you're going to run into bugs. And these little critters are dead set on breaking your app. And much like cockroaches in Florida, there's just no avoiding them. There's going to be times in this development process where your code isn't going to work, and you're not going to have any idea why. And you're going to get incredibly frustrated, and you might even want to throw your computer out the window. Don't do that, seriously. One tiny bug is not worth thousands of dollars. When I'm in these situations, I find the best thing is to just walk away. I mean, not forever, just for like a few hours, or maybe even a day, but I go do something else. I watch TV, or I grab a drink with a friend, or go for a run, or something to clear my mind and take a mental break. And I find that when I come back, it's a lot easier to both find and solve the problem that I was having before. Now, that's not the only way to deal with these types of situations. Let's go check back in with our pros and see their advice for dealing with bugs and other issues in code. Right, I am a little bit stuck right now. So what I do when I have a bug, and I can't quite pin down what's causing it, I make the feature that's broken, simpler. So I take out, take components out until I have a working feature again and then I gradually add them back in. And then each one that I add back in, I'm tweaking to fix it. Gosh, there's a lot of different ways to be stuck. But if I'm writing something that has a lot of calculation and somehow it's not coming through the way I expected, sometimes it's best just to start over. There can be something powerful about starting again with a blank slate, and rewriting something. Sometimes when I get stuck in the developing process because I'm frustrated or I just don't really, I can't see how to get from where I am to where I want to go. I find the smallest possible thing that I know I can get done, and I just go after that. And a lot of times just closing that tiny little gap, that easy chore that had to be done, is enough to just sort of get you going again. So when I get stuck, it kind of depends on the mood or the reason. A lot of times I get stuck because I'm just using poor debugging practices, and being lazy, instead of actually digging through the debugger and finding out what's wrong. Other times, if its more of an inspiration thing, I'll just go for a walk, get outside, get away from the computer for a while and then come back to the project. So when I get stuck, my first instinct is to go to the team that I'm working with. I find that everybody has different skills and different expertise, and leveraging that is to your benefit. So a quick hey, have you seen this before? Do you have a fix for it, is always worth a try. Barring that, I go to Google, and normally it spits out something like StackOverflow.com. But sometimes it also goes to the Apple documentation, and just carefully reading the methods that are provided to you, the properties that are provided to you, and trying to find a way around the problem instead of through the problem can often help fix your bug. Once you've got all of your features implemented, you'll have a working prototype for your app. There might still be one or two bugs that you need to work out, but it's a really great time to start getting feedback from other students and family and friends. So go ahead, take a minute and share your app to the forums. You can just export a zip file and share that, or even better, you can share a link to your GitHub repo. The goal here is to get user feedback on the look and the feel and the functionality of the app. It's a lot easier to implement changes now than it will be further on in the development cycle. Also make sure that you let users know of any known bugs so that you're not getting duplicate reports of things that you already know are wrong. Then, take the time to review two of your classmates' apps. You never know. You might learn something. Check this box when you're done. So you've got a working prototype, and you've gotten some feedback from others. Now all you have to do is just keep plugging away at it until all of the bugs are squashed and your app doesn't crash at any point. You might even think at this point you're ready to submit to the app store. Sorry Charlies, it's actually time for you to do more user testing. See, at this point, you're just too close to your app. I mean, you know exactly how it's supposed to work. And you also know how to avoid any sticky situations, however subconsciously you might be doing it. I mean, simply put, you just can't be trusted to reliably test your app anymore. And now it's time for, you guessed it, more user testing! In addition to your classmates, it's also a good idea to distribute your app to your family and friends, or even better, a neutral third party who won't be afraid to give you critical feedback. But, how do you get these apps to users? Let's take a look. The goal of testing at this stage is to get users to actually use your app. And if you can, sit near them as you do it so you can watch for any opportunities where they might not know where to go next, or if they get lost, or, most importantly, if the app crashes. Because if the app does crash, you'll want the user to walk through exactly what they did so that you can fix it later. If your testers are iOS developers, you can just zip up your Xcode project and share it with them for testing. If they're not, your best option is actually probably for them to interact with your app using the simulator, so that you can sit and look over their shoulder. However, you also have the option, if you have an Apple Developer account, to share the app with someone's iOS device, an iPhone or an iPad. Instructions for doing so are included in the downloadable section below. So now, you're ready. Go forth. Share your app with at least three people, one of them being with your classmates on the forum. Now that you've conducted some user testing, you probably have a nice list of bugs that you need to fix. So go ahead and squash them. Then once you've squashed all those bugs it's a good idea to do another round of user testing, and then you might find some more bugs and then you'll squash those, and maybe you'll have some more users test and the cycle will repeat until your app isn't crashing and you're ready to either submit it to the App Store, or, if you're a nano degree student, to submit it for grading. So if you'd like to submit to the App Store, we have instructions for what you need to know, what you need to prepare, and what you can expect in the next few reading notes. Congratulations! You did it. You made an app completely from scratch and it was a little frustrating and you wanted to give up at times, but I'm sure you're really proud of what you did, right? And you should be, because it's awesome. So go, show your app to the world, let your brilliance shine and when you're ready come back we'll reflect on what you just did. [NOISE] It doesn't make a noise, but we're still really excited for you! How did this project go? I mean, you did something awesome. You built an app from scratch and it was probably frustrating. And at times you might have wanted to quit, but you did it, and you have something awesome to show for it. And in this lesson, you'll become a better developer by reflecting on what happened. And we'll pose a series of questions that you can answer and just see what you might have done differently or what you did really well. Log these experiences on your blog, if you've been keeping it. Or if you'd like to keep it more private, we have a little text box for you to give your response. So those time estimates you did earlier, how do you stack up? Chances are you went a little bit over, or okay, maybe a lot a bit over what you estimated and that's totally okay. Again, the goal was for you to get a better idea of what you're capable of as a developer and how long it takes you to complete certain tasks. So, log your thoughts, what maybe took you longer than you expected? Maybe you completed some things a little bit shorter than you thought. Log your experiences in your blog or in the box below. So, they say hindsight and it's 20/20. So if you had a TARDIS or you met up with Doc Brown and his DeLorean and you could go back in time what would you do differently? I mean maybe you wouldn't have tried to implement ten features at once, or maybe you would have used a different API. Whatever those things might have been, take a minute, log them either in your blog or using the box blog. What was the biggest challenge you had to overcome in building this app? Maybe it was just thinking of an idea. Maybe it was thinking of some features. But what was the thing you weren't expecting to be really hard that was? Log your thoughts, again, in the box below or using your blog. We've talked a bit about those things that didn't go so well. The things that you struggled with and that didn't go exactly to plan. But what about those things that you're really proud of? I mean what went well that either you didn't expect to or that you really want to highlight? Jot your thoughts down in the box below or on your blog. So what now? Well, if you're an IOS Developer Nanodegree student, hopefully you've submitted your app for grading. And maybe you got feedback, or maybe you're still waiting. Either way, you've almost graduated and that's really exciting so congratulations. There's just a couple more things that you need to do before doing so. If you've developed an app that you'd like to make a business out of I will bring your attention again to the Udacity Entrepreneurship Management Nanodegree. Which will take you through the process of making your app profitable. There's a link to it in the instructor notes below. If you've posted your app to the app store and you're just interested in monitoring feedback and making it better there's some instructions for doing so in the reading notes that follow. Whatever your path, this is where I leave you. And I hope that you have had as much fun taking this class as I had making it. And I seriously cannot wait to see what you guys build. So, until next time.