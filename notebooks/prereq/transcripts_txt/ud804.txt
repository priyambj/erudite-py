Hi. I'm Cameron Pittman. And I'm James Williams. We're here to help you get started with JavaScript, the defacto programming language of the Web. Now, you won't be a JavaScript ninja when all is said and done. But you will have enough knowledge to start writing your own scripts and resources, to figure out what you don't know. Making a great first impression is important in life, especially when you're trying to show you are the perfect candidate for the job. Yeah, it really is. Is, is that why we're in this resume. Exactly. In this course, you will take your first steps to becoming a JavaScript ninja, by creating this beautiful interactive resume, and sharing it with the world. And along the way, you'll be using JavaScript to put it together piece by piece. Are you ready to get started? We'll be using GitHub to download the files we need for our resume and once we're finished to host it. If you don't already have a GitHub account, you can find the link in the instructor's notes to get one. You'll see a few options, but don't worry, you don't need anything fancier than a free account for this class. This is where we can find all the files that we'll need for this project. Let's go ahead and take a look at them. Hey, James. What text editor do you like using? Emax. But to keep it simple, let's say, Sublime Text. Okay, cool. In this course, we'll be using Sublime Text but feel free to use whatever text editor you'd like. Lets start with index.html. Don't worry HTML is pretty simple. It describes the content and lay out of elements on a web page. We'll be comparing what we see here to the website. In this top section, we see the page's head tag defined. We'll often find CSS in JavaScript links, like these here. Inside the body of the text, we can see that we've got content that says, Hello world. And when we flip over to Chrome, there it is. If you want to learn more about HTML, check out the link in the instructor's notes. Looking through the HTML for our resume, there are a few elements worth noting. Like this one, div id equals main. I can see that it says, Hello world here, but showed up on the website. Div represents different elements on the page, you can think of them as starting like empty all purpose boxes. In this case, we've given this div a unique id of main, which our JavaScript will be referencing later. Do you see anything else, James? It doesn't look like a resume at all right now, but I do see some structure for one. It looks like there are sections for education, work and projects. What do you think about filling these in with our resume data? Yeah. You know, web developers have options for building great web pages. And I think there are two obvious strategies. They can either hard code the information by writing HTML that explicitly defines the content users should see. Or they can use an HTML template and fill it in with data programmatically when a user requests a page. In this case, we can see the two work experience sections. In the hard coded version, we can see all of Phillip J. Fry's data listed here. While on the template side, we see the work experience section. But right now, it's empty. The hard coded route is good to start, but it isn't a solution for the long term. Anytime we want to make a change to the page, we have to open up the HTML, make the changes by hand, which can be a big pain. For the resume project, we'll be using the template strategy. What do you think? Yeah, that works for me. besides, if we weren't then this class would be about HTML. Which it isn't. Yeah, there are other great introductions to HTML online. See the instructor's notes for a few links. At the top of the HTML, there's a link to jQuery.js, the jQuery library. There's also helper.js, which contains some simple helper JavaScript we've prepared for your project. We'll be coming back to it in a few minutes. We've got two more script tags at the bottom of the HTML. This tag for resumeBuilder.js, tells the browser to download and execute some JavaScript. We'll be using this script to add HTML content to the main section of the HTML. The browser will render this page just saying, Hello world. To give you a better overview of what's going on here, we've zoomed out the page so you can see everything all at once. We have Hello world here, some empty resume sections and then some JavaScript. And over on this side, we can see a general representation of how it would look in a browser. We're printing the Hello world and then after the Hello world, we have all of the resume sections. And when we hit the JavaScript section that includes resume builder down here, the browser will run the script. Which will change the HTML in these experience sections and the page will now show our resume. But wait. You may ask yourself, what about all of these experience sections. It looks like they're in the resume, but they aren't showing up on the page right now. That's because of these scripts at the bottom of our resume. Using JavaScript, we're checking to see if any of these sections contain any content. And if not, we hide them. We'll get a chance to break down these JavaScript sections later CSS in this style.CSS file. You wont be learning CSS in this class, but if you want to learn more, check out the link in the instructors notes. CSS is pretty simple. As we can see over here, it simply defining the styles of the page. So what about this .jQuery file that you wanted to tell them about? Yeah. jQuery. It's a powerful and popular JavaScript library that we'll be using in this class. At a very high level, it lets us inspect and manipulate the elements in a page. You won't be learning the ins and outs of jQuery in this class. But, you'll get an idea of what you can do with some very basic jQuery functions. For more information about JQuery, check out the link in the instructor's notes. The things we're doing with JQuery are fairly simple and can be done Vanilla JavaScript as well, just like we're doing in the script tag at the bottom of the HTML page. But we wanted you to gain experience with using third-party libraries. When appropriate, we will also list the Vanilla JavaScript ways to do things in the instructor's notes. So what else do we to tell the students, James? Just how we'll be working in this course. We'll be using two main tools, a text editor to code and a browser to inspect our work. All modern browsers include a powerful set of tools. Commonly referred to as Developer Tools. Which lets Developers inspect the way a website loads and runs. Dev Tools also includes a console that allows you to issue JavaScript commands against your website. Let's give it a try. Cool. What do you have in mind? Let's open up developer tools right now and run a command. Let's say console.log();. All right. This sounds like a good time for a quiz. Let's find out what console.log(); does. I want you to pull up the console and type console.log("Hello world!");. What happened when you ran the command? Type it in here. And when we hit Enter, we see, hello, world, and undefined below it. Console.log is the basic print command for JavaScript. Much like Python's print command, it's useful for debugging Don't forget the semicolon. JavaScript uses semicolons to signal the end of statements. Try console.log without the semicolon at the end and you'll see, that it still works. Most JavaScript interpreters are smart enough to guess when you need a semicolon. But they aren't perfect, so you shouldn't leave things to chance. Yeah, that's good to know. You know, in Python you don't have to use semicolons at all. When I was learning JavaScript, I had to keep reminding myself to include one. Yeah, that's pretty common. What about this undefined line here? It simply means that the console.log command returns undefined. Telling us that console.log doesn't create any new data we could save. This makes sense, because we only want to use console.log to print debugging information. For example, if I had a property like document.URL, every turn to string as the page's URL. Yeah, we can see it in closed in quotes telling us that we've got a string. Hey James, you know what I love doing? Talking about baseball? Okay. Yeah, besides that. I love using the console to play with websites. That is fun. Okay. You know, what? Actually, the sounds like a good idea. In the instructor notes, you'll find a line of code I want you to copy. Open up another tab and go to Udacity.com. Open up the Console, paste in that line of code and press Enter. What do you see? Starting with this weird selector, right here, with dollar sign open parenthesis, quotes, quotes, close parenthesis. This is an indication that you're using jQuery. The dollar sign parenthesis quotes syntax is only used for jQuery, and it grabs an element on the page, which in this case, is the class identified by this .super-header-wrapper. We run the .html method on it, which in this case is going to replace the HTML of everything of the class super-header-wrapper with the HTML we see right here. In this case, this HTML is going to embed a picture. So, when I press Enter, we can see that we've now changed the Udacity homepage to this awesome picture of the Android teaching on the Udacity platform. That is an awesome picture and just to be clear, you only made the change for this local copy of the page, not the actual website. So if you refresh the page, you'll see that it goes back to normal It's cool that we learned how to use the console to manipulate other web pages, but, of course, we need to start making our own. It's easy to open up the page. I'm going to get rid of this Hello World here. And all you have to do is open index.html in the browser of your choice, like we have here. And refresh the page. And you'll see a very exciting blank page. Let's talk about how we're going to write something here on this page. It's not too hard. We can use jQuery's .append function to add HTML to an element on the page. And if the element already has some HTML content, a pen will add the new HTML to the end of the old content. Yeah. I have got ResumeBuilder.js open here. For our website, we wanted to append HTML to the page's Header. We will start with this jQuery selector for Header. The pound sign tells us that we're looking for an element with the id of header. So in our HTML, we see this div with id equals header. This selector grabs this tag. Let's give our students a chance to try it out. Try adding this code here to your resumeBuilder.js file. Make sure to replace this with your actual name and reload the index.html file. What did you see on the page? Type your answer here. If all went well, you should see your name appear on the screen. My name is James, so that, that's what I put in the box here. What did you see? And here's how the code should look. That's it for your introduction to the tools we'll be using for this course. >From now on, you'll be switching between your text editor and your browser. You know, let's stop for a second. And think about what we've done so far and what we're going to be doing in this course. What technologies and techniques will you be using to build your online resume in this class? Think back to what you've done so far and type your answer in here. James, you know, I really like how we're getting immediate visual results from our code. JavaScript's fun like that. It runs natively in the browser. And it allows us to run an inspector code very easily. That's something you should be doing when you're starting out as a developer. Yeah, it really is. By the way, why are we in your GitHub again? Because this is where I store my code and I wanted to get the students thinking about what it means to save their data. Like other programming languages, JavaScript gives us a way of saving data in the form of variables. The syntax looks like this. Var, variable name equals some valuable. To declare a new variable you begin with the keyword var, regardless of the data type your saving. In the example here, we're creating a variable called firstName in assigning it the string james. The string comes in closing quotes. Notice that saving variables is slightly different than Python, which doesn't require a key word like var. But otherwise, works the same. Good point. But otherwise, saving variables in Python and JavaScript are pretty similar. Numbers in JavaScript don't need quotes and there's no need to worry about any of the nuances between floating point numbers and integers, because all numbers are saved 64 bit floating point. Later on we'll see that arrays, functions and even objects use the same var syntax. Let us see if our variables were actually saved. I'm going to add console.log(firstName). Save this file and reload the website. Opening up the console to see if it shows up. And there it is. I like that strategy. The browser opens up a script with console.log in it. It'll print whatever information it receives to the browser console. Yep. It's a useful trick for debugging code. For this quiz, we want you to save a variable called awesome Thoughts and set it equal to the string literal, I am, your name here, and I am Awesome. Then, console.log it. Check off the box below after you've opened up your site and seen your message show up Okay, I've entered my string, I am James and I am AWESOME! And I put a command to print it out to the console. Let's switch over to the browser and reload. And here it is, I am James and I am AWESOME! Awesome! As we said before, we'll be using template HTML to build our awesome resumes. To do so, we'll be using the string.replace method to find a pattern in a string and replace all or some matches of it. We'll be using the most simple version to find the first instance of a pattern, but you can do much more. Check the instructor's notes for more details. Let's take my email address as an example. If I wanted to change out my Udacity email address for a Gmail email address, I could use a replace function. In this case, I've got var newEmail. It goes email, the string with my Udacity email address and I'm replacing Udacity with Gmail. And don't forget to check to see if that worked. Right. Let me add console.log email to see my old email address and console.log(newEmail) to see my new email address. Okay, we're going to refresh our page, open up the console and there we go. We can see my old udacity email address showing up on the console as well as my new Gmail address on the console as well. Let's have the students try it but this time, let's append the new message to the page. I want you to create a new called funThoughts where you take everything that was in awesomeThoughts, but replace the word awesome with fun. Use .append(funThoughts) and put it on the page. Check this box when you see your message show up on the page. So I've got my string awesomeThoughts and it's saved as My name is Cameron and I am AWESOME! I'm going to create a new variable called funThoughs and I'm going to use the replace method to replace the word AWESOME from awesomeThoughts, with FUN. Once I've done that, I'm going to use the jQuery selector here for the main id and I'll append our new funThoughts variable. Save that, come over to the browser and hit Refresh, and we see that my name is Cameron and I am FUN As we know, HTML defines the content of a page. Now that we know how to replace text, we can replace placeholders in HTML with real data. After that, we just need to append HTML strings to start building our resume. Let's look inside helper.js, which through the magic of computers we have over here on this side of the screen. It contains some helper data that your project will take advantage of. Because helper.js shows up before resumebuilder.js, which you can't see, but it's way down here at the bottom of the screen. It will load first, and we'll have access to all the data from helper.js, when we start writing resumebuilder.js. We can see a few string variables here, Ike HTML mobile, HTML email and HTML twitter. Each of them has a percent, data percent place holder. Here and here. And each of those will be replacing %data% with our actual data. So how are they going to replace %data%? The same way we replaced awesome with fun, using the replace method. Let's see it. Let's say I wanted my properly formatted name to appear on the page. In that case, I first need to create a new variable that stores HTML with my data. I'll save a variable called formattedName and set it equal to HTMLheaderName.replace, %data%, and pass in a variable storing my name. Then I will pin the formattedName to the header. Voila. There's my formatted name. Very cool. For this quiz, you're going to be putting your name and your role to the top of your resume using the same technique James just used. You'll start by replacing %data% and HTML header name and HTML header role with your name and your role. In this case, the role is the type of job your looking for. So for me, I would have Web Developer. You can find the strings HTMLheaderName and HTMLheaderRole within helper JS. Once you're done, you will either append or prepend the formatted name and formatted role to the page header. Now, append adds something to the end of HTML. While prepend adds something to the beginning of HTML. For this quiz, you might need to experiment with append and prepend to get a feel for both of them. Once you see your name in roll appear on the page correctly, check this box. And when you do it right, your resume should look something like this. And here's the code that we use to do that. Now, you might remember form edit name from before. And we added form edit role. Now, to create our form edit role, we took html header role.replace, and we replaced the data placeholder with the role that we created up here. So, this next bit of code is a little bit tricky. So, over here we have our header div. We can see that header already has an unorder list inside of it. So, if we pin the data, it would actually put the data right here. We want it to show at the beginning of our header tag, right here. In order to add elements to the beginning, we actually need to use prepend instead of append. So, we want our name to appear first and our role to appear second. So running through this code, when we append our form edit role, it'll show up at the top here. And then when we prepend our name, instead of showing it at the end as append would, it will insert it in the beginning. So Cameron, why are we here? I'm just checking out this soccer, I mean football scores. And how does that relate to JavaScript? You'll see. Okay. So if I ask you whether or not the US won any of these games, how you would respond? Let's start with this first one against Ghana. Did we win? True. Correct. Okay. What about this one, against Belgium? Hm. False. Also correct. All right. One last one. What about that one, against Argentina? Hm. We didn't even play them. correct. And JavaScript gives us a way of expressing this, as Undefined. Okay. I see what you're getting at. True and False isn't as cut and dry as our football chart. JavaScript has a set of values that can evaluate to true or false, but many not equal true or false. Because of this, we call these values truthy and falsy. Under truthy, we've got true, non-zero numbers, strings with a length of at least one, objects, arrays, and functions. And under falsy, we've got false, zero, empty strings, undefined, null and Not a Number. Undefined means that the variable doesn't exist and the interpreter doesn't know what you're referring to. Null means that the variable exist, but has well no value. It's usually used as a placeholder. And Not a Number is not a number or a result that isn't a number. There's a link in the instructor's notes comparing Truthy and Falsy values in Python and JavaScript. Let's take a quiz to make sure you got them all. Classify these values as either truthy or falsy. Truthy means it would evaluate to true, and falsy means it would evaluate to false. Starting with 1, 1 isn't zero, so that's going to be truthy. Awesome is a string of more than zero characters, so that's going to also be truthy. Undefined is simply falsy. -42 isn't zero. This one's kind of tricky, but it's also truthy. Then we come up to this object. And despite the fact that its one property has a value of false, it's an object, which means that it is truthy. Lastly, we've got this array with a single value of false. Because it's an array, it going to be truthy So, where are we now? We're in a sauna, and this list over here is everything that I wanted to cover in this course. Okay. Yeah, okay, so arrays in JavaScript are just like lists. In this case, the zero item is Intro, after that, we have GitHub and so on. I'm really glad you said zeroing because JavaScript arrays are zero index. Yeah, they sure are. Let's take a look. Arrays are just lists of values and they behave the same as lists in Python. We start lists with the same syntax as before, with var and then the name of the array, followed by an equals sign. The array will be defined by these square brackets with items inside, separated by commas. Let's make an array of skills, this could be really useful on our resumes later. So I'll go ahead and start with var skills and then I'll start with awesomeness. That's not a skill, dude. It actually is if you check my LinkedIn profile. Then I've got programming, teaching and JavaScript, all separated by commas. I'll go ahead and append the skills to the page, save it, come over here, hit Refresh and we can see it on the page. It's not separated by any commas or spaces here, because we didn't have any commas or spaces within the strings, in our skills array. And we can see that we have now, just awesomeness added to the end, of our array. Let's say I just wanted to append the first item, awesomeness, to the page instead. I'll start by commenting out this line, and then using bracket notation I'll append the zeroth item of the skills array to the main div on the page. I'll go ahead and save this, come over to the browser and hit Refresh, and we can see that we just have awesomeness on the page now because we used bracket notation. Nice, one cool thing is that JavaScript gives us a way of accessing properties about the array. In fact, you should give it a try, let's take a quiz. We're just learing about truthy and falsey values. Let's apply that to what we know about arrays. Is the length of an array equal to the last index? Mark yes or no here. And, to find the length of an array, simply add .length to the end of the array name To find this out, we'll take a look at a appending skills.length to the main div on the page. Looking at the array, we have index zero, index one, index two, and index three. So, let's go ahead and save this. Come over to the browser and hit refresh. And we can see that the skills length is four, despite the fact that the last item in the array has an index of three. So, looking at the question, is the length of an array equal to the last index? The correct answer is no. Why can we access array properties? What's so special about arrays? Arrays are actually special kinds of objects in JavaScript. In fact, this is a nice transition. Let's get into objects. Dude, dude, oh, dude. My hands are like handy. Yes they are. And while you're staring at your hands, I'm going to be a professional. Okay. What I mean is hands are like objects because, they can hold information and do things. True. That is an analogy. Objects in JavaScript can be declared and defined in a few different ways. And all of them are different than the way Python defines classes and objects, because there are no classes in JavaScript. Let's repeat that. JavaScript doesn't include classes, just objects. There are ways to mimic classes in some respects, but they're still just objects. Right. And this has some pretty interesting implications. Check out the instructor notes for more information. Let's start defining objects with object literal notation. In object literal notation, we'll use the same var syntax as we had before. Then we'll give the object a name, then an equal sign. And then the object is going to be defined within these curly braces. These curly braces indicate that you're using object literal notation. Let's define an object for my biography. Then inside the curly braces, we can define the object's properties using key value pairs. I'll create a property called name and save my name as the value. I'll do the same for age, this time using the number 32, my age. Notice that we surrounded the properties with quotation marks, because they're strings and there's a comma between the two key value pairs. thanks. But we can say whatever we want here. We could even save an array in our object. For instance, I want to add skills to my biography. So let's take Cameron's skills from up here and add it to my biography down here. Is that because you're jealous? Eh, maybe. This is pretty straightforward. To access these properties later, just as we did with the array length, we simply add .property after the object name. So if I wanted to appended James' name to the page, all I'd need to do is access the bio.name property to pull James' name out of his bio object. Then, I'll go ahead and append it to the page, come over here, hit refresh. We can see that we've got James on our page now. Nice. Let's give our students a shot. Create a new object called bio using object literal notation. Inside your bio object, save your name, role, contact information, picture URL, welcome message, and skills. Format and append or prepend your bio to the page. Click here when you're done. Okay. Here's the object I came up with. We can see that restoring name, role and contacts, as well as, welcome message and skills as the keys in this object. John Doe is the value for name, web developer is the value for role. Notice how there are commas after every value. Inside context, we're storing an object. We know it's an object because we see the curly braces here and here. Inside this object, we have a few more keys and a few more values for contact information. After the object, we have a comma then we have our welcome message. And then array for our skills. Inside the array, noted by these square brackets, we see four skills. Then we finish up with bioPic, which is a link to a URL with our image. Notice that after this last value, we don't have a coma, and then we finish up the object with another curly brace. Next up, we've got dot notation for objects, which we just used to access bio.name. Dot notation allows us to declare an object, and then define its properties outside the curly braces. The syntax looks like so, we'll have object.someproperty=somevalue. For instance, bio.email equals my email address. Hey, I see we didn't use var. Nope, with dot notation, there's no need to use var. We're adding properties to an object, not creating new variables. Right, and then we'll access them the same way we did before. Yep, we can use dot notation to access properties and append them to the page. There's at least one more syntax pattern to define the properties of an object right? Yeah, bracket notation. There's actually one more, but to learn more about that one, you can check out the instructor's notes. Bracket notation is similar to dot notation in that we can declare an object ,and then later in the code define its properties. This time, rather than dots, we'll use brackets. So, we have bio with the string, city, in brackets equals Mountain View, and bio, with the string email in brackets equals my email address. Right, so the syntax looks like object, then a string of the property name inside these square brackets equals some value. Yeah. So, if we wanted to append our city to the page, we just write this code right here. And when we refresh our page, we see that it still says mountain view Now that you've seen the two other ways of declaring and defining objects, let's give them a try by creating two objects, one using dot notation and the other using bracket notation. Using dot notation, create an object that contains some of your work information, including your position, employer, the years worked and the city of the business. Then, using bracket notation, create an education object that includes the school you attended, the years you attended, and the school's city. And how will students know they've done it right? Underneath your objects, append() work ["position"] and education.name to the resume. If you did it right, they should show up. So, as you can see here, I've added my work information using dot notation, and my education information using bracket notation. When we go over and refresh the page, we can see that information displayed. Awesome. Notice how, even though James used dot notation to define his work object, he could still access its properties using bracket notation. And, even though James used bracket notation to define his education object, you could access its properties using dot notation. Okay. So how do you want to cover nested information? I mean, it's not too tricky. You know what? Let's use object literal notation here. You could accomplish the same thing using dot or bracket notation. But, I want to show the students a really useful tool for making sure your data are formatted properly which relies on object literal notation. So you mean JSON? Yep. JavaScript Object Notation. Hey James? You had two majors, right? Let's make it a JSON object that shows nested data. Okay. So, I'm seeing one big object with one property called schools. In schools is a list of two objects, we know it's a list because we have these square brackets here, indicating it's an array. The first object has the name Eckerd College, City of St. Pete and so on. The second object has a name of Nova Southeastern. In the city of Fort Lauderdale. This looks like a good JSON to me. Mind if we check it? Not at all. So, I've opened up jsonlint.com which will tell us whether or not this JSON is in the right format. Go ahead and copy this object in just using the curly braces. I don't need to copy var education. Paste it in and click Validate. And scrolling down we can see that this is, in face, a valid JSON. What if there were errors? Like what if we erase this comma, right here? Well, JSONLint would tell us where the error is, which is a big help. Let's see, I'll come over here, I'll delete this comma, and click Validate. And we can see that there's an error on Line 11 because we forgot the comma that comes before it. The good news is that text editors like Sublime Text also highlight errors and help us figure out where our syntax went wrong. Create a new object called education using object literal notation. Inside your education object, save your schools, your schools cities, any majors, minors, graduation years, and online courses, like this one. Validate your JSON with jsonlink.com. There will be a link in instructors notes, and click here when you're done I've gone ahead and diagrammed what we're seeing in the JSon over here. We have an education object, which we see right here. And then inside of it, we have a schools array, which we can see right here. Key schools, and then we know it's value is an array because of these square brackets. Inside the schools array, we have two school objects. And each one of which has a majors array, which we can see right here, and well, as a few other key values. After our schools, we have our online courses. Online courses is an array of objects. Here we have one online course, which is, well, the one you're taking right now, JavaScript syntax. So James, do you think we should go over the differences between bracket notation, dot notation and object literal notation? Not really. I think that conversation would make this class a lot longer. Let's put a link in the instructor's notes to give students more information. Good news is, they're pretty similar. Yeah. That's fair. Okay. So we're about to get into control flow in JavaScript. But, before we do, let's go ahead and finish all of our objects. The work object and projects objects needed to be created. And let's go ahead and finish up the biography and education objects. While we're at it, let's go ahead and clean out resumeBuilder.js too, so that way, it only contains the four objects. You might have some code in resumeBuilder.js from previous quizzes. If you want to keep it, that's totally cool. But you should comment it out with two slashes. These two slashes at the beginning of any line will comment out the rest of the line. Or, if you don't want to comment out your code, you can just simply cut and paste all of it into a different file. That's a good idea. Let's start the next lesson with a clean file, with just our biographical objects. Click this box once you've created your bio, work, projects and education objects, and either have cleared out or commented out, all of your previous code. So here are all of our sample objects, our bio-education, work, and projects, and there's nothing else in the file. We have a clean slate to start with. Like most other programming languages, JavaScript gives us evaluators to compare expressions. We can see if data are less than, greater than, equal to, or some combination of those three. For this lesson we'll be sticking with equality. And equal to uses three equal signs, not two. Sort of, it can use either three equal signs or two. But the three equal sign version is slightly safer. There's a link in the instructors notes explaining the difference. To check out the syntax and give evaluation a try. Like, if some condition is true, then do something. There's an if statement within the parentheses and then, if it evaluates to true, we perform whatever action comes between the curly braces. If the condition isn't equal to true, we can use an else statement to do something else. In that case we simply use the key word else, add another curly brace and then an alternate set of commands that performs if this original condition is not true. This syntax for if statements follows the same patterns as if statements in Python. But notice that we have to include our conditions in parentheses here. And that the statements that perform if this condition is true come between curly braces. Also note, there's no colon after the condition in JavaScript. Here's an example. If ( tired === true) { drinkCoffee(); }else{ drinkWater(); }. If I'm tired I'll go drink some coffee. Otherwise I'll drink water. So how do you think we'll use if statements to build the resume? Looking at our header, we've got these skills, which we may or may not want to include. If we do decide to include this list, we'll first need to create it, and we'll need to create this skills at a glance heading. So, how can we see if we need to create the list? I think we should use an if statement. You know what? This is going to make a good quiz. Yeah, I think so too. Write an if statement that checks whether there are any skills in the bio object. If there are skills, the if statement should evaluate to true and then .append()HTMLskillsStart to the div with the id=header. Once that's done, .append() each skill to the element id=skills by formatting them with HTMLskills. You could find HTML skills in helper.js if you're interesting in what it looks like. When you've finished up, and you can see the skills on the page, check this box. So first, we check to see if our list of skills has a length that's greater than 0. If it does, we start by appending our HTMLskillsStart. We can see here that we have a formatted skill, which is created by taking HTMLskills and calling the .replace method, and replacing the data place holder with the first in the list of skills. Lastly, we append that skill to the page. And for the remaining three items, we repeat that same code, only changing the index. Hey James, wasn't it kind of annoying that you had to type out the same if statement twice? Yeah. I think I broke one of the cardinal rules of programming: don't repeat yourself. Mm-hm. Yeah. And with that in mind, I think it's probably time that we should talk about loops. So is that why we're looking at an animated GIF? Okay. That's one reason. The second is because that is an awesome GIF. But really, I think the important part here is that a GIF repeats itself automatically. We don't have to tell a GIF to play itself again, it just does it. And in fact, JavaScript gives us a few tools to do this as well. And we're going to go ahead and start with a while loop. A while loop lets us repeat a piece of code so long as some condition evaluates to true. Once it doesn't evaluate to true, we exit the while loop. The syntax is while condition. And then in curly braces, some sort of code here. So for this one we have doSomething();. Hey let's let's show an example. Okay. While(cameron.job ==="course dev") should make courses. I like that example. Notice how this is similar to python, but it includes conditions in parentheses, and actions and curly braces, just like with if statements. Remember, if the condition evaluates to true, we'll do the action, then ask ourselves again, is the condition true? We'll continue following this loop. Until the condition is no longer true, at which point will exit the loop. Over here, so long as my job is course developer, I'll keep making courses. The while loop will ask itself again, is Cameron still a course developer? If so, make courses. Until at some point, when my job is no longer course developer, at which point will exit the loop. How might that happen? Hm. Perhaps there's a limit on how many courses I can make. 10 courses maximum. You know what? Let's see what this looks like in code. Outside of the loop, I'll create an iterator called courses, which is going to start at 0. This is going to keep track of how many courses I've made. After making a course, I'm going to add 1 to the number of courses that I've made. Let's add an if statement to our loop that checks if the number of courses I've made is 10. And if so, changes my job to learning specialist. Afterwards, the loop exits. Interesting. Let's check to see if that works. Here's the make course function that console logs Made a course every time it's run. And lets console.log,(cameron.job) when we're finished running the loop. So, when we run it, we can see that it's printed made a course to the counsel log 10 times. And then when it finished, it printed out learning specialist, Cameron's new job. For loops are similar to while loops but check for conditions in a slightly different way. We have an initialization value, a condition that gets checked on every iteration of the loop, and a mutator that increments or decrements the initialization value. So for example, in this for loop, we initialize an incrementor i by using the same var syntax we've been using all course. Then we set the condition i less than nine using an operator that we saw before, and then we increment i by one by adding i plus plus. For every trip through the loop, we're going to console.log(i). You know what? Before I tell you what's going to happen, I think this is something you can figure out on your own. Make a prediction. What will the result of this code be? Type your answer in this box. Once you've made your prediction, type this code into your browser's console and press Enter to watch what happens. Is it what you expected? When you try to type this for loop into your browser, don't worry about putting everything on separate lines. You can type all this out on one line. So I think we'll see zero to nine appear. Wait a second, this is actually i is less than nine, so it's going to exit the loop when i is equal to nine. So it actually will show zero through eight and there it is. So here's one last helpful loop, the for in loop. For in loops let us easily iterate through arrays or objects. The syntax looks like this. The same keyword for. We have some kind of iterator, which we can give any name that we want. Then we have the keyword in, and then an object or array that we want to iterate through. For each of the items in some object, we want to do something. Just like before, we put the conditions for our for loop inside parentheses and the statements we want to execute inside curly braces. It's important to note here that this item, this iterator in this list is actually the index of the item in the object, not the value held at the index in the object. So let's take a look at an example. We have an array called countries, which has the top four teams of the 2014 World Cup. We have a for in loop here, which is going to iterate for each country in the countries array, we want to log that country. Hey, James. Do you see anything wrong with this code? It's just going to print out, zero through three and not the actual country name. Why is that? Because country is an iterator in countries. It's not the actual value of country. That's right, so let's make a change. Instead we should have console.log countries of the index country. Let's see if this is correct. So, here's our for in loop in one line of code. By using Shift + Enter, we can actually put this in a much nicer format. So we see, for (country in countries) { console.log(countries[country]) }; and I'm pressing Enter. We see Germany, Argentina, Brazil, and The Netherlands. You should already have a work object with all of your work experiences. I want you to write a for-in loop that iterates over all the jobs in your work object and appends them in a new HTMLworkStart element. I want you to also format each job's employer with HTMLworkEmployer in each job title with HTMLworkTitle and append all of that to the page. Click this box when you're done. So I'm going to start off with for job in work dot jobs, which is giving me the jobs array in the work object. Then I'm going to append HTMLworkStart to the work experience div, which we can see right here in our HTML. Then, I'm going to work on formatting the employer in the title. To do so, I use the HTMLworkEmployer and HTMLworkTitle strings that are in helper.js. Calling the replace method on both of them,. I will replace the placeholder data with our employer and our title from the work.jobs object. Notice here I'm using job, the iterator from the for in loop, as the index of the job that we want inside the work.jobs object. This variable, formatted employer title, is a concatenation of formatted employer and formatted title. We're just adding them together. This last line here .appends the formatted employer title, which we just created to .work-entry:last. Now this is an interesting syntax. In jQuery, we're selecting every object with a class work-entry. We know we want a class because it has a dot in front of it. But then, this colon last tells us that we specifically want to append this formatted employer title to the last element with the class work-entry on the page, which should be the one we just created. Let's go ahead and check our work. We've refreshed the page and we can see that within the work experience section, we can see our two entries for work experience for Planet Express and Panucci's Pizza. And it looks good too All right. Now that we've done a first pass through control flow, let's make some concerted effort to complete the work session, the required information for which you will find in the instructor's notes. You've already made your work object. Using any of the control flow patterns you've learned so far, iterate through your work information, format the HTML with the proper templates, and append it to the page. Your work section should look like this when you're done. Alright. It took a little bit of time, but this is what I came up with. This is the same code that we had before and really the only new parts here are iterating through the dates and the descriptions for each job. Here, I'm doing the same thing we did before. I'm replacing some data from the HTML work dates string with the dates from my work object and then I'm appending the formatted dates to the last element of class work entry. Same thing with description. I'm replacing the placeholder data with work.jobs(job).description, and then appending the formatted version to the last element of class work-entry. And this is what we see on the page. One thing I've noticed about this code is, it's a bit spaghettified. What? You mean like it's falling into a black hole? What? Never mind. It's an astronomy thing. It's spaghettified as in it's a mess of IF statements and loops. Let's break this down into some more manageable chunks by using some functions. Functions are awesome. Hey, have you read the book East of Eden by John Steinbeck? This isn't a literature class. I know, but stick with me. This is relevant. I was reading it the other day, and there was a passage that struck me. The story takes place around the turn of the century, and one of the characters named Adam gets a car. This was a big deal because cars were really new. Back then, you couldn't just stick a key in the ignition and get rolling. There was a long intricate process of priming the ignition, getting oxygen into the engine, et cetera. The boys in the story had a mantra that they kept repeating to help themselves remember the process. But all of this is automated now, right? Turn the key, start the car. Right. You know, in the book, the characters had to pass instructions about the way engines work in order to start the car. Today, all of those instructions are bundled in the act of turning the key. Functions do basically the same thing. They bundle instructions together. So if I had a start car function, it would abstract away all of the intricacies of starting a car. Yeah, exactly. Okay, that was a decent example. Functions in JavaScript can be defined with two different syntaxes. The first should look pretty familiar if you've been paying attention. We start with var followed by the function name, in this case myFunc equals, and then the word keyword function, an optional parameter list, and then the body of the function. This keyword function tells the JavaScript engine that we're making a function. And this is the second syntax. In this case, we don't actually have to start with var. We just start with this keyword function and then we give our function a name, which, in this case, is still myFunc. Then after myFunc, we have optional parameters inside parentheses and then the body of the code goes between the two curly braces, just the same way we do with if statements and loops. These two syntaxes are pretty much equivalent. There are subtle differences in the way the JavaScript engine interprets these two different functions. However, they go beyond the scope of this course. So check the instructor's notes if you're interested in learning more. Seems to me we should bundle the code we just used to populate the work experience inside the display work function. Yeah. Let's do that and see what happens. Here's a quiz for you. We want you to move all the code you just wrote to display the work into a function called display work. Make sure you put all of your code between the curly braces, but don't do anything else after you've moved your code into display work. What happens when you refresh the page? Pick one of these two answers. Do you see the same thing or does nothing appear at all in the work section? Okay. So I've created my display work function. And inside of it, I've filled in all the code that I used to display my work. When I go back the page and hit refresh, we can see that my work section actually has disappeared. I can see the other sections because, okay, well because James and I are cheating and we already have the answers in. But, the work section's gone, and that's because we never invoked our code. We don't see anything happen because we never invoked our code. Let's investigate how to invoke functions. Now that our code is inside a function, it has to be called, otherwise it won't work. So let's invoke our code right after we define it. Now first I'm going to give myself a little bit more space here so you can see what I'm writing, and if we call display work and save it and refresh the page, we can see that our work experience appears right here. Hm, so, James, when you wrote display work, you didn't put an argument in, you didn't pass in a parameter. That's pretty interesting, why didn't we have to use one? Well, this function is using an object that's in the global scope for the script, meaning it's accessible to the function which is also in the global scope. True, but let's imagine that we wanted to, I don't know, for some reason, add multiple different work sessions to the page. Then, what would be need to do? That sounds like a job for an argument. If this function took in an argument, we could pass it different work objects, which would each get displayed on the page. You think we should do that? I'm having a hard time imagining, why you want to do that for this example. I have a better idea. Lets say you wanted to track where users are clicking on your site. We could collect the cursor location every time a user clicks on the page and send that off to our analytics site. Interesting, let's see how that works. So here we are in this Web page. Let's take a look at what it looks like when we can see our click locations. I'm going to go ahead and open up the console by pressing Command+Option+J and start clicking around. We can see x location with a pixel value and y location with a pixel value of where we were clicking on the page. For this question, I want you to use this code here to pass x and y click values into a function called logClicks. You'll need to right some code here that will collect the x and y click values. logClicks is defined in helper js. It's going to append the x and y values to a list and Console.log what you saw before. X location with a pixel value, and y location with a pixel value. When you do everything right, you should start seeing your clicks showing up in the Console. Okay, so here's the shell of the code that we saw before, where we're grabbing the click location on the document, which is just the whole website. And we're going to be running some steps, using this weird function syntax, that we'll actually be learning a little bit more about soon. Every time the page is clicked, we create two new variables, x and y. Both of them use this location object, this location event object from the click, and we grab its pageX and its pageY, which are simply the pixel values of the x and y location of the clicks. Once we have the x and y locations, we simply pass them into logClicks and we should see, when we click, there it is again, x and y locations. Let me show you something cool. In Chrome tab tools we can easily open up the source code for a website. All we need to do is open up DevTools which I will be doing by Cmd+Option+I. And then we'll go to the sources pane. Here, in sources, we can see all of the source code that led to the website we see behind us. So Index.html should look pretty familiar and we can open up javascripts and we can see helper.js, jquery and resumebuilder.js. Let's open up helper.js. Over here we can see it. Lets give ourselves a little more room, and I'm going to scroll down. Inside helperjs, we've got all of the strings, containing the html we want to add to the page. And we can find some functions down at the bottom. This job script down here is actually creating the map that we see on the page, but there'll be more on that in a little bit. For right now, let's pay attention to this line right here. Inside this function called locationFinder, we see this statement that says return locations. We've seen this return keyword a few times so far, but we haven't really delved into it's purpose yet. It's called a return statement, and its purpose is to make the function give back a value. I think I know what you're getting at. Won't you explain it a bit more. Well, remember console.log? It doesn't return anything, which means if we were to create a new variable, like this. Var hello equals console dot log hello will get undefined when we try to run it. We wee that console dot log worked and printed hello, but then we see this undefined below it. If we try to examine the variable later by just typing out hello and pressing enter, we see undefined. That's because console dot log didn't return anything, it didn't give anything back. However, most functions actually do return values. Like a lot of string methods? Yeah, let's look at string dot split. First we'll create a string like this one. I've created a string called myString and set it equal to, This is my favorite string! Then we are going to go ahead and separate the string on spaces. Meaning that we'll get each word by itself. Split works like so. It's going to act on the string here. And it's going to separate it based on the parameter here. This parameter is just a single space so we should get an array of the words from myString. Let's go ahead and save it to the variable myArray and press enter. Okay, and when we try to access myArray, we see and array of strings. This, is, my, favorite, string. Each of the words from myString before. In other words, split returned an array of strings which is now equal to myArray. Oh, I see! When we write functions that we want to turn into a value, they must give us back a value. Looking at this function as a whole. The parameter is the input. The function does something using that parameter on the actual string and then it gives us some sort of value. Let's think about the resumes j's on data and all the location in it. For this quiz I want you to write a function called locationizer. It's going to take in the work object. Locationizer should return an array of the locations in your work object. Remember work contains all the jobs that you've had in the past and each one of which should have a location associated with it. We want you to return an array of those locations. You might find it's helpful to use the array.push method which is going to add values to the end of the array. When you get to the quiz, you'll see a sample json that your code will iterate through. Good luck. Okay, starting off we've got this work object that's got all of my jobs in it. Very cool. Then we come down to the bottom here and we find the locationizer function. Locationizer's taking in the work_obj from above and let's take a look inside of it. We start off by initializing a new array, which in this case is called locationArray and it starts off empty. And then we've got a for n loop. This for n loop is going to iterate over every job within work object dot jobs. So remember, work object is the object that we have up here, it's being passed in, and we're going to iterate through all of the jobs in it. For each of the new jobs, we're going to create a variable and don't worry, it's going to get overwritten every time we run through this loop. The variable is called new location. And we're going to set it equal to the location of each job. So let's break this down a little bit. We've got the work object, and then within the work object, we've got the jobs array. And now because of the for in loop, we've got the index of each job within the jobs array within the work object. And then for each job we want the location. So we're just going to use .notation to get the location. Once we have each location we're going to push them using the .push array method. So we'll start off with the name of the array that we want to return later and we'll do .push with a location as the parameter. Once this for loop is finished we're going to return the location array which we created earlier. All right, let's go ahead and see if this works. All right, we'll come down here. And let's console.log locationizer. And we'll pass in the work object from above. And if all goes well, we should see an array of locations where I worked. We'll hit test run. Scroll down. And there we go. The log says that I've worked Mountain View, Seattle. And I've had two jobs in Nashville. Fun fact. James, did you know that, in many parts of the world, names are capitalized differently? While Americans capitalize the first letter of both names, in many places of the world, the first name has the first letter capitalized, while the last name is entirely capitalized. Really? I guess that does make sense. In some countries, I know that they list the family name first and the first name second, and it probably makes sense if our resumes could switch to international mode to do the same. Yeah, this sounds like an interesting challenge. First off, append the internationalized button to the main div. This is just a string with HTML that will create a button. Then, create a function named inName() that takes a string of two names and returns an internationalized version that would look something like this. When you're done, check this button. You should be able to see the new internationalized name show up on the resume every time you click the button. So here we have our function, inName. It takes in a parameter called name, so when we take a name we want to call trim, which removes the white space from the front and the back of that string. So our string currently will look something like this, we can see that this string doesn't have any differentiation between the first name and the last name. So we have to call a function called split, and we pass in the character or string that we want to split the source string from. So in this case, it's a space which occurs here between Sebastian and Thrun. Now when we call split, it returns an array of Sebastian and Thrun, our next line here prints out that to the console. This next line, name one equals name one to uppercase changes our last name to totally uppercase. So in this array down here, we have name zero and we have name one which has been turned into totally upper case. This next line is a little bit tricky. Let's take it piece by piece, name[0].slice(0,1).toUpperCase(). The .slice function takes in two parameters of where to start and where to end in a string and creates a substring. So for this one in name[0] right here it's starting at position 0. It's converting that to upper case, which it already was, but our function doesn't have a way of knowing that and then it appends it to, to a slice starting at position one, and converting that string to lowercase. If you don't pass in a second parameter, it goes to the end of the string. So looking at this example again. We'll start at position one and go all the way to the end where the n is. So our last line takes those two values and appends them together. It return to the other string, and our string becomes. All done. Hey James, what do you say about treating a displayProjects function that will handle all of our projects and display them on a page? I have a better idea. We only just touch the surface of what objects can do. Let's take a look at them first, and then we'll finish off our resume using our newfound knowledge of objects. Does that work for you? Yeah. Why don't you start us off? We saw earlier that we define objects with these curly braces. And we also include code for functions inside the curly braces. Guess what? Functions are objects. What? I know you knew that already. It's a little bit crazy, but pretty much everything in JavaScript is really an object when you get right down to it. There's a link in the instructor's notes with implications from the relationship between functions and object. For our purposes it's useful to note that objects can encapsulate functions as well. Yeah. For instance, let's create display as a method of the projects object. Projects, the object, already includes all of our data about all of the projects we've completed. And now it's going to include a function that will help us display those projects. Using dot notation here, we can add a new property to the projects object called display. And we'll set it equal to a function. Within these curly braces, we'll define what the function display will do. Even though we defined the projects object with object literal notation, it doesn't matter how we defined the projects object, we can still crreate this property display using dot notation. This is called encapsulation, meaning that we're holding the display function inside the projects object. It's a nice way to organize our code into logical domains and JavaScript makes it really easy to do so. Nice. So what should go inside projects.display? Hm, you know what? Let's let the students decide first. For this challenge, you're going to be finishing up the project section which you can see in this finished resume here. We have the title, the dates, a description, and then a couple pictures. You'll be encapsulating a display method within the projects object. And that display method in projects should append all the projects information to the project section. Here's a hint. You'll need to start each new section with HTMLprojectStart. When you're done, check this box to let us know your resume is looking awesome. All right, so, this is what I came up with. First and foremost, we need to set this display method on the projects object. So, using dot notation, I simply set the property display on the project's object and set it equal to a function. This function is using a for in loop, for projects in projects.projects. Inside the projects object, we have an array of projects, also called, well, projects. Like we said in the hint, we need to start with HTMLprojectStart to create a new project entry. Then you'll see a set of steps where we're appending the title. The dates, the description, and images to this project entry last element. Remember, HTMLprojectStart is creating an element with the class project entry, and we want to grab the last one every time we work through this list. Following the same strategies we've been using in this class, we'll be appending each of these elements to project-entry:last, and when we're done, we should see a nice beautiful project section. JavaScript includes many different syntaxes and techniques to accomplish the same goals. Just thinking about what we learned about objects alone, there are at least three different ways of defining objects. Literal, dot, and bracket notation. When you start debugging other people's code, you're going to have to wade through almost two decades of different syntax and techniques, layered one on top of the other. You know what? This sounds like a great quiz to me. This course isn't long enough to introduce everybody to all of the nuances of JavaScript. In fact, you could spend more than a hundred hours in a JavaScrip class without getting a complete picture of the language. Yeah. I think I see where you're going with this. Let's give students a piece of JavaScript, with some syntax they haven't yet encountered, and see if they can figure it out. This piece of code should look familiar. You saw something similar a few exercises ago, when you're tracking click locations on a website. There's this weird syntax here, with function, location, console.log, etc. What is going on here? What is document.click taking as a parameter? Do some research, try testing it out in DevTools, and put your thoughts right here. So, taking a look at this snippet of code, it looks like $(document).click() is taking in some kind of function. We see function, then a parameter, and then these curly braces that are passing in, well, some instructions. This is similar to regular function syntax, where we declare a function with the keyword function, set some parameters, and then put code inside curly braces. But this function doesn't seem to have a name. And that's kind of curious. So let's go ahead and open up Google. I typed in JavaScript function without name and I'm going to take a look at the results. We came across an article about JavaScript Anonymous Functions. This seems really useful. It looks like an anonymous function is one that's declared without a name. That sounds like what we've got. So it looks like $(document).click is taking an anonymous function as a parameter. You'll find anonymous functions all over the place in JavaScript. So I encourage you to check out the resources in the Instructor Notes to learn more about them. As it is right now, we're actually giving you a pretty cool tool in the resume. If you want to make a map appear at the bottom, it's actually real easy. Let's scroll down and take a look at it. We can see this great Where I've Lived and Worked map. Here we can see place markers for all the places where James has worked. To add this to your resume, it's actually pretty simple. I'm going to open up dev tools again in the sources pane, and I've added this line to my resume builder.js. I've added mapdiv.appendgoogleMap. Inside helperjs, we've got some functions set up that make it really easy for you to add a map that automatically puts place markers where you've lived and work. Add this to your code and see what happens. The functions in helperjs are using the JSONS created in resumebuilder.js. It iterates through the locations, it rooms google searches on all those locations, and then uses the results to put pins on the map. It's pretty awesome and there's actually going to be a quiz in the practice problem section after this lecture, where you'll be able to break it apart to see how it works. But beyond a Google Map, you have tons of options for making your resume interesting and interactive. For starters, try editing the resume's CSS to style it the way that you want. If you're unfamiliar with CSS, check out our course on HTML and CSS. It's in the instructor's notes. Or you could even use a library like D3 to add a chart that helps people visualize your skills. I like that one. It's worth poking around D3 to check out the really cool charts, graphs, and visualizations you can easily add to your resume. And while you're at it, check out the links in the Instructor's notes, to other cool resumes we found online. Get some inspiration and try customizing yours. So this is your final project for the class. And judging by the looks of it, your resume should be just about done. Great job. But, before we can let you off the hook, remember that we've learned quite a bit about objects and the way that they can encapsulate information and related functions. This is a two-part final project. In the first part, take the display functions that you wrote and encapsulate them within their respective display, work and education objects. The second part of this project is to make the page your own. You can add whatever you want to show how truly awesome you are. In the Instructor's Notes, we've added links to a couple of cool JavaScript libraries to do interactive graphics and charts. Right. There are thousands of awesome JavaScript libraries out there, and most of them are really simple to include in your project. Go the extra mile, and make your project really stand out by taking advantage of any one of them. Good luck.