Hi, I'm Ankur, the head of developer education at Amazon. And I am Cezanne and I'm a course developer at Udacity. In this course we'll look at different ways to monetize your game app. We'll show you how to make money from your game, which is a subject a lot of developers leave as an afterthought rather weaving into the fabric of the game from the very start. So far you've been learning about how to program your own mobile game but it's also important to be able to share it and make money. Ankur, what are some examples of monetization in action? Well, if you have played any mobile games, I'm sure you've already seen a bunch of examples. It goes into everything from what a game looks like to ads and items that you can buy in the game. And remember, that there's no guidebook to tell you the perfect ways to monetize. There are lots of different ways. After this course, you'll be able to choose what works best for your game. Let's take a look at the different strategies we'll be learning about in this course. So Anchor, I was thinking that there are so many game apps out there already, why would I look for another game to play when there's already Bejeweled and Fruit Ninja? That's a great question, because even if a new game is a lot of fun to play, it won't necessarily be profitable. And its popularity may fade with time. Luckily, that's what this course is about. We'll talk about three main topics that'll help your game keep its players coming back and help you make money. What are those topics Suzanne? Well, the first lesson will be about engagement. Which is how to design your game so that people play it often and stay interested over time. The second lesson will discuss the different models for monetization, like using ads and in-app purchases. And our third and last lesson will be about publishing best practices, like testing your game and getting your game noticed. As you go through this course, keep in mind that the best and the easiest way to make your game profitable is to start thinking about monetization right away. As you're building your game, don't leave it as a last step. The first step in getting your game to make money is to make your game fun. Build a game that everyone wants to play and pay money for. Of course, that's easier said than done, and this is why learning about engagement is important. Game engagement is all about how to design your game to have that addictive quality that keeps players wanting more. It's really important for monetization because the more your game is played and your users drawn into your game world, the more money your game will make. Take Candy Crush as an example. When I play it, I'll play whenever I have a moment to myself, like when I'm on the bus or just trying to seem busy on my phone, and I'll try to get to the next level. It's really simple to play and there are always more levels for me to get to. Just look at this level map. I have so far to go. I feel like I have to keep playing, and these levels are part of why Candy Crush is such an addicting game. I even got my mom hooked, and now she's a lot better at it than me. So levels, like in Candy Crush, are great ways to keep players coming back, wanting to go further in the game. But they aren't the only way. Let's look at what makes a game engaging. In this lesson, we'll talk about how to get the right level of difficulty in your game, adding competition in your games, making your game easy to access and play across multiple devices, and also turning your players into fans. These are the four components that we've seen all engaging games include. So before we get into how to build an engaging game, let's think about why engagement is so important for monetizing your game. What are some good examples of why engagement is so important? So for Unker's question your options are, engaged users spend more time looking at ads and purchases, good engagement indicates that your game is fun, really engaged players become fans, engaging games are more profitable, or all of the above. The answer is all of the above. Engagement is about how to make your players happy by making a game that holds their interest so that they keep coming back to it. So good engagement indicates that your game is fun. It also can help turn your players into fans. And along those same lines, if players keep returning to your game, that means more time for them to see ads and in-app purchases. And this is going to make your game more profitable in the long term. So all of these options are true. So how can we tell if a game is actually engaging? Well, we can usually look at how popular the game is by finding out if the game is downloaded a lot and if the reviews are good. For example, here we can see game apps in Amazon Appstore. And we can see the number of reviews and the star rating from one to five stars. And this gives us a good idea of how engaging our game is. If the game has a rating close to five stars, it's probably pretty fun. And if it's lower, then maybe there's something the users don't like about it. We can also look at how long and how often players use our game, and measure engagement. Here are some terms we used to measure it. Session count, session length, and retention. Session count is the number of times an app is launched. So any time a player opens the app, whether that's once a week or ten times a day, the session count goes up. And if we look at the average session counts for a player over a day. We can get a pretty good idea of how addicting our game is. But some games are designed for longer sessions instead of multiple short sessions, so the session length is also important. Session length is the amount of time that the app is in use for a particular session. So whether that's a few minutes or going on and on to a length of hours. And again for this to be a useful metric we would usually look at the average, the average person length across users to see how long a typical user plays once they open the app. And we also look at retention. Which is a measure of how many users continue to play your game as time goes on. Usually game retention is measured a day after your game is first launched and downloaded, a week after, and the month after just to see how many of your original players you keep over time. Say you want to measure retention over week for the game Fruit Ninja. That means you want to see how many people who start at the beginning of the week are still around at the end of the week. During the week some of these early users will leave Fruit Ninja. And new ones will join. But we don't want to take into account the new ones. We just want to see who started at the beginning of the week and stayed throughout the whole week. To calculate this, you need to look at the users at the end of the week minus any of the newcomers who joined in the middle of the week, all divided by the number of users that started at the beginning of the week. Then multiply all this by 100 to get a percentage and this is going to be your retention for the week. So let's look at some numbers for Fruit Ninja. Let's say we had 400 people download the game at the start of the week and there's 700 total by the end of the week. That looks pretty good. But we also know that 500 of these people are new. They joined in the middle of the week and they are part of our 400 original starting players. So let's calculate the retention. First we have 700 from the end of the week, minus the 500 new players that joined mid-week. So we are only accounting for our original 400 to see who stuck around. All divided by our 400 original players. Then times 100 to get a percentage. This is going to be 200 over 400 or half times 100% which is going to give us 50% retention over this week, which is pretty good. Ideally we'd want 100% retention, which means everyone who downloads your game keeps playing it and never quits. But no game has perfect retention and even really great games have around 50% retention after just the first day. That means that half the players leave during the first 24 hours of playing. This seems like a lot of people leaving, but it's considered pretty good or a tension especially for a game that as good at getting new players over time. It won't matter that a lot of older ones leave. Lots of developers use a 40, 20, ten rule as a guideline for good retention over a day a week and a month. So after a game is downloaded by a bunch of people we have 100% of people. Forty percent of those users stick around after the first day. Twenty percent of those stay for a week and only ten percent stay for a whole month and even longer usually. If you have retention at these time points a day, a week or a month that's higher that's great. If it's any lower that's considered bad retention No game has perfect retention, but many game developers use the 40-20-10 rule to measure if the retention is good over every day, a week, and a month. For a game that starts with 200 players on a certain day, what is considered good retention using the 40-20-10 rule? For the game with 200 players, your measures for retention are, 100 of those players leave after the first 24 hours. 70 of those players stay after one day. 40 of those players stay after one week. Or 100 new players join a week later. There are two correct answers. 100 of those players leave after 24 hours, and 40 of those players stay after one week. First, let's review the 40-20-10 rule. We measure good retention to be at least 40% after the first 24 hours, 20% after a week, and 10% after a month. For this first answer, if 100 out of 200 players leave after a day, you still have retained 50% of your players after day one. And this is higher than the 40% in our 40-20-10 rule. But for this answer, if only 70 of our players stay after one day, this is only 35% retention, and that's too low for our first day measurement. If 40 out of 200 stay after a week, that's the same as 20 out of 100, or 20% retention, which matches our rule for a week. In this last answer, we have 100 new players joining later on. And this gives us no information about the retention of the 200 players we were originally interested in. Now, let's look at some examples of how these metrics, session count, session length, and retention can really affect monetization in games. First, let's consider a straightforward example of a game that uses ads to make money. Now ads might not make the most money, which we'll get into later, but their success does depend on how often and how long users play your game. Because each time an ad is displayed in the game, it makes a small amount of money for the developer. And when there are a lot of sessions, so the session count is high, there will be a lot of opportunities to display an ad. Similarly, when a session is long, ads might be displayed multiple times in one session. So both of these result in more ads being displayed. And more ads mean more money, and retention looks at these effects over a longer period of time. Say, your app launches, and people are excited about it. There's a lot of sessions, but then after a week or so, people start to get bored with it, and the number of players and sessions drops over time. And when the number of sessions drop, so does the amount of money the game makes. So high retention is important for monetization because your game will only make money over time if you retain a steady number of players. Retention is especially important if your game is planning on selling items in the game over time. These items are called in-app purchases and include things like power-ups or special game equipment that players can buy and then use in the game. And you want these sales to be pretty consistent over time so that you continue to make money. Here is a specific example of how retention affects in-app purchases. This graph shows the amount of in-app purchases by the hour for the top 50 games in the Amazon App Store right after they've been downloaded. So, this gives us a good idea of what in-net purchases look like for successful games over time. Look at the initial 24 hours. There's a big spike in in-app purchases. The first day is often where players make the most purchases. In fact, most games make about 18% of all their in-app sales from players buying items within the first day. But that leaves 82% of in-app sales coming from players who continue to buy over time. So even though this initial spike is impressive, these smaller purchases that stay consistent are even more important for your game to continue making money. These regular purchases also mean that players like your game. They are playing your game everyday and willing to pay for it bit by bit. The bottom line is that the longer someone stays engaged and plays your game, the more money it will make. So we know that the more time someone spends playing a game, the more money it can make. So what can we do as a game developer to make people spend more time in our game? Well, think about one of your favorite games. What are some of the qualities that makes it addicting, and how many times would you say you played in a given day? One of my favorite games is Fruit Ninja, and it's really addicting because it's so easy to play. And every time I play it, I always think I can do better and beat my score. So I'll keep coming back to improve. I've also gotten a few friends involved. And so I try to be their scores too, and I probably play about two or three times a day. And it's kept my interest over time. So you've learned a lot about retention and how it's pretty normal to have around 40% player attention after just one day. Ankur, why do you think so many players leave after just the first day of playing a game? Well, it's very hard to make a game that's engaging for everybody. So people might leave after trying it out and finding it's not a great fit. For example, kids tend to have a lot more time on their hands than adults. So they prefer longer games with more fun story lines. That make sense. Everyone plays games a little differently. So what can game developers do to keep players interested? Most successful games have a target audience. They know they can't appeal to everyone. And so they focus on the specific age group or a type of gamer and try to design a game that is targeted to that audience. I think I have a great idea for a game that appeals to people around my age. Check it out. [SOUND]. What do you think? It seems fairly simple. Maybe you can make it harder by adding some goals or obstacles. Good idea, how about I bounce the ball through a ring of fire and into the goal? That's more like it. When you're thinking about your game and deciding what it looks like and how difficult it is to play, you should always put yourself in the players' shoes and think about what will be most exciting for them. Ask yourself are they younger? Hardcore gamers or more casual? Exactly, it's important to make your game pace fit your player's skill level. Like adding a ring of fire and goals makes bouncing ball a lot more challenging and fun. Let's look at some examples of game apps that do this well. Have you ever played tic-tac-toe? The board looks like this, and you take turns with another player trying to make a row of three Xs or Os in a row. I would play this all the time with my cousins, because it's so easy to draw out on a piece of paper. But it didn't hold our attention for long. Most of the time we would tie, and it would get boring really quickly. You can imagine if this were a game app, I wouldn't play it for long because the pace is too slow and the game is too predictable. To really attract and keep players interested, you want to make a challenging game. When I think of a challenging game, they all have a few things in common. First, the game starts off slowly so that it's easy to play and understand. Second, the game complexity grows over time. This is especially important for monetization, because complex difficult portions of your game can be good places to introduce in-app purchases that can help players overcome certain challenges. If you decide to include in-app purchases like this, keep in mind that if a game is too challenging without them, it will detract from the quality of the game, and it can drive players away if they feel like they're being forced to buy helpful items in order to advance in the game. So, always keep in mind your players and their game experience, because a quality game experience Is the most important aspect of a challenging game, and design your in-app purchases to be helpful, but not required. A good example of a game that bounces being challenging, but not too challenging, is Candy Crush. Candy Crush has a lot of levels to progress through. They start off relatively easy and introduce you to the rules of the game. And as you breeze through the first couple levels, it gives you some winning momentum. The levels get more challenging over time. Here you can see the difference between early level of Candy Crush and a later one that's a special level, which includes licorice and bubbles as extra obstacles. And when you don't quite pass a level it feels like you were so, so close. And if you just need a little extra push, the game will offer you items and power-ups for purchase that will give you that push. And this is a great example of why it's so important to plan for monetization early on, so that you can have good timing and introduce in-app purchases right when players might need an extra boost. But it's hard to know exactly what challenges or items your game players will like the best. So later in the course, we'll talk about how to test out different versions of your game, like different challenges or levels, to see what works best. What do you think is the most important aspect of designing game difficulty? Choose what you think is best. Your answer choices are, making sure the first few minutes of a game are simple and fun enough to interest a player, letting your player choose the level of difficulty, designing in-app purchases to help with game challenges or making your game colorful. Please select one. The correct answer is the first one. The first few minutes of a game are the most important. Because without that initial hook, you won't have any interest in players. And nothing else gets a chance to matter. The third option to design in-app purchases to help with challenges can be a good strategy for monetization. And the other answers are more personal preferences for your game design. Color and letting a player choose the level of difficulty aren't as important as designing the first few minutes of a game. So now that you've learned about pacing your game and making it challenging. But not too challenging by adding goals and obstacles. What else can we do to keep our players interested? I know I'm getting a lot better playing our bouncing game by myself but I wish there was some way I could know exactly how good I am. Yeah. It would be great to see how we rank against other players. Let's play against each other and add some competition. All right, when players compete and have a chance to win or set a record, they have even more motivation to keep coming back to your game. Let's see some different ways that game apps create competition. One simple way to create some friendly competition in your app is to add a leader board which lists the players with the highest scores or achievements. Like in the game Temple Run, it lets players share their rank with one another and lets you keep track of the highest scores over the current day, the week, and over all time. Another good way to include competition is with personal ratings like the star rating in Angry Birds, which is an example of a personal player achievement. It gives players a number of stars, one out of three, based on how well they beat the level. This gives them an idea of how skilled they are at the game. And if they think they can do better, they'll play the game for a longer time. And the more time players spend in your game, the more money it will eventually be able to make. Another way to get players to keep coming back to your game is to offer them special timed awards. Really cool items or mystery stages during a specific time window. This is also a great strategy for getting players who may have left your game to come back. By offering a special stage or award you keep your game exciting and interesting. For example, puzzle and dragons have urgent dungeons that can only be played on a specific day or within a limited timeframe, like this dungeon can only be played on a Thursday. Other games have daily or weekly challenges. And these special timed events, combined with leaderboards and achievements, create exciting competition between members of the gaming community. And are all great ways to keep players involved. Say we've made a simple shooter game, like Space Invaders. Right now the goal is to play as a single spaceship and shoot down as many enemies as you can without getting hit. What could you add or change about this game to create some competition? Some good ways to create competition is by letting players compare their high scores or achievements with other players. So for example, I might choose to keep track of the level a player gets to and how many aliens they shot. And make a leaderboard to show who has the highest score in these categories. You can also keep track of who maintain the least amount of damage or any other competitive measures you can think of. You could also build an option for a two-player game. So that two players compete to shoot the most aliens. The important thing is that you create competition by involving a larger part of your gaming community and letting them compare their game performance. So we've learned that we can keep our players coming back to our game by creating some friendly competition. But we also need to make our game easy to return to. Why don't you tell us more about that yet? Yeah, say I've been playing Angry Birds for a while on my phone and I get all the way to level 30. Then when I get home I switch to my tablet to play and I have to start all over at level one. That's so frustrating. I'd probably quit the game then. Exactly. And so would a lot of people. So it's really important to have the same progress across all your devices. A simple solution to this problem is to save your data across all your devices in the Cloud. So how would a game developer do that? Well there are number of tools out there that allow a developer to link to the cloud. For example, Amazon's dispersing for game gives you the ability to sync your game progress, scores, and much more across all your cloud devices. Let's learn more about this. So now, with the cloud, you can play across your devices. And all your data is saved automatically for you, which is great. But what about if you lose the game? Maybe a game is like Flappy Bird and you lose every few seconds, or is that just me? Do you stop playing? Of course not. You keep going for a while and try to beat your record. And this is because it's so easy to keep playing. Flappy Bird lets you crash and burn, then start over just by tapping the screen. This is a lot easier than classic arcade games where when you lose, you have to type in your name to record a game score. And then insert more quarters if you want to play again. So to keep your players interested, it's important to include an easy restart in your game. Let's consider a game where you keep advancing levels. But when you lose a level it asks you to login and see your progress. How can you make this game easier to access? Here are your answer choices. Save your progress and data automatically to the cloud. Make the levels of your game easier. Automatically save your log in information or make fewer save points for your player. The correct answers are saving your progress automatically and automatically saving your log in information. The difficult part of this game is that the player has to save and log in each time they lose a level. And so you want to be able to save this information automatically and skip these steps. Both these answers make your game easier to access. Whether you save your progress and data automatically in the cloud or automatically save your logon information, you're skipping the difficult and annoying part of this game. Which is that each time you lose a level you have to save and log in. These other two answers, making the levels easier and making fewer save points, are more about making the game levels easier. And affect the difficulty but not really the ability to access the game. So we've talked about how to make our game easy to play and very engaging. But the best games also need to reach as many people as possible. For example, our game where we bounce a ball through a ring of fire is obviously brilliant, but it's so new that no one knows about it yet. And you can't get someone interested in your game if they haven't heard of it. You need fans. So what makes a player a fan? Fans of players that help spread the word about your game by telling their friends about it. And then those friends tell their friends and on and on. And how can we get fans like that? Well, word of mouth is one simple way to grow your fan base. Many developers also do outreach on social media to reach a wider audience. But they keep their fans by creating ways for them to influence the content of that very game and improve it. And by making your game better and promoting it, fans can help your game make money. A great way to build an audience is through social networks. Lots of games have options to link to Facebook or Twitter and share your high score with your friends or even invite them to play the same game as you. And they'll give you an incentive to do so, like Candy Crush will give you powerups if you can invite a new Facebook friend to play the game. It's like a trade. Some games even rely on an individual fan to spread the word, people like YouTube stars or Tumblr users whose reviews can reach a lot of people. So as you build your game, think about how you'll want to integrate with social media and create your own gaming community. Which of the following are good examples of games that integrate with an online social network? Your answer choices are fan art, a game that plays across platforms. Your answer choices are fan art, a game that plays cross-platform, a game that uses a Twitter page, Angry Birds, or a game that links to Facebook. Candy Crush does so here. The correct answers are the last two. Both of these games linked to a social network. Angry Birds has its own Twitter page, which helps them reach more potential players. And Candy Crush encourages players to use Facebook and engage their friends in the game. These are both good examples of social networks that help spread the word about a game to players' friends. And linking to social networks is important for increasing a game's popularity, expanding its fan base, and getting more players who can eventually contribute to the game making money. To build a great gaming community, you might also want to involve your players in the game creation process. Yeah, for our ball game I'm kind of stuck on ways to improve it. I can only get so far by adding more rings of fire. Where else do you think I should do? Well, you could add multiple balls of different sizes, and I'm kind of getting tired of the rings of fire. What about including different obstacles like maybe walls that you want to avoid? Those are great ideas, thanks for your feedback. I'm happy to help. None of us knows how to build the perfect game. But by listening to our players and getting their feedback, you can improve your game, and your players will know that their input is valued. So what are some ways that we can include feedback in the game app? There a couple of meaningful ways to get feedback. Most apps just use reviews and ratings, but you could also add in-app messaging systems. Surveys, forums and whatever else you want to get to increase player participation. Recently, game developers are actually inviting fans to watch them on Twitch as they're building the game. This is really cool because developers can get real time feedback from potential players. One great example of a strong gaming and player community is the one for League of Legends. League of Legends gets feedback from players from direct messages and from forums. The game has great graphics and has a number of strong social components. Players can chat with one another, teams compete. And there are even tournaments watched throughout the world between the strongest players. And with such involved players, this game makes a lot of money off of in-app purchases that let players personalize their experience and enhance their gameplay. Lots of players get so involved that they even create fan art based off of the game. Fans like to create content based on your game. And by encouraging them to create content, you can help promote your game and make your players feel invested. As a bonus, you also get to see their creativity at work. And invested players will help your game make money. Fan art is a great example of this. And here's an example from League of Legends. Another example of player created content are extended in game experiences, which are generally ways for players to personalize the game and create scenarios that are the most interesting to them. A great example of this is Minecraft. It gives users a simple set of tools and resources that they can build off of to create their own challenges and worlds. They can create dungeons filled with zombies or lava, games that take place in the air or places made entirely of gold. Players can even recreate scenarios from their favorite movies, like with this superhero character and stormtrooper. In all these scenarios, players are taking the core of the game and customizing it based on their own interests. The more your game supports content creators and is able to celebrate their creations, the more invested your players will be and the more depth and variety you'll have in your gaming experience. When players decide to create content of their own based on your game, what does that include? Your answer choices are, making art based on your game. Building personalized experiences in your game. Players telling their friends about your game app. Or buying in-app purchases from your game. The answers are making art based on your game and building personalized experiences in your game. Game based content is anything that the players are creating related to the game. So that includes art outside of the actual game and extended experiences that let them personalize some parts inside your game app. So now you know the process of building an engaging game. And you have insight into how game design can keep players returning to your game. So what do you think with key takeaways from this lesson. << I think the most important thing I learned is, that there's no one way to monetize a game or get your players engaged in it. But to make a great game, you always want to keep your audience in mind and choose the best game pace for them. Yeah. Building a game so it gets more difficult over time and involves friendly competition is a great way to keep your game interesting. And keeping players interested and having high player retention is the main way a game will make money and not fizzle out. Besides game pace we also made sure that our game was easy to use across devices by saving all our data into the cloud and building in an easy restart mechanism. And finally we talked about how to get a fan base who can help you promote your game through social networks and outreach. A couple of times we've also mentioned ways to make money in your game through in app ads, purchases and so on. But we'll talk about this in more detail in the next section which is all about monetization strategies. Now that you've learned how to make an engaging game, let's talk about the best ways to make money with it. How do you build a profitable game? The most obvious way is to price a game, say, at $0.99. Then anyone who wants to play your game has to pay to download it. These are called Premium games. I've seen a few games like that in the App Store. But mostly I see free games. How to games that are free to download make a profit? Those are called Freemium games, and they use a combo of ads and in-app purchases to make money. And in this lesson, we'll learn more about monetization strategies for both Freemium and Premium games. We'll see what works and what doesn't for each model, and even show you how to implement your ads In an Android game. After this lesson, you'll be able to choose the best ways to monetize your game. The simplest way to monetize your game is with the premium model. You just submit your game to the App Store and pick a price. And most app stores will automatically convert the price you choose to the correct currency for all the markets you want to sell your app in. For example, if you want to sell to an American market and choose a price of 99 cents for your game, the App Store will convert this to the appropriate currency for other countries, like 0.75 euros for the European market. But even though this is the simplest way to monetize your game, most games are still free. People don't want to take the risk of buying a game that they don't know much about. And so freemium games reach the widest audience. And it can be hard to choose between making your game premium or freemium. In fact, many developers offer both options. They offer a free version to reach as many people as they can. And also a premium version that has some benefit for more invested players. It's really common to have a freemium option with ads and a premium version that doesn't. This way both versions of the game make money and the player can choose whether or not to pay. Next, let's look at an example of a real game and see which monetization model we think works best. Plants vs Zombies is a simple tower defense game where zombies invade your backyard and you defend yourself with plants that spit seeds at them. This game includes a wide variety of plants and zombies. The game has great graphics and a good soundtrack. And there's also an option to compete with your friends. Do you think this game should be premium, freemium, or both? Please explain your answer. I checked a few app distribution platforms, and this game ranges from $.99 to $2.49, so it is a premium game. But both freemium and premium options make sense. Premium makes sense because the game is high quality with a good soundtrack and good graphics, and it has a competitive option. Freemium makes sense because there's lots of places to buy new characters and power-ups. In fact, in the newer version of the game, Plants vs Zombies 2, the game has more in-app purchases and is free in the store. So both freemium and premium models can be correct answers. If our game players are looking for a freemium game, we still want to include them in our monetization strategy. How do we do that? To monetize all our players, we can use ads which make small amounts of money each time they are displayed. Ads have become more and more common in game apps in the past few years, and the revenue they generate has increased every year. That's great, but what kind of profit can an individual developer expect to get from these ads? Well, a typical profit for every thousand ads shown is about two dollars, so to really make a profit from ads you need to display a lot of them. But remember, not by overwhelming your players with constant ads, but by showing a few of them to lots and lots of players. Let's look at the different types of ads that game developers use. There are three main types of mobile ads that can be used in a game. Banner ads, interstitial ads, and offer walls. The most commonly used ads are banner ads, which are banners, at the top or bottom of the screen. These are simple to place in your game without obscuring the whole screen. And you can size them to fit different devices. Another type of ad is interstitial ads which take up the whole screen and the user has to manually close them. They auto-fit the screen or whatever device you're on. And so you want to put them at natural pauses in the game. Because these ads take up more space, and more of a player's attention than banner ads, users are much more likely to click on them. And this makes these ads a little more profitable than banner ads. They take a lot of the screen like interstitial ads, but also include videos to watch. And after you watch them, you can get game power ups or in-game currency. These are all good ways of integrating ads into your game. But it's important not to have too many ads because they may start to seem like spam. So place your adds at points where it seems natural to pause and keep your game experience a priority. Now let's see how to implement an interstitial ad in Android Studio. And for this I'll be using the Amazon Mobile Ads API, which I've downloaded from their developer site. If you still need to download that API, please refer back to our reading node for instructions, otherwise, follow along with my code and we'll test our end result together. So I've opened Android Studio and titled a new project named My Interstitial Ad. You can name yours whatever you want, but keep in mind that it's always good to have a clear and descriptive name. Then let's create a new blank activity and I'll name it Interstitial Ad Activity. Okay, great, and we can see we have a few bare bones things in here already. We have our xml layout file here, and our interstitial ad activity. The most important method to us here is going to be our on create method, which sets our view up so that we can display our interstitial ad. So I've copied this Java file, and pasted it into our project, in the Java lives folder. Then we need to click it and say add as library. Now, we should be able to open it, and we can see all the classes and interfaces that we have access to, like add layout and listener, and also, interstitial ad. We also need to add a couple lines of code to our android manifest XML file. So let's take a look at that. Inside our applications tag, I've added lines that reference Amazon's ad activity package. And outside of the application tag, you can see that I've also declared the permissions we need to use, which let us use the Internet to retrieve ads. I've also added these extra runs that allow us to get the user's locational data, these can be useful if you want to target ads to specific location. So make sure you've changed your android manifest and included your library. And now, let's dive into our Java code to make an interstitial ad. Great now that our environment is set up, let's start coding an interstitial ad. The first thing we have to do in our AdActivity Java code is to set up our application key. We do this by saying AdRegistration.setAppKey and then you'd put in your unique app key. This key is given to you when you register for a game developer account through Amazon, and it's unique for every app. It helps identify your app, and keep track of ad displays and clicks that your app receives. You'd usually use your own app key, but since we're just doing a general example, I'll use a sample key that Amazon provides. Now let's make our ad. First I'm going to make a private variable of interstitial ad type, which we know is a class in our Amazon ads library. Then I'll give it a name, InterstitialAd. Now that we have our ad variable, we're going to create an instance of it, load it, and show it. So back to our onCreate method. I can create our ad by saying this, then giving the variable name, InterstitialAd equals a new InterstitialAd object. This ad object needs to know the activity it's going to be used in, and again that's just going to be this activity. That is to say, our InterstitialAd activity. Then I just need to add a line of code to load our ad, which is as simple as saying our variable interstitial ad.loadad. But what happens once this ad is loaded? I'll have to create an ad listener that will just listen to the ad and decide what happens when it's loaded or when it's closed. To listen to our ad, we have to say this.interstitial.ad.setListener, and then we're going to define a listener of our own. So we're going to create an Internet class called MyCustomListener, and we'll just build off the default add listener. So we'll say MyCustomListener extends default ad listening. The listener notices what happens to our ad at three different points, which are methods in the listener class. One point when the ad is loaded or unloaded, which takes in the ad object and its properties as parameters. A second point, if the ad fails to load, which will throw an error message, and a third point when the ad is dismissed, that is when it's closed. And we can write in specific behaviors for our ad or app at each of these three points. For example, if our ad fails to load we might want to put in code to call a backup ad network. If our ad is closed, we might want to put in code to resume our game. But for now we're going to focus on what happens once our ad is loaded. Once our ad is loaded, I'm just going to want to show it. So to do that, I want to specify the activity that it's in, and then a reference to our ad object. And then similar to loading the ad, I just say .showad. It's important that the show ad is inside the on ad loaded method, because we can only show an ad after it's been loaded. So if we put it up here and it didn't load, we would get an error. So this method is all we really need to show our ad. And the last thing we need to do is specify that we're using this custom listener of ours. So let's replace this with a new MyCustomListener object. Now let's make another type of ad, the banner ad. This time, let's build it into an actual game that was built with libgdx. Let's create a banner ad for the game Icicles, where you just move your player around and dodge icicles. I already have the code open for the game Icicles. So let's change it a bit and add a banner ad at the top of the screen. The first thing I've done is to include our ads library. And I've also updated our Android manifest file to include the ad activity and the permissions we'll need. So now we can access all the ad objects we need and retrieve an ad to display from the Internet. And now we're ready to start programming a banner ad. And we'll be doing all of our ad programming in our Android launcher class which contains our onCreate method. We'll be treating this class like a view that we can display ads in, and to create our initial view we'll need to change our initialization code a little. Instead of just saying initialize, we're going to create a view with initializeForView. We're going to create a view called GameView, and then pass in the new Icicles game and config, like we did before. Great, then next, we need to do what we did in our previous project, which is to register our app. This lets us receive ads, and I'll use the same sample key I did before. Next let's create our banner ad. The first step, just like in our interstitial ad project, is to create a private class variable. But instead of an interstitial ad this is going to be an AdLayout, and I'll give it the name bannerAd. An interstitial ad automatically took up the whole screen but a banner ad only takes up a small part. And an AdLayout object lets us decide the size and placement of our ad. Then I'll go back into our onCreate method and make a new banner ad, where I say this activity .bannerAdVariable is equal to a new AdLayout object. Next we have to define where we want our ad to appear in our gameView. To do this, we first have to define a relative layout. Our RelativeLayout, which I've called layout, will include all the views and layouts that appear on our screen. So it's going to include our gameView that we created here and our bannerAd AdLayout. To include these we need to add them to our layout by saying layout.addView, then giving our view followed by the width and height we want them to occupy. First to add our gameView I'm going to specify width and height that take up the whole screen. And since I want this to work across screens, big or small, I'm going to use parameters that Android provides to automatically size our ad. MATCH_PARENT will automatically fit the whole screen. So, since I want the gameView to take up the whole screen I'm going to say with and height are both equal to MATCH_PARENT. Then for my bannerAd, I'm going to define the dimensions first. I want it to be as wide as our screen but take up as little height as possible. So I'll give it a width of MATCH_PARENT and a height of WRAP_CONTENT. And WRAP_CONTENT means that the height is only as big as it needs to be to fit all the content in the banner ad. It wraps around the content. Then I can add our AdLayout by saying layout.AddView, our banner ad, and then the dimensions. And finally after defining the placement of my ad and the views, I still want them to display on my screen. And I do this by saying setContentView and passing in a RelativeLayout. Then we need to do one more thing, which is load our ad. And this is the same as with an interstitial ad. We just say our variable, bannerAd.loadAdd. But unlike our interstitial ad, a banner ad will load and show automatically once it's loaded. So we don't need a listener unless we want a really specific behavior. And now we're done. Let's see what this looks like when we run our game, using BlueStacks emulator again. And now you can see we get our Icicles game, now with a banner ad right at the top of our screen. Great job. Now you know how to use the Amazon Mobile Ads API to make the two most common types of ads, banner ads and interstitial. A lot of the games we've been talking about use consumable in-app purchases. But there are three main types of in-app purchases. Consumables, entitlements, and subscriptions. Consumables are items that get used up in the game. Sort of like food you consume and have to keep buying. Only these are usually power ups that you have to buy or earn over and over again. Entitlements are things that the player buys and then gets to keep. Like a sword you get to keep or level you can permanently unlock. And finally, subscriptions are things that the player gets as long as they keep playing. Sort of like entitlements, only you have to renew them over time. So these are the three main types of in-app purchases. Let's look at some real examples of these. Here are some examples of in-app purchases. Here are some keys you can buy, some different types of blades, and a pack of power-ups. Decide what type of in-app purchase that these are. Consumables, entitlements, or subscription and then, type the letter that best matches that type. Letters can be used more than once or not at all. For example, all of these could be letter C or they could all be different. The answers are A, B, and A. The first example is of a consumable item. These keys will be used up in the game to unlock levels and get a plant. This second example is of entitlements. Once these different blade types are bought, the player can keep them indefinitely. And the third is another example of a group of consumable items. These power ups can be bought and then used up in the game. Most of these in-app items can be purchased with real money. But many games also include in-game currency, like stars. So let's take a look at those. There are two different kinds of in-game currency you can use to purchase in-app items, soft currency and hard currency. Soft currency is easy to get and is often used to pay for consumables, whereas hard currency is more difficult to get and is used to get rare items or entitlements. Soft currency is easy to get because it's very grindable. And grindable just means that you can play parts of the game like levels or mini games over and over again to accumulate soft currency. So the more time you spend playing a game, the more soft currency you slowly accumulate. One example of this is Fruit Ninja's starfruit currency. Players accumulate starfruit over time as they play the game. And once they save up enough, they can use these starfruits to buy consumables like bomb deflects or game power-ups. Hard currency is between real money and soft currency. It's difficult to earn and can also usually be bought with real money. Like we mentioned before, it's often used to pay for entitlements or other rare items. In Fruit Ninja golden apples are hard currency. You can only earn them by paying real money for them or by watching offer wall adds. These apples are used to unlock levels in tournament challenges. So if you want a fun multiplayer challenge, you'll have to pay hard currency for that entitlement. Let's look at some other examples of in-game currencies. Here are some examples of in game currencies, some stars, gold coins and more gold coins that you can pick up. These are either A, soft currencies or B, hard currencies. Type in the letter that matches the currency that's displayed. The answers are B for stars and A for both the coin types. The first example is of hard currency. The star shop is selling stars for real money and has these fixed prices, $4.99, $9.99. And because the prices go so high, this is a good indicator that this is hard currency, that it's difficult to get. The second is a good example of soft currency, which you can see if you look closely is being purchased by another type of currency, not real money like hard currency is. The third is another example of soft currency. The coins, which you can clearly accumulate as the game continues by just hopping into them. Here we have an example of players paying real money for in game currency. $0.99 cents will get you 3000 of gold, $4.99 gets you 18, 000, and so on, and you can see this bonus listed underneath the higher priced items. And this is a great example of being clear about value. The bonus markers make it obvious that there's a specific benefit for buying different, higher priced items in the store. And the user doesn't have to do any math. For example, I already know that the $4.99 option compared to the $0.99 one will give me 20% more gold than I would have gotten, had I gone for the cheaper option. The store layout is also very clear. They're only selling one item, gold, the in game currency. So, the store isn't crowded with too many options. Let's look at another example of a store that could be improved. It has a good layout, but I'm not immediately sure why I should buy a higher priced item and the store is mixing in game currency and items for sale? There's too much variety. This example is not as clear as our last one, and I would be less likely to buy higher priced items, or really, anything in this store. So make sure to show what kind of value a player will be getting by buying your in-app items. It's important to have a nice layout, and most importantly be clear about value. Now that we've learned that being clear about value is really important for in-app purchases, what else can a game developer do to improve their in-app purchases? You also want to be clear about how to use purchases in your game. Lots of games use tutorials to show you how to use new items. When you show a player how to use an in-app purchase, they're much more likely to use them in the future. Also, make sure to have variety in your purchases to keep people interested. And think about introducing new items as people play the game. So you could introduce a group of items the first day someone plays a game and then a different group of items a week later. Yep, variety is a great way to keep players interested in your item. And one place, though, you should avoid variety is your price points. Most successful games offer between one and five price points for all their in-app purchases. This goes back to clarity, because the value for items at each price point has to be very clear, and too many options can get confusing. So to improve your in-app purchases, teach players how to use them, offer variety, and be clear about value. Here are three different in-app stores. Based on their layout and clarity, which store would you be most likely to buy from? The correct answer is the second option. The second option is selling just one thing, gold, the in-game currency. But it does a great job of showing value. It has the percentage bonus of buying more gold displayed right in front of you. The value is clear and you're encouraged to buy higher priced items. The first option to buy stars in fruit ninja has a great layout really clear but the value is not clear until I do some math. It'll be helpful to have bonus markers like in this one. So this store could improve especially if you wants players to go for the more expensive packs. And the third option for candy crush has high price points and doesn't describe the items at all. So I probably wouldn't buy from this store without more information. So we've been talking about all these different ways to monetize your app from premium to freemium options. But sometimes it can be difficult to decide on a strategy. Wouldn't it be nice to get paid just based on how much people liked your game? Yep, and Amazon has actually created a monetization model that tries to do just this. It's called Amazon Underground. Cool, tell me more about it. How can a game make money off of likability? Well, it's hard to measure likability. But we can get an idea of that based on how often a game is played. So Amazon Underground pays game developers based on how much time players spend in their game. That sounds pretty interesting. So every player would help to monetize their game. Exactly. Amazon Underground has a great selection of premium apps and games for free and all in-app purchases are free, too. For example, you mentioned playing Fruit Ninja before. And in the Underground version, you can get all the stars and golden apples you want for free. They are still packaged in a store, like in the original game fomat. But their price is zero. So no other monetization models are used. That sounds really easy. But how much money can a developer expect to make off of this model? Well, Underground has a per minute payment rate which translates to 12 cents an hour. This can add up, especially if you have a lot of players. What an interesting way to monetize. This is something to keep in mind when you're designing your game. Different platforms may have built-in monetization strategies. We've talked a lot about different monetization strategies in your game, but one more thing to consider is how to make money outside your game. So how can you generate alternate streams of revenue? Well, you can create physical products. Things like t-shirts or toys that have your game characters on them. I've even seen games that sell their own merchandise in their stores. I've seen t-shirts like you mentioned and even phone cases. Mm-hm, yeah. Games can promote their own merchandise by putting it in a game store or even displaying their own ads. Merchandise can get be a great way to monetize if you have a big fan base. Companies like Amazon offer an easy way to create and sell merchandise. For example, Merch by Amazon is an on-demand service that lets you sell t-shirts with your apps logo on it. Yeah, so as you're building your game, keep in mind that you aren't limited to end game purchases and ads to make money. There are many other innovative options out there. Most monetization strategies focus on in-app purchases and pricing your game and game items. But it's important to think about making money outside your game too. What are some benefits of creating merchandise for your game? Please check all that apply. Is it, only the best games have merchandise, people using merch promote your game, your fans make money from your merchandise, it creates a way to make money outside your game, or all of the above? The answers are, people using merch to promote your game, and, merchandise creates a way to make money outside your game. I'll also except the first answer, because the best games often have fans who want to buy merchandise. Say someone buys a stuffed animal of your game and when they walk around with it other people will see the item. So, it's a good way to get your app noticed and promote your game. And like we already mentioned, it creates a way to make money outside of in-app purchases and ads that are inside the game. So we've covered all different types of monetization models from freemium to premium. Which do you think is the best? Well, premium was the easiest to do, but most games have a free option because it encourages more people to try out the game in the first place. We also learned about how freemium games make money. Yeah, I like learning about the different types of ads. And also learning how to code them into a game using the Amazon mobile apps API. What did you think was the most interesting? I thought learning about in app purchases was great, because it went into the details, like the importance of being clear about value. And we also mentioned alternate ways to monetize. Like through Amazon Underground and outside your game by making and selling merchandise. Now that we've learned about all these strategies, what are our next steps? I'd say, we're almost ready to publish your game. In our next lesson, will show you the best practices for testing out your game and publishing it. So now that you've learned about monetization models, there are just a few more steps to finalize your game and help it stand out in the crowd. We've also learned about building an engaging game. But it's important to ask players what they think. This lesson will cover how to use analytics and testing tools to get helpful feedback. And once you've tested out your game, you'll want to get it noticed in an app store. There are a lot of games out there. And if no one has heard of your game, how can you encourage people to download it? When people are discovering a game, they look for exciting visuals and a clear description We'll talk in depth about design strategies that can increase your game's visibility in the app store. And finally, we'll will show you how to deploy your app to an app store. So after this lesson, you'll be ready to publish your own game. When you first have an idea for a game, it's often pretty complex. You might imagine a story with lots of interesting graphics and enemies, but the core of the game is usually very simple. And this core is the first thing you want to test out before you distribute your game to a wider audience. You want to make sure your game foundation is strong, by testing it out with a small group of players. To test your game core, you need to create a minimum viable product which is the simplest most focused version of your game. Minimum means it contains the minimum amount of features that encapsulate the game, no extra levels or graphics. Let's look at some a examples of a minimum viable product. Consider the game Megatroid which is a platformer a game where you jump through stages, getting upgrades and shooting robot enemies to advance levels. You can even generate your own playable levels. This game has a lot of fun features, but what do we need in the minimum viable product? Level creation? No. Enemies? No. Weapon upgrades, or even weapons at all? No. These are all extra features that can be added later in the game. To test the foundation of the game, we need to remove all the enemies, items and extra levels, all the things that are nice to have but not necessary to have. And what we're left with is a single jumping platform game. To make a Megatroid minimum viable product, I would include just a single level where I can move and jump and fall into pits. I might also include an easy restart for the game. This defines the basic structure of my game. These are the minimum needed features, and they're the most important to perfect. We want to test this version out and make sure that the game movement is as smooth and high quality as possible. Then we can add enemies and upgrades later on. So when you're thinking about what to include in your minimum viable product, think about what features are needed for your game to be entertaining and what can be added later. Let's look at another game. Crossy Road, which lets you play as a chicken, and your goal is to cross roads while dodging different cars. The roads also include things like trains and water, and you can unlock other playable characters besides just a chicken. What features would the minimum viable product of this game include? A movable character, unlockable characters, water and train obstacles, or a moving obstacle to avoid. Please check all that apply. A movable character and a moving obstacle to avoid are both correct. Creating a variety of obstacles like water and trains and creating more characters are all extra features. Things that you can add later. They would be nice to have but aren't required for our game foundation. At its simplest, this game is basically a move and avoid game. So those are the features that need to be included in our minimum viable product. Once you have a simple version of your game, you'll want to test it out. But how did developers start testing? Many developers give their game to their friends and family to play. And once they have a more polished version, they deploy it to an app store to get reviews from a much wider audience. But only some players submit reviews and it takes a while to read through them. Is there a quicker way to get feedback? Actually, yes. Many developers use analytics tools, like Amazon Mobile Analytics, which tracks app usage and revenue over all your users without any player reviews. These tools help you identify where players stop playing, when they buy in app items, and what games are most popular. So don't be afraid to submit a game with a few imperfections, analytics can help you identify any flaws and strengths early on and regular updates can help you create the best ongoing experience for players. Next, we'll show you one more way to test your game in real time and improve it. So they've identified a flaw in your game. But you aren't sure about how to fix it. What do you do? Well you can make an educated guess. But the best developers don't guess. They know, they use A/B testing, which is testing different versions of a game at the same time. And seeing which version gets the best response from players. It's called AB, because the simplest test compared two versions. An A and B version. The A version is given to one half of the games users. And the B is given to the other half, and we see how each group of users respond. These tests can help you repair any game content that you're unsure about. >From the color scheme to game content. And you can test out two versions or as many as you want. Let's walk through an example of creating effective AB testing scenarios. Let's say we've made a platform a game, where we jump around and shoot enemies to advance levels. Our analytics have shown us that only 20% of players make it past Level 3. We think that the level might be too hard, so let's change it. Let's test out different levels of difficulty and see how users respond. To see how players respond to different scenarios, we can use A/B testing, which is a method of testing that compares the performance of two or more game versions A and B and so on. The most effective A/B testing scenarios are designed to test out one main variable, X, Y, count, color, etc. And they monitor one or two results like level completion or profitability, things like that. Our game versions are distributed amongst our players. And so there are usually only 2-4 versions tested at one time. So for our game we want to change level 3. Let's create three different test cases where we change the number of enemies and see how many more players will complete the level. You also want to test your original version and comparison to the new ones. So we have an A, original version. A version B with 10% fewer enemies. And a version C with 20% fewer enemies. The next step is to distribute these versions to our players, so that about a third of our players play each version. This is usually done by percentage. So, we have 33%, 33% and 34%, which adds up to a total of 100%, distributed to versions A, B, and C. Then we get our results and see how many players complete the level. We see that only 20% of our group A players completed the level. 80% of group B completed level 3, and 70% completed level 3 for group C. So both B and C seem like a lot better options than A. And maybe the reason that C isn't as high as B is because it's too easy, so people get bored playing. Either way, A/B testing lets us know for sure that version B is our best option. Many game developers, especially those creating Freemium games use A/B testing to help design ads and in app purchases to be the most effective. Here I have an example of an in app purchase offer. It offers a new character, a frog, you can buy for 99 cents. Let's think about how we can use A/B testing to improve this in-app purchase offer. What are some good examples of variables to test in our A/B scenarios? Check all that apply. The age of our players, the appearance of the offer, the price of the offer, or testing all these variables at the same time. Both the price and appearance of our offer would be good to change and test for the price and A/B test could let's compare how many people buy a new character. That's 199 versus just 99 cents. And another A/B test would be useful to test appearance. We could change the size and color of the offer. Or even change the character completely and see which design gets the most clicks. The age of our players is not something we can quickly change and test. And A/B tests give you the most detailed feedback when you use them to focus on improving one variable at a time. So these answers are wrong. Now that you know how to test your game it's time to think about how you can get your game noticed. App stores house hundreds of thousands of apps with more being added each day. So how can your game stand out? The first thing that potential players notice is what your game looks like, based on the icon and screenshots in the app store. And it's also important to have a descriptive name, so people have an idea of what your game is about as soon as they see it. This section will be all about how to optimize your app store presence by designing everything from your game icon to its description. Then you'll be ready to submit your app. Once you publish your app to a distribution platform, the first thing that people will notice is your game icon and name. Let's focus on the name first. Choosing your name strategically affects where your game appears in search results, and can help you stand out from your competitors. Here are a few tips to consider when you're thinking of a name. Keep it short and simple. Make it descriptive and make it unique, which will make it easy to search for. Each app store has a maximum app namel length, before it cuts off and turns into ellipses. As you can see in this example, Angry Birds Star Wars, and Kingdom Rush Frontier are cut off. So make sure to keep your name short enough to make it visible, especially the parts of the names that are descriptive. Having a descriptive name is really important because then, when someone browse the app store, they'll have an idea of what your game is about, right when they see it. Here the name, Stack the States and Table Top Racing give us an idea of what to expect in the game, even if we've never heard of them before, a stacking game and a racing game. You also want to have a searchable game name. One that sets itself apart from any similar apps. If you don't, you might end up with too much competition. Like in the case of names that involve flappy in their title. After the success of Flappy Bird, so many other flappy apps popped up that it was hard to tell one from the other. So choose a unique, descriptive, and short game name. In addition to choosing a unique name for your app. Another thing that can help people search for your game is to include the right keywords. Keywords are words that link your game with certain search terms. And then lesser game is top ranked. Keywords will be the main way that players find your app. But how can you decide on the best ones. The best keywords are similar to the best names. They describe your game well and done up in searches quite often. Lots of developers choose to mix highly searched words with more descriptive ones. For example, they might use common words like game and fun alongside more descriptive words like lasers or penguin. Yeah, and once you have chosen your keywords you'll want to move on to building great visuals with icons and screenshots. Here are six different game icons. Three of them belong to really popular games. We're talking millions of users. And the other three aren't as popular. Choose one icon you think belongs to one of the three more popular games. Here are the icons for the three more popular games. This icon with the spray can. This puzzle icon. And this burger icon. So, any of these answers are correct. But it can be hard to tell. The point of this exercise was to show that even if you didn't recognize all the game icons, you still made a decision about which games were popular just based on the appearance. Some of these examples have too many tiny details, like this house, or are boring to look at. And this is going to be our first impression of the game when we search for it. And people do this all the time. They quickly judge how good a game is based on how the icon looks. Say I'm trying to build a game that lets people build their own robots but I'm not sure what I want the icon to look like. Let's consider these three options for an icon and decide on a best design. Our first choice, is a picture of nuts and bolts that says robot on it and this one is not very good. I don't think I'd be able to read the label if it gets any smaller, like if it's displayed on my phone. And the colors aren't very eye catching. The second is a picture of a large R. This one is readable and has a nice bold green background but it doesn't really tell me what the game's about. Labels like this work for established brands, think of the Facebook F but otherwise, a person browsing will more want more information. And the last option is, a picture of a robot with the screw going in his head. It's colorful and descriptive. We immediately know that the game Is about robots, and there's no small text. So, this looks like the best choice. The next thing a person will see in the app store after your icon, is the game screenshots and description. So, let's learn more about these next. So we know a game icon should give people an idea of your game content. But screenshots let you show them in detail. The best screenshots show what's unique and fun about your game. Here are some good screenshots from the game Temple Run. The very first image is of the main character running away from something into a temple. It shows all the main aspects of the game, a character who runs and collects coins, with a clean visual. The second image emphasizes a detail, the coins that we saw in the first image, and the text hopefully explains what they do. And the third screenshot shows a special feature. And you'll notice that all of these images have some text that helps describe the images. In general you'll want to communicate visually, but it's okay to have some supporting text that doesn't take away from the image. After someone looks at your screen shots, if they're still on the fence, they'll read your game description. The description should be clear and short and talk about your game's main features. For example, Temple Run's description gives a bit of back story about the player running away from demon monkeys and collecting coins, and then goes on to describe how to play the game with swipes and taps. It describes the gameplay, goals, and obstacles. So use your screenshots and description wisely to describe gameplay, goals, and obstacles. Screenshots should be clear and help describe your game's unique features. Here are some screenshots from the game Swipey Rogue, which is a free-running game where you avoid obstacles and sometimes fight enemies. How could you improve this game's screenshots? Let's first take a look at these screenshots and see what we don't really like. First of all, it's not very clear that this is a running game. It just mentions this in the last image and the first screenshot isn't great because it describes crystals that are appearing but the text really obscures a lot of the screen. In the second screenshot there's a lot of small things going on and it's kind of confusing and the third shot is just a boring intro screen. It doesn't show anything special about gameplay. So these screenshots need to be more clear and less crowded and focus on the game features. They could also benefit from some explanatory text that doesn't show up in the center of the screen. So always design your screenshots to be clear and highlight interesting game features. After you have prepared your game for display in an app store, you should decide whether you want your app to be available locally or internationally. If you do want to go international, you'll definitely want to localize. Localization means changing pieces of your game so that they fit in the language and culture of different locations. This can include changing the currency or the language of any game text. This can help encourage people around the world to download your game. Let's see how you can include translation in the code of your game. Android makes it easy to incorporate translation into your app. Here I've made a translate app, and I'm going to make it display text that translates automatically to our language of interest. In this case, we'll include translations to Spanish and French. So I've started with the main activity with an empty view. So the first thing we need to do is to create some text, by creating a text view. And we can do that in our activity main XML file. Right now, we just have our empty layout, so let's create a text view that appears at the top of our screen and displays the text hello world. Our text view automatically gives us our layout width and layout height. And since I want to text to appear at the top of our screen, I'm going to give these dimensions that take up the whole screen, which is going to be wrapped content for both. Great, now I need one more parameter. That's the text that this will contain. So, I say android text equals. Now I can put any string I want to be displayed. And I'll put Hello_World. Now let's see if this worked. It did, we see it appear right at the top of our screen and actually let me change the text size so that it's bigger. Okay, I change of text size to be 24 dp, so that should be bigger. Great, now it's a little more visible and we can change this text to anything we want just by changing the wording in our text view. So instead of Hello World, I could say goodbye, and then save it and it'll change. But to display this in different languages, we want to be able to load this string from a file and change it based on the language we want. So we don't actually want to hard code it in our view like we've done. Instead, for any text we use, we'll want to reference it from our file that contains all our strings or strings XML file, or strings that are contained in our values folder. So let's take a look at what's in there. We already have a string called app name that says translate, that's the title of our app and one for settings as well. These were automatically generated. So now let's make our own. So in our strings XML file, let's create a string with the variable name, hello world. Then this string tag will include the word or phrase we want to display. So let's just write in hello_world here. Then we'll want to reference this variable when we go to display our text view. And to reference it, we'll be using the variable name hello_world. So let's go back to our text view. In antibody main,and delete our hard coded text. To reference a string variable in strings to XML, we have to say @string. And you'll see some pop up, all the strings that are stored In our string's XML file. So we want to say @string then slash the variable name we want, which in this case is our hello world string. Now let's save this and see what's displayed. Hello world, It worked. And loading the string instead of writing it indirectly makes it easy for us to include different languages. For example, to include the string in Spanish, you just have to open a translation editor. Up here we click on the little world icon, and edit translations. We see all our string variables, action settings, app name, and hello world which I'm going to focus on. So to add a Spanish translation to hello world, I just click on this world icon again. And you can see all of these options for different languages. So I'll scroll all the way down to Spanish. And when I click it, these boxes appear under a Spanish option. Our app name will stay the same unless we change it. And we have to include translations for Settings, and hello world, and any other strings we added. So let's include a Spanish translation for hello world. We go down here to the translation box and type in our translation. Instead of hello world, we'll have hola mundo. And let's add one more type of translation. Let's add a French one. So again we go to a world icon and scroll down to French. And we have another column appearing for the French language. And I'll write my translation. Instead of hello world, I'll have bonjour tu la monde. And so, all these different translations are now assigned to a same string variable, hello_world. Then, for any devices that are in Spanish or French our app will check in here for any Spanish resources or French resources. And if it can't find any, it will go back to a default value. And it's the same process for any other languages you want to add. So localization can be as simple as that. Localization can help your app to get noticed internationally, but sometimes it can be challenging to translate all your game related text. So if you have limited time and resources, and could only choose one of the following to translate and localize, which would you choose? Choose the answer you think is the most important to translate. Is it, In-store name and description, names of in-app purchases, any text that helps describe screenshots or game leaderboards? The answer is in-store name and description. Your game will first be noticed in the app store so that's when you need the clearest communication. So the most important thing to translate for different audiences is anything in the app store, that includes the in-store name and description and maybe the text that goes to your screen shots. But the name and description are the most important because your screen shots should mostly be visual and not rely on text to communicate. The names of in-app purchases and leaderboards are less important, and players should be able to get an understanding of these features just by playing your game. Great. Now you've learned all about monetization strategies and seen how to submit any game to an App store. We talked about how important it is to start thinking about monetization early on and went to with the best design strategies for finalizing your game. Yeah, like how your game's appearance in the App store can help it stand out And how it's okay not to have the perfect game before you launch it. The important thing was to have a strong game foundation, and then make changes as you go along based on the player feedback. And you can get that feedback directly from reviews or from analyzing and testing a game in real time. Taking what you have learned in this course, you now have a leg up on many developers who leave monetization strategies just as an after thought. Congrats on finishing this course. Time to get working on a new game.